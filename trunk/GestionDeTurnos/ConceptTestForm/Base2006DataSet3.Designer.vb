'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.42
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.ComponentModel.ToolboxItem(true),  _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 System.Xml.Serialization.XmlRootAttribute("Base2006DataSet3"),  _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Base2006DataSet3
    Inherits System.Data.DataSet
    
    Private tableConsultorios As ConsultoriosDataTable
    
    Private tableDetalleHistoriaClinica As DetalleHistoriaClinicaDataTable
    
    Private tableDisponibilidadHoraria As DisponibilidadHorariaDataTable
    
    Private tableEspecialidades As EspecialidadesDataTable
    
    Private tableFacturas As FacturasDataTable
    
    Private tableLocalidades As LocalidadesDataTable
    
    Private tableMedicos As MedicosDataTable
    
    Private tableMotivoVisita As MotivoVisitaDataTable
    
    Private tableObrasSociales As ObrasSocialesDataTable
    
    Private tablePacientes As PacientesDataTable
    
    Private tablePacientexPlan As PacientexPlanDataTable
    
    Private tablePlanes As PlanesDataTable
    
    Private tablePracticaMedicaxPlan As PracticaMedicaxPlanDataTable
    
    Private tablePracticasMedicas As PracticasMedicasDataTable
    
    Private tableProvincias As ProvinciasDataTable
    
    Private tableSYS_ROLES As SYS_ROLESDataTable
    
    Private tableSYS_Usuarios As SYS_UsuariosDataTable
    
    Private tableTiposDocumento As TiposDocumentoDataTable
    
    Private tableTurnos As TurnosDataTable
    
    Private relationEspecialidadDetalleHistoriaClinica As System.Data.DataRelation
    
    Private relationPacientesDetalleHistoriaClinica As System.Data.DataRelation
    
    Private relationMedicosDisponibilidadHoraria As System.Data.DataRelation
    
    Private relationConsultorioEspecialidad As System.Data.DataRelation
    
    Private relationPacientesFacturas As System.Data.DataRelation
    
    Private relationPracticasMedicasFacturas As System.Data.DataRelation
    
    Private relationMedicosLocalidades As System.Data.DataRelation
    
    Private relationPacientesLocalidades As System.Data.DataRelation
    
    Private relationProvinciasLocalidades As System.Data.DataRelation
    
    Private relationEspecialidadMedico As System.Data.DataRelation
    
    Private relationTipoDocumentoMedico As System.Data.DataRelation
    
    Private relationTipoDocumentoPaciente As System.Data.DataRelation
    
    Private relationPacientesPacientexPlan As System.Data.DataRelation
    
    Private relationPlanesPacientexPlan As System.Data.DataRelation
    
    Private relationObrasSocialesPlanes As System.Data.DataRelation
    
    Private relationPlanesPracticaMedicaxObraSocial As System.Data.DataRelation
    
    Private relationPracticasMedicasPracticaMedicaxObraSocial As System.Data.DataRelation
    
    Private relationSYS_ROLESSYS_Usuarios As System.Data.DataRelation
    
    Private relationTiposDocumentoSYS_Usuarios As System.Data.DataRelation
    
    Private relationMedicosTurnos As System.Data.DataRelation
    
    Private relationMotivo_VisitaTurnos As System.Data.DataRelation
    
    Private relationPacientesTurnos As System.Data.DataRelation
    
    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Consultorios")) Is Nothing) Then
                MyBase.Tables.Add(New ConsultoriosDataTable(ds.Tables("Consultorios")))
            End If
            If (Not (ds.Tables("DetalleHistoriaClinica")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleHistoriaClinicaDataTable(ds.Tables("DetalleHistoriaClinica")))
            End If
            If (Not (ds.Tables("DisponibilidadHoraria")) Is Nothing) Then
                MyBase.Tables.Add(New DisponibilidadHorariaDataTable(ds.Tables("DisponibilidadHoraria")))
            End If
            If (Not (ds.Tables("Especialidades")) Is Nothing) Then
                MyBase.Tables.Add(New EspecialidadesDataTable(ds.Tables("Especialidades")))
            End If
            If (Not (ds.Tables("Facturas")) Is Nothing) Then
                MyBase.Tables.Add(New FacturasDataTable(ds.Tables("Facturas")))
            End If
            If (Not (ds.Tables("Localidades")) Is Nothing) Then
                MyBase.Tables.Add(New LocalidadesDataTable(ds.Tables("Localidades")))
            End If
            If (Not (ds.Tables("Medicos")) Is Nothing) Then
                MyBase.Tables.Add(New MedicosDataTable(ds.Tables("Medicos")))
            End If
            If (Not (ds.Tables("MotivoVisita")) Is Nothing) Then
                MyBase.Tables.Add(New MotivoVisitaDataTable(ds.Tables("MotivoVisita")))
            End If
            If (Not (ds.Tables("ObrasSociales")) Is Nothing) Then
                MyBase.Tables.Add(New ObrasSocialesDataTable(ds.Tables("ObrasSociales")))
            End If
            If (Not (ds.Tables("Pacientes")) Is Nothing) Then
                MyBase.Tables.Add(New PacientesDataTable(ds.Tables("Pacientes")))
            End If
            If (Not (ds.Tables("PacientexPlan")) Is Nothing) Then
                MyBase.Tables.Add(New PacientexPlanDataTable(ds.Tables("PacientexPlan")))
            End If
            If (Not (ds.Tables("Planes")) Is Nothing) Then
                MyBase.Tables.Add(New PlanesDataTable(ds.Tables("Planes")))
            End If
            If (Not (ds.Tables("PracticaMedicaxPlan")) Is Nothing) Then
                MyBase.Tables.Add(New PracticaMedicaxPlanDataTable(ds.Tables("PracticaMedicaxPlan")))
            End If
            If (Not (ds.Tables("PracticasMedicas")) Is Nothing) Then
                MyBase.Tables.Add(New PracticasMedicasDataTable(ds.Tables("PracticasMedicas")))
            End If
            If (Not (ds.Tables("Provincias")) Is Nothing) Then
                MyBase.Tables.Add(New ProvinciasDataTable(ds.Tables("Provincias")))
            End If
            If (Not (ds.Tables("SYS_ROLES")) Is Nothing) Then
                MyBase.Tables.Add(New SYS_ROLESDataTable(ds.Tables("SYS_ROLES")))
            End If
            If (Not (ds.Tables("SYS_Usuarios")) Is Nothing) Then
                MyBase.Tables.Add(New SYS_UsuariosDataTable(ds.Tables("SYS_Usuarios")))
            End If
            If (Not (ds.Tables("TiposDocumento")) Is Nothing) Then
                MyBase.Tables.Add(New TiposDocumentoDataTable(ds.Tables("TiposDocumento")))
            End If
            If (Not (ds.Tables("Turnos")) Is Nothing) Then
                MyBase.Tables.Add(New TurnosDataTable(ds.Tables("Turnos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Consultorios() As ConsultoriosDataTable
        Get
            Return Me.tableConsultorios
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DetalleHistoriaClinica() As DetalleHistoriaClinicaDataTable
        Get
            Return Me.tableDetalleHistoriaClinica
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property DisponibilidadHoraria() As DisponibilidadHorariaDataTable
        Get
            Return Me.tableDisponibilidadHoraria
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Especialidades() As EspecialidadesDataTable
        Get
            Return Me.tableEspecialidades
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Facturas() As FacturasDataTable
        Get
            Return Me.tableFacturas
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Localidades() As LocalidadesDataTable
        Get
            Return Me.tableLocalidades
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Medicos() As MedicosDataTable
        Get
            Return Me.tableMedicos
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MotivoVisita() As MotivoVisitaDataTable
        Get
            Return Me.tableMotivoVisita
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ObrasSociales() As ObrasSocialesDataTable
        Get
            Return Me.tableObrasSociales
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Pacientes() As PacientesDataTable
        Get
            Return Me.tablePacientes
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PacientexPlan() As PacientexPlanDataTable
        Get
            Return Me.tablePacientexPlan
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Planes() As PlanesDataTable
        Get
            Return Me.tablePlanes
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PracticaMedicaxPlan() As PracticaMedicaxPlanDataTable
        Get
            Return Me.tablePracticaMedicaxPlan
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property PracticasMedicas() As PracticasMedicasDataTable
        Get
            Return Me.tablePracticasMedicas
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Provincias() As ProvinciasDataTable
        Get
            Return Me.tableProvincias
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYS_ROLES() As SYS_ROLESDataTable
        Get
            Return Me.tableSYS_ROLES
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property SYS_Usuarios() As SYS_UsuariosDataTable
        Get
            Return Me.tableSYS_Usuarios
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TiposDocumento() As TiposDocumentoDataTable
        Get
            Return Me.tableTiposDocumento
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Turnos() As TurnosDataTable
        Get
            Return Me.tableTurnos
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.BrowsableAttribute(true),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As Base2006DataSet3 = CType(MyBase.Clone,Base2006DataSet3)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Consultorios")) Is Nothing) Then
                MyBase.Tables.Add(New ConsultoriosDataTable(ds.Tables("Consultorios")))
            End If
            If (Not (ds.Tables("DetalleHistoriaClinica")) Is Nothing) Then
                MyBase.Tables.Add(New DetalleHistoriaClinicaDataTable(ds.Tables("DetalleHistoriaClinica")))
            End If
            If (Not (ds.Tables("DisponibilidadHoraria")) Is Nothing) Then
                MyBase.Tables.Add(New DisponibilidadHorariaDataTable(ds.Tables("DisponibilidadHoraria")))
            End If
            If (Not (ds.Tables("Especialidades")) Is Nothing) Then
                MyBase.Tables.Add(New EspecialidadesDataTable(ds.Tables("Especialidades")))
            End If
            If (Not (ds.Tables("Facturas")) Is Nothing) Then
                MyBase.Tables.Add(New FacturasDataTable(ds.Tables("Facturas")))
            End If
            If (Not (ds.Tables("Localidades")) Is Nothing) Then
                MyBase.Tables.Add(New LocalidadesDataTable(ds.Tables("Localidades")))
            End If
            If (Not (ds.Tables("Medicos")) Is Nothing) Then
                MyBase.Tables.Add(New MedicosDataTable(ds.Tables("Medicos")))
            End If
            If (Not (ds.Tables("MotivoVisita")) Is Nothing) Then
                MyBase.Tables.Add(New MotivoVisitaDataTable(ds.Tables("MotivoVisita")))
            End If
            If (Not (ds.Tables("ObrasSociales")) Is Nothing) Then
                MyBase.Tables.Add(New ObrasSocialesDataTable(ds.Tables("ObrasSociales")))
            End If
            If (Not (ds.Tables("Pacientes")) Is Nothing) Then
                MyBase.Tables.Add(New PacientesDataTable(ds.Tables("Pacientes")))
            End If
            If (Not (ds.Tables("PacientexPlan")) Is Nothing) Then
                MyBase.Tables.Add(New PacientexPlanDataTable(ds.Tables("PacientexPlan")))
            End If
            If (Not (ds.Tables("Planes")) Is Nothing) Then
                MyBase.Tables.Add(New PlanesDataTable(ds.Tables("Planes")))
            End If
            If (Not (ds.Tables("PracticaMedicaxPlan")) Is Nothing) Then
                MyBase.Tables.Add(New PracticaMedicaxPlanDataTable(ds.Tables("PracticaMedicaxPlan")))
            End If
            If (Not (ds.Tables("PracticasMedicas")) Is Nothing) Then
                MyBase.Tables.Add(New PracticasMedicasDataTable(ds.Tables("PracticasMedicas")))
            End If
            If (Not (ds.Tables("Provincias")) Is Nothing) Then
                MyBase.Tables.Add(New ProvinciasDataTable(ds.Tables("Provincias")))
            End If
            If (Not (ds.Tables("SYS_ROLES")) Is Nothing) Then
                MyBase.Tables.Add(New SYS_ROLESDataTable(ds.Tables("SYS_ROLES")))
            End If
            If (Not (ds.Tables("SYS_Usuarios")) Is Nothing) Then
                MyBase.Tables.Add(New SYS_UsuariosDataTable(ds.Tables("SYS_Usuarios")))
            End If
            If (Not (ds.Tables("TiposDocumento")) Is Nothing) Then
                MyBase.Tables.Add(New TiposDocumentoDataTable(ds.Tables("TiposDocumento")))
            End If
            If (Not (ds.Tables("Turnos")) Is Nothing) Then
                MyBase.Tables.Add(New TurnosDataTable(ds.Tables("Turnos")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableConsultorios = CType(MyBase.Tables("Consultorios"),ConsultoriosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableConsultorios) Is Nothing) Then
                Me.tableConsultorios.InitVars
            End If
        End If
        Me.tableDetalleHistoriaClinica = CType(MyBase.Tables("DetalleHistoriaClinica"),DetalleHistoriaClinicaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDetalleHistoriaClinica) Is Nothing) Then
                Me.tableDetalleHistoriaClinica.InitVars
            End If
        End If
        Me.tableDisponibilidadHoraria = CType(MyBase.Tables("DisponibilidadHoraria"),DisponibilidadHorariaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDisponibilidadHoraria) Is Nothing) Then
                Me.tableDisponibilidadHoraria.InitVars
            End If
        End If
        Me.tableEspecialidades = CType(MyBase.Tables("Especialidades"),EspecialidadesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEspecialidades) Is Nothing) Then
                Me.tableEspecialidades.InitVars
            End If
        End If
        Me.tableFacturas = CType(MyBase.Tables("Facturas"),FacturasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFacturas) Is Nothing) Then
                Me.tableFacturas.InitVars
            End If
        End If
        Me.tableLocalidades = CType(MyBase.Tables("Localidades"),LocalidadesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLocalidades) Is Nothing) Then
                Me.tableLocalidades.InitVars
            End If
        End If
        Me.tableMedicos = CType(MyBase.Tables("Medicos"),MedicosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMedicos) Is Nothing) Then
                Me.tableMedicos.InitVars
            End If
        End If
        Me.tableMotivoVisita = CType(MyBase.Tables("MotivoVisita"),MotivoVisitaDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMotivoVisita) Is Nothing) Then
                Me.tableMotivoVisita.InitVars
            End If
        End If
        Me.tableObrasSociales = CType(MyBase.Tables("ObrasSociales"),ObrasSocialesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableObrasSociales) Is Nothing) Then
                Me.tableObrasSociales.InitVars
            End If
        End If
        Me.tablePacientes = CType(MyBase.Tables("Pacientes"),PacientesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePacientes) Is Nothing) Then
                Me.tablePacientes.InitVars
            End If
        End If
        Me.tablePacientexPlan = CType(MyBase.Tables("PacientexPlan"),PacientexPlanDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePacientexPlan) Is Nothing) Then
                Me.tablePacientexPlan.InitVars
            End If
        End If
        Me.tablePlanes = CType(MyBase.Tables("Planes"),PlanesDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePlanes) Is Nothing) Then
                Me.tablePlanes.InitVars
            End If
        End If
        Me.tablePracticaMedicaxPlan = CType(MyBase.Tables("PracticaMedicaxPlan"),PracticaMedicaxPlanDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePracticaMedicaxPlan) Is Nothing) Then
                Me.tablePracticaMedicaxPlan.InitVars
            End If
        End If
        Me.tablePracticasMedicas = CType(MyBase.Tables("PracticasMedicas"),PracticasMedicasDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePracticasMedicas) Is Nothing) Then
                Me.tablePracticasMedicas.InitVars
            End If
        End If
        Me.tableProvincias = CType(MyBase.Tables("Provincias"),ProvinciasDataTable)
        If (initTable = true) Then
            If (Not (Me.tableProvincias) Is Nothing) Then
                Me.tableProvincias.InitVars
            End If
        End If
        Me.tableSYS_ROLES = CType(MyBase.Tables("SYS_ROLES"),SYS_ROLESDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYS_ROLES) Is Nothing) Then
                Me.tableSYS_ROLES.InitVars
            End If
        End If
        Me.tableSYS_Usuarios = CType(MyBase.Tables("SYS_Usuarios"),SYS_UsuariosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSYS_Usuarios) Is Nothing) Then
                Me.tableSYS_Usuarios.InitVars
            End If
        End If
        Me.tableTiposDocumento = CType(MyBase.Tables("TiposDocumento"),TiposDocumentoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTiposDocumento) Is Nothing) Then
                Me.tableTiposDocumento.InitVars
            End If
        End If
        Me.tableTurnos = CType(MyBase.Tables("Turnos"),TurnosDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTurnos) Is Nothing) Then
                Me.tableTurnos.InitVars
            End If
        End If
        Me.relationEspecialidadDetalleHistoriaClinica = Me.Relations("EspecialidadDetalleHistoriaClinica")
        Me.relationPacientesDetalleHistoriaClinica = Me.Relations("PacientesDetalleHistoriaClinica")
        Me.relationMedicosDisponibilidadHoraria = Me.Relations("MedicosDisponibilidadHoraria")
        Me.relationConsultorioEspecialidad = Me.Relations("ConsultorioEspecialidad")
        Me.relationPacientesFacturas = Me.Relations("PacientesFacturas")
        Me.relationPracticasMedicasFacturas = Me.Relations("PracticasMedicasFacturas")
        Me.relationMedicosLocalidades = Me.Relations("MedicosLocalidades")
        Me.relationPacientesLocalidades = Me.Relations("PacientesLocalidades")
        Me.relationProvinciasLocalidades = Me.Relations("ProvinciasLocalidades")
        Me.relationEspecialidadMedico = Me.Relations("EspecialidadMedico")
        Me.relationTipoDocumentoMedico = Me.Relations("TipoDocumentoMedico")
        Me.relationTipoDocumentoPaciente = Me.Relations("TipoDocumentoPaciente")
        Me.relationPacientesPacientexPlan = Me.Relations("PacientesPacientexPlan")
        Me.relationPlanesPacientexPlan = Me.Relations("PlanesPacientexPlan")
        Me.relationObrasSocialesPlanes = Me.Relations("ObrasSocialesPlanes")
        Me.relationPlanesPracticaMedicaxObraSocial = Me.Relations("PlanesPracticaMedicaxObraSocial")
        Me.relationPracticasMedicasPracticaMedicaxObraSocial = Me.Relations("PracticasMedicasPracticaMedicaxObraSocial")
        Me.relationSYS_ROLESSYS_Usuarios = Me.Relations("SYS_ROLESSYS_Usuarios")
        Me.relationTiposDocumentoSYS_Usuarios = Me.Relations("TiposDocumentoSYS_Usuarios")
        Me.relationMedicosTurnos = Me.Relations("MedicosTurnos")
        Me.relationMotivo_VisitaTurnos = Me.Relations("Motivo VisitaTurnos")
        Me.relationPacientesTurnos = Me.Relations("PacientesTurnos")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "Base2006DataSet3"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Base2006DataSet3.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableConsultorios = New ConsultoriosDataTable
        MyBase.Tables.Add(Me.tableConsultorios)
        Me.tableDetalleHistoriaClinica = New DetalleHistoriaClinicaDataTable
        MyBase.Tables.Add(Me.tableDetalleHistoriaClinica)
        Me.tableDisponibilidadHoraria = New DisponibilidadHorariaDataTable
        MyBase.Tables.Add(Me.tableDisponibilidadHoraria)
        Me.tableEspecialidades = New EspecialidadesDataTable
        MyBase.Tables.Add(Me.tableEspecialidades)
        Me.tableFacturas = New FacturasDataTable
        MyBase.Tables.Add(Me.tableFacturas)
        Me.tableLocalidades = New LocalidadesDataTable
        MyBase.Tables.Add(Me.tableLocalidades)
        Me.tableMedicos = New MedicosDataTable
        MyBase.Tables.Add(Me.tableMedicos)
        Me.tableMotivoVisita = New MotivoVisitaDataTable
        MyBase.Tables.Add(Me.tableMotivoVisita)
        Me.tableObrasSociales = New ObrasSocialesDataTable
        MyBase.Tables.Add(Me.tableObrasSociales)
        Me.tablePacientes = New PacientesDataTable
        MyBase.Tables.Add(Me.tablePacientes)
        Me.tablePacientexPlan = New PacientexPlanDataTable
        MyBase.Tables.Add(Me.tablePacientexPlan)
        Me.tablePlanes = New PlanesDataTable
        MyBase.Tables.Add(Me.tablePlanes)
        Me.tablePracticaMedicaxPlan = New PracticaMedicaxPlanDataTable
        MyBase.Tables.Add(Me.tablePracticaMedicaxPlan)
        Me.tablePracticasMedicas = New PracticasMedicasDataTable
        MyBase.Tables.Add(Me.tablePracticasMedicas)
        Me.tableProvincias = New ProvinciasDataTable
        MyBase.Tables.Add(Me.tableProvincias)
        Me.tableSYS_ROLES = New SYS_ROLESDataTable
        MyBase.Tables.Add(Me.tableSYS_ROLES)
        Me.tableSYS_Usuarios = New SYS_UsuariosDataTable
        MyBase.Tables.Add(Me.tableSYS_Usuarios)
        Me.tableTiposDocumento = New TiposDocumentoDataTable
        MyBase.Tables.Add(Me.tableTiposDocumento)
        Me.tableTurnos = New TurnosDataTable
        MyBase.Tables.Add(Me.tableTurnos)
        Me.relationEspecialidadDetalleHistoriaClinica = New System.Data.DataRelation("EspecialidadDetalleHistoriaClinica", New System.Data.DataColumn() {Me.tableEspecialidades.Espe_EspecialidadColumn}, New System.Data.DataColumn() {Me.tableDetalleHistoriaClinica.Deta_EspecialidadColumn}, false)
        Me.Relations.Add(Me.relationEspecialidadDetalleHistoriaClinica)
        Me.relationPacientesDetalleHistoriaClinica = New System.Data.DataRelation("PacientesDetalleHistoriaClinica", New System.Data.DataColumn() {Me.tablePacientes.Pac_keyColumn}, New System.Data.DataColumn() {Me.tableDetalleHistoriaClinica.Pac_keyColumn}, false)
        Me.Relations.Add(Me.relationPacientesDetalleHistoriaClinica)
        Me.relationMedicosDisponibilidadHoraria = New System.Data.DataRelation("MedicosDisponibilidadHoraria", New System.Data.DataColumn() {Me.tableMedicos.Med_keyColumn}, New System.Data.DataColumn() {Me.tableDisponibilidadHoraria.Med_KeyColumn}, false)
        Me.Relations.Add(Me.relationMedicosDisponibilidadHoraria)
        Me.relationConsultorioEspecialidad = New System.Data.DataRelation("ConsultorioEspecialidad", New System.Data.DataColumn() {Me.tableConsultorios.Cons_keyColumn}, New System.Data.DataColumn() {Me.tableEspecialidades.Cons_keyColumn}, false)
        Me.Relations.Add(Me.relationConsultorioEspecialidad)
        Me.relationPacientesFacturas = New System.Data.DataRelation("PacientesFacturas", New System.Data.DataColumn() {Me.tablePacientes.Pac_keyColumn}, New System.Data.DataColumn() {Me.tableFacturas.Pac_KeyColumn}, false)
        Me.Relations.Add(Me.relationPacientesFacturas)
        Me.relationPracticasMedicasFacturas = New System.Data.DataRelation("PracticasMedicasFacturas", New System.Data.DataColumn() {Me.tablePracticasMedicas.PM_KeyColumn}, New System.Data.DataColumn() {Me.tableFacturas.PM_KeyColumn}, false)
        Me.Relations.Add(Me.relationPracticasMedicasFacturas)
        Me.relationMedicosLocalidades = New System.Data.DataRelation("MedicosLocalidades", New System.Data.DataColumn() {Me.tableMedicos.Med_keyColumn}, New System.Data.DataColumn() {Me.tableLocalidades.LOCA_KeyColumn}, false)
        Me.Relations.Add(Me.relationMedicosLocalidades)
        Me.relationPacientesLocalidades = New System.Data.DataRelation("PacientesLocalidades", New System.Data.DataColumn() {Me.tablePacientes.Pac_keyColumn}, New System.Data.DataColumn() {Me.tableLocalidades.LOCA_KeyColumn}, false)
        Me.Relations.Add(Me.relationPacientesLocalidades)
        Me.relationProvinciasLocalidades = New System.Data.DataRelation("ProvinciasLocalidades", New System.Data.DataColumn() {Me.tableProvincias.PROV_KeyColumn}, New System.Data.DataColumn() {Me.tableLocalidades.PROV_KeyColumn}, false)
        Me.Relations.Add(Me.relationProvinciasLocalidades)
        Me.relationEspecialidadMedico = New System.Data.DataRelation("EspecialidadMedico", New System.Data.DataColumn() {Me.tableEspecialidades.Espe_EspecialidadColumn}, New System.Data.DataColumn() {Me.tableMedicos.Med_EspecialidadColumn}, false)
        Me.Relations.Add(Me.relationEspecialidadMedico)
        Me.relationTipoDocumentoMedico = New System.Data.DataRelation("TipoDocumentoMedico", New System.Data.DataColumn() {Me.tableTiposDocumento.TDOC_KeyColumn}, New System.Data.DataColumn() {Me.tableMedicos.TDOC_KeyColumn}, false)
        Me.Relations.Add(Me.relationTipoDocumentoMedico)
        Me.relationTipoDocumentoPaciente = New System.Data.DataRelation("TipoDocumentoPaciente", New System.Data.DataColumn() {Me.tableTiposDocumento.TDOC_KeyColumn}, New System.Data.DataColumn() {Me.tablePacientes.TDOC_KeyColumn}, false)
        Me.Relations.Add(Me.relationTipoDocumentoPaciente)
        Me.relationPacientesPacientexPlan = New System.Data.DataRelation("PacientesPacientexPlan", New System.Data.DataColumn() {Me.tablePacientes.Pac_keyColumn}, New System.Data.DataColumn() {Me.tablePacientexPlan.PacxP_KeyColumn}, false)
        Me.Relations.Add(Me.relationPacientesPacientexPlan)
        Me.relationPlanesPacientexPlan = New System.Data.DataRelation("PlanesPacientexPlan", New System.Data.DataColumn() {Me.tablePlanes.Plan_KeyColumn, Me.tablePlanes.OS_KeyColumn}, New System.Data.DataColumn() {Me.tablePacientexPlan.Plan_KeyColumn, Me.tablePacientexPlan.OS_KeyColumn}, false)
        Me.Relations.Add(Me.relationPlanesPacientexPlan)
        Me.relationObrasSocialesPlanes = New System.Data.DataRelation("ObrasSocialesPlanes", New System.Data.DataColumn() {Me.tableObrasSociales.OS_KeyColumn}, New System.Data.DataColumn() {Me.tablePlanes.OS_KeyColumn}, false)
        Me.Relations.Add(Me.relationObrasSocialesPlanes)
        Me.relationPlanesPracticaMedicaxObraSocial = New System.Data.DataRelation("PlanesPracticaMedicaxObraSocial", New System.Data.DataColumn() {Me.tablePlanes.Plan_KeyColumn, Me.tablePlanes.OS_KeyColumn}, New System.Data.DataColumn() {Me.tablePracticaMedicaxPlan.Plan_KeyColumn, Me.tablePracticaMedicaxPlan.OS_KeyColumn}, false)
        Me.Relations.Add(Me.relationPlanesPracticaMedicaxObraSocial)
        Me.relationPracticasMedicasPracticaMedicaxObraSocial = New System.Data.DataRelation("PracticasMedicasPracticaMedicaxObraSocial", New System.Data.DataColumn() {Me.tablePracticasMedicas.PM_KeyColumn}, New System.Data.DataColumn() {Me.tablePracticaMedicaxPlan.PMxP_KeyColumn}, false)
        Me.Relations.Add(Me.relationPracticasMedicasPracticaMedicaxObraSocial)
        Me.relationSYS_ROLESSYS_Usuarios = New System.Data.DataRelation("SYS_ROLESSYS_Usuarios", New System.Data.DataColumn() {Me.tableSYS_ROLES.SYS_ROLE_KEYColumn}, New System.Data.DataColumn() {Me.tableSYS_Usuarios.SYS_ROLE_KEYColumn}, false)
        Me.Relations.Add(Me.relationSYS_ROLESSYS_Usuarios)
        Me.relationTiposDocumentoSYS_Usuarios = New System.Data.DataRelation("TiposDocumentoSYS_Usuarios", New System.Data.DataColumn() {Me.tableTiposDocumento.TDOC_KeyColumn}, New System.Data.DataColumn() {Me.tableSYS_Usuarios.TDOC_KeyColumn}, false)
        Me.Relations.Add(Me.relationTiposDocumentoSYS_Usuarios)
        Me.relationMedicosTurnos = New System.Data.DataRelation("MedicosTurnos", New System.Data.DataColumn() {Me.tableMedicos.Med_keyColumn}, New System.Data.DataColumn() {Me.tableTurnos.Med_KeyColumn}, false)
        Me.Relations.Add(Me.relationMedicosTurnos)
        Me.relationMotivo_VisitaTurnos = New System.Data.DataRelation("Motivo VisitaTurnos", New System.Data.DataColumn() {Me.tableMotivoVisita.MOVI_KeyColumn}, New System.Data.DataColumn() {Me.tableTurnos.MOVI_KeyColumn}, false)
        Me.Relations.Add(Me.relationMotivo_VisitaTurnos)
        Me.relationPacientesTurnos = New System.Data.DataRelation("PacientesTurnos", New System.Data.DataColumn() {Me.tablePacientes.Pac_keyColumn}, New System.Data.DataColumn() {Me.tableTurnos.Pac_KeyColumn}, false)
        Me.Relations.Add(Me.relationPacientesTurnos)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeConsultorios() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDetalleHistoriaClinica() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeDisponibilidadHoraria() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEspecialidades() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFacturas() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeLocalidades() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMedicos() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMotivoVisita() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeObrasSociales() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePacientes() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePacientexPlan() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePlanes() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePracticaMedicaxPlan() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializePracticasMedicas() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeProvincias() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYS_ROLES() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeSYS_Usuarios() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTiposDocumento() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTurnos() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Base2006DataSet3 = New Base2006DataSet3
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function
    
    Public Delegate Sub ConsultoriosRowChangeEventHandler(ByVal sender As Object, ByVal e As ConsultoriosRowChangeEvent)
    
    Public Delegate Sub DetalleHistoriaClinicaRowChangeEventHandler(ByVal sender As Object, ByVal e As DetalleHistoriaClinicaRowChangeEvent)
    
    Public Delegate Sub DisponibilidadHorariaRowChangeEventHandler(ByVal sender As Object, ByVal e As DisponibilidadHorariaRowChangeEvent)
    
    Public Delegate Sub EspecialidadesRowChangeEventHandler(ByVal sender As Object, ByVal e As EspecialidadesRowChangeEvent)
    
    Public Delegate Sub FacturasRowChangeEventHandler(ByVal sender As Object, ByVal e As FacturasRowChangeEvent)
    
    Public Delegate Sub LocalidadesRowChangeEventHandler(ByVal sender As Object, ByVal e As LocalidadesRowChangeEvent)
    
    Public Delegate Sub MedicosRowChangeEventHandler(ByVal sender As Object, ByVal e As MedicosRowChangeEvent)
    
    Public Delegate Sub MotivoVisitaRowChangeEventHandler(ByVal sender As Object, ByVal e As MotivoVisitaRowChangeEvent)
    
    Public Delegate Sub ObrasSocialesRowChangeEventHandler(ByVal sender As Object, ByVal e As ObrasSocialesRowChangeEvent)
    
    Public Delegate Sub PacientesRowChangeEventHandler(ByVal sender As Object, ByVal e As PacientesRowChangeEvent)
    
    Public Delegate Sub PacientexPlanRowChangeEventHandler(ByVal sender As Object, ByVal e As PacientexPlanRowChangeEvent)
    
    Public Delegate Sub PlanesRowChangeEventHandler(ByVal sender As Object, ByVal e As PlanesRowChangeEvent)
    
    Public Delegate Sub PracticaMedicaxPlanRowChangeEventHandler(ByVal sender As Object, ByVal e As PracticaMedicaxPlanRowChangeEvent)
    
    Public Delegate Sub PracticasMedicasRowChangeEventHandler(ByVal sender As Object, ByVal e As PracticasMedicasRowChangeEvent)
    
    Public Delegate Sub ProvinciasRowChangeEventHandler(ByVal sender As Object, ByVal e As ProvinciasRowChangeEvent)
    
    Public Delegate Sub SYS_ROLESRowChangeEventHandler(ByVal sender As Object, ByVal e As SYS_ROLESRowChangeEvent)
    
    Public Delegate Sub SYS_UsuariosRowChangeEventHandler(ByVal sender As Object, ByVal e As SYS_UsuariosRowChangeEvent)
    
    Public Delegate Sub TiposDocumentoRowChangeEventHandler(ByVal sender As Object, ByVal e As TiposDocumentoRowChangeEvent)
    
    Public Delegate Sub TurnosRowChangeEventHandler(ByVal sender As Object, ByVal e As TurnosRowChangeEvent)
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ConsultoriosDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnCons_key As System.Data.DataColumn
        
        Private columnCons_Ubicacion As System.Data.DataColumn
        
        Private columnCons_Descripcion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Consultorios"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cons_keyColumn() As System.Data.DataColumn
            Get
                Return Me.columnCons_key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cons_UbicacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnCons_Ubicacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cons_DescripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columnCons_Descripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ConsultoriosRow
            Get
                Return CType(Me.Rows(index),ConsultoriosRow)
            End Get
        End Property
        
        Public Event ConsultoriosRowChanging As ConsultoriosRowChangeEventHandler
        
        Public Event ConsultoriosRowChanged As ConsultoriosRowChangeEventHandler
        
        Public Event ConsultoriosRowDeleting As ConsultoriosRowChangeEventHandler
        
        Public Event ConsultoriosRowDeleted As ConsultoriosRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddConsultoriosRow(ByVal row As ConsultoriosRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddConsultoriosRow(ByVal Cons_key As Integer, ByVal Cons_Ubicacion As String, ByVal Cons_Descripcion As String) As ConsultoriosRow
            Dim rowConsultoriosRow As ConsultoriosRow = CType(Me.NewRow,ConsultoriosRow)
            rowConsultoriosRow.ItemArray = New Object() {Cons_key, Cons_Ubicacion, Cons_Descripcion}
            Me.Rows.Add(rowConsultoriosRow)
            Return rowConsultoriosRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCons_key(ByVal Cons_key As Integer) As ConsultoriosRow
            Return CType(Me.Rows.Find(New Object() {Cons_key}),ConsultoriosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ConsultoriosDataTable = CType(MyBase.Clone,ConsultoriosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ConsultoriosDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCons_key = MyBase.Columns("Cons_key")
            Me.columnCons_Ubicacion = MyBase.Columns("Cons_Ubicacion")
            Me.columnCons_Descripcion = MyBase.Columns("Cons_Descripcion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCons_key = New System.Data.DataColumn("Cons_key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCons_key)
            Me.columnCons_Ubicacion = New System.Data.DataColumn("Cons_Ubicacion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCons_Ubicacion)
            Me.columnCons_Descripcion = New System.Data.DataColumn("Cons_Descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCons_Descripcion)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCons_key}, true))
            Me.columnCons_key.AllowDBNull = false
            Me.columnCons_key.Unique = true
            Me.columnCons_Ubicacion.MaxLength = 20
            Me.columnCons_Descripcion.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewConsultoriosRow() As ConsultoriosRow
            Return CType(Me.NewRow,ConsultoriosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ConsultoriosRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ConsultoriosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ConsultoriosRowChangedEvent) Is Nothing) Then
                RaiseEvent ConsultoriosRowChanged(Me, New ConsultoriosRowChangeEvent(CType(e.Row,ConsultoriosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ConsultoriosRowChangingEvent) Is Nothing) Then
                RaiseEvent ConsultoriosRowChanging(Me, New ConsultoriosRowChangeEvent(CType(e.Row,ConsultoriosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ConsultoriosRowDeletedEvent) Is Nothing) Then
                RaiseEvent ConsultoriosRowDeleted(Me, New ConsultoriosRowChangeEvent(CType(e.Row,ConsultoriosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ConsultoriosRowDeletingEvent) Is Nothing) Then
                RaiseEvent ConsultoriosRowDeleting(Me, New ConsultoriosRowChangeEvent(CType(e.Row,ConsultoriosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveConsultoriosRow(ByVal row As ConsultoriosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ConsultoriosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DetalleHistoriaClinicaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDeta_Key As System.Data.DataColumn
        
        Private columnPac_key As System.Data.DataColumn
        
        Private columnDeta_FechaConsulta As System.Data.DataColumn
        
        Private columnDeta_Especialidad As System.Data.DataColumn
        
        Private columnDeta_NombresMedico As System.Data.DataColumn
        
        Private columnDeta_ApellidosMedico As System.Data.DataColumn
        
        Private columnDeta_Descripcion As System.Data.DataColumn
        
        Private columnDeta_Observacion As System.Data.DataColumn
        
        Private columnDeta_Diagnostico As System.Data.DataColumn
        
        Private columnDeta_Medicacion As System.Data.DataColumn
        
        Private columnDeta_Tratamiento As System.Data.DataColumn
        
        Private columnDeta_DuracionTratamiento As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DetalleHistoriaClinica"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Deta_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnDeta_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_keyColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Deta_FechaConsultaColumn() As System.Data.DataColumn
            Get
                Return Me.columnDeta_FechaConsulta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Deta_EspecialidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnDeta_Especialidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Deta_NombresMedicoColumn() As System.Data.DataColumn
            Get
                Return Me.columnDeta_NombresMedico
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Deta_ApellidosMedicoColumn() As System.Data.DataColumn
            Get
                Return Me.columnDeta_ApellidosMedico
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Deta_DescripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDeta_Descripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Deta_ObservacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDeta_Observacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Deta_DiagnosticoColumn() As System.Data.DataColumn
            Get
                Return Me.columnDeta_Diagnostico
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Deta_MedicacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDeta_Medicacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Deta_TratamientoColumn() As System.Data.DataColumn
            Get
                Return Me.columnDeta_Tratamiento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Deta_DuracionTratamientoColumn() As System.Data.DataColumn
            Get
                Return Me.columnDeta_DuracionTratamiento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DetalleHistoriaClinicaRow
            Get
                Return CType(Me.Rows(index),DetalleHistoriaClinicaRow)
            End Get
        End Property
        
        Public Event DetalleHistoriaClinicaRowChanging As DetalleHistoriaClinicaRowChangeEventHandler
        
        Public Event DetalleHistoriaClinicaRowChanged As DetalleHistoriaClinicaRowChangeEventHandler
        
        Public Event DetalleHistoriaClinicaRowDeleting As DetalleHistoriaClinicaRowChangeEventHandler
        
        Public Event DetalleHistoriaClinicaRowDeleted As DetalleHistoriaClinicaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDetalleHistoriaClinicaRow(ByVal row As DetalleHistoriaClinicaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDetalleHistoriaClinicaRow(ByVal parentPacientesRowByPacientesDetalleHistoriaClinica As PacientesRow, ByVal Deta_FechaConsulta As Date, ByVal parentEspecialidadesRowByEspecialidadDetalleHistoriaClinica As EspecialidadesRow, ByVal Deta_NombresMedico As String, ByVal Deta_ApellidosMedico As String, ByVal Deta_Descripcion As String, ByVal Deta_Observacion As String, ByVal Deta_Diagnostico As String, ByVal Deta_Medicacion As String, ByVal Deta_Tratamiento As String, ByVal Deta_DuracionTratamiento As String) As DetalleHistoriaClinicaRow
            Dim rowDetalleHistoriaClinicaRow As DetalleHistoriaClinicaRow = CType(Me.NewRow,DetalleHistoriaClinicaRow)
            rowDetalleHistoriaClinicaRow.ItemArray = New Object() {Nothing, parentPacientesRowByPacientesDetalleHistoriaClinica(0), Deta_FechaConsulta, parentEspecialidadesRowByEspecialidadDetalleHistoriaClinica(0), Deta_NombresMedico, Deta_ApellidosMedico, Deta_Descripcion, Deta_Observacion, Deta_Diagnostico, Deta_Medicacion, Deta_Tratamiento, Deta_DuracionTratamiento}
            Me.Rows.Add(rowDetalleHistoriaClinicaRow)
            Return rowDetalleHistoriaClinicaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDeta_Key(ByVal Deta_Key As Integer) As DetalleHistoriaClinicaRow
            Return CType(Me.Rows.Find(New Object() {Deta_Key}),DetalleHistoriaClinicaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DetalleHistoriaClinicaDataTable = CType(MyBase.Clone,DetalleHistoriaClinicaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DetalleHistoriaClinicaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDeta_Key = MyBase.Columns("Deta_Key")
            Me.columnPac_key = MyBase.Columns("Pac_key")
            Me.columnDeta_FechaConsulta = MyBase.Columns("Deta_FechaConsulta")
            Me.columnDeta_Especialidad = MyBase.Columns("Deta_Especialidad")
            Me.columnDeta_NombresMedico = MyBase.Columns("Deta_NombresMedico")
            Me.columnDeta_ApellidosMedico = MyBase.Columns("Deta_ApellidosMedico")
            Me.columnDeta_Descripcion = MyBase.Columns("Deta_Descripcion")
            Me.columnDeta_Observacion = MyBase.Columns("Deta_Observacion")
            Me.columnDeta_Diagnostico = MyBase.Columns("Deta_Diagnostico")
            Me.columnDeta_Medicacion = MyBase.Columns("Deta_Medicacion")
            Me.columnDeta_Tratamiento = MyBase.Columns("Deta_Tratamiento")
            Me.columnDeta_DuracionTratamiento = MyBase.Columns("Deta_DuracionTratamiento")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDeta_Key = New System.Data.DataColumn("Deta_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeta_Key)
            Me.columnPac_key = New System.Data.DataColumn("Pac_key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_key)
            Me.columnDeta_FechaConsulta = New System.Data.DataColumn("Deta_FechaConsulta", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeta_FechaConsulta)
            Me.columnDeta_Especialidad = New System.Data.DataColumn("Deta_Especialidad", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeta_Especialidad)
            Me.columnDeta_NombresMedico = New System.Data.DataColumn("Deta_NombresMedico", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeta_NombresMedico)
            Me.columnDeta_ApellidosMedico = New System.Data.DataColumn("Deta_ApellidosMedico", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeta_ApellidosMedico)
            Me.columnDeta_Descripcion = New System.Data.DataColumn("Deta_Descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeta_Descripcion)
            Me.columnDeta_Observacion = New System.Data.DataColumn("Deta_Observacion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeta_Observacion)
            Me.columnDeta_Diagnostico = New System.Data.DataColumn("Deta_Diagnostico", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeta_Diagnostico)
            Me.columnDeta_Medicacion = New System.Data.DataColumn("Deta_Medicacion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeta_Medicacion)
            Me.columnDeta_Tratamiento = New System.Data.DataColumn("Deta_Tratamiento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeta_Tratamiento)
            Me.columnDeta_DuracionTratamiento = New System.Data.DataColumn("Deta_DuracionTratamiento", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeta_DuracionTratamiento)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnDeta_Key}, true))
            Me.columnDeta_Key.AutoIncrement = true
            Me.columnDeta_Key.AllowDBNull = false
            Me.columnDeta_Key.Unique = true
            Me.columnDeta_NombresMedico.MaxLength = 50
            Me.columnDeta_ApellidosMedico.MaxLength = 50
            Me.columnDeta_Descripcion.MaxLength = 30
            Me.columnDeta_Observacion.MaxLength = 30
            Me.columnDeta_Diagnostico.MaxLength = 30
            Me.columnDeta_Medicacion.MaxLength = 30
            Me.columnDeta_Tratamiento.MaxLength = 30
            Me.columnDeta_DuracionTratamiento.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDetalleHistoriaClinicaRow() As DetalleHistoriaClinicaRow
            Return CType(Me.NewRow,DetalleHistoriaClinicaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DetalleHistoriaClinicaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DetalleHistoriaClinicaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DetalleHistoriaClinicaRowChangedEvent) Is Nothing) Then
                RaiseEvent DetalleHistoriaClinicaRowChanged(Me, New DetalleHistoriaClinicaRowChangeEvent(CType(e.Row,DetalleHistoriaClinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DetalleHistoriaClinicaRowChangingEvent) Is Nothing) Then
                RaiseEvent DetalleHistoriaClinicaRowChanging(Me, New DetalleHistoriaClinicaRowChangeEvent(CType(e.Row,DetalleHistoriaClinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DetalleHistoriaClinicaRowDeletedEvent) Is Nothing) Then
                RaiseEvent DetalleHistoriaClinicaRowDeleted(Me, New DetalleHistoriaClinicaRowChangeEvent(CType(e.Row,DetalleHistoriaClinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DetalleHistoriaClinicaRowDeletingEvent) Is Nothing) Then
                RaiseEvent DetalleHistoriaClinicaRowDeleting(Me, New DetalleHistoriaClinicaRowChangeEvent(CType(e.Row,DetalleHistoriaClinicaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDetalleHistoriaClinicaRow(ByVal row As DetalleHistoriaClinicaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DetalleHistoriaClinicaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DisponibilidadHorariaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnDSPH_Key As System.Data.DataColumn
        
        Private columnMed_Key As System.Data.DataColumn
        
        Private columnDSPH_DiaSemana As System.Data.DataColumn
        
        Private columnDSPH_Duracion As System.Data.DataColumn
        
        Private columnDSPH_HoraInicio As System.Data.DataColumn
        
        Private columnDSPH_HoraFin As System.Data.DataColumn
        
        Private columnDSPH_FechaIni As System.Data.DataColumn
        
        Private columnDSPH_FechaFin As System.Data.DataColumn
        
        Private columnDSPH_Novedades As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "DisponibilidadHoraria"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DSPH_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnDSPH_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DSPH_DiaSemanaColumn() As System.Data.DataColumn
            Get
                Return Me.columnDSPH_DiaSemana
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DSPH_DuracionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDSPH_Duracion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DSPH_HoraInicioColumn() As System.Data.DataColumn
            Get
                Return Me.columnDSPH_HoraInicio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DSPH_HoraFinColumn() As System.Data.DataColumn
            Get
                Return Me.columnDSPH_HoraFin
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DSPH_FechaIniColumn() As System.Data.DataColumn
            Get
                Return Me.columnDSPH_FechaIni
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DSPH_FechaFinColumn() As System.Data.DataColumn
            Get
                Return Me.columnDSPH_FechaFin
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DSPH_NovedadesColumn() As System.Data.DataColumn
            Get
                Return Me.columnDSPH_Novedades
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DisponibilidadHorariaRow
            Get
                Return CType(Me.Rows(index),DisponibilidadHorariaRow)
            End Get
        End Property
        
        Public Event DisponibilidadHorariaRowChanging As DisponibilidadHorariaRowChangeEventHandler
        
        Public Event DisponibilidadHorariaRowChanged As DisponibilidadHorariaRowChangeEventHandler
        
        Public Event DisponibilidadHorariaRowDeleting As DisponibilidadHorariaRowChangeEventHandler
        
        Public Event DisponibilidadHorariaRowDeleted As DisponibilidadHorariaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDisponibilidadHorariaRow(ByVal row As DisponibilidadHorariaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDisponibilidadHorariaRow(ByVal DSPH_Key As Integer, ByVal parentMedicosRowByMedicosDisponibilidadHoraria As MedicosRow, ByVal DSPH_DiaSemana As String, ByVal DSPH_Duracion As Integer, ByVal DSPH_HoraInicio As Date, ByVal DSPH_HoraFin As Date, ByVal DSPH_FechaIni As Date, ByVal DSPH_FechaFin As Date, ByVal DSPH_Novedades As String) As DisponibilidadHorariaRow
            Dim rowDisponibilidadHorariaRow As DisponibilidadHorariaRow = CType(Me.NewRow,DisponibilidadHorariaRow)
            rowDisponibilidadHorariaRow.ItemArray = New Object() {DSPH_Key, parentMedicosRowByMedicosDisponibilidadHoraria(0), DSPH_DiaSemana, DSPH_Duracion, DSPH_HoraInicio, DSPH_HoraFin, DSPH_FechaIni, DSPH_FechaFin, DSPH_Novedades}
            Me.Rows.Add(rowDisponibilidadHorariaRow)
            Return rowDisponibilidadHorariaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDSPH_Key(ByVal DSPH_Key As Integer) As DisponibilidadHorariaRow
            Return CType(Me.Rows.Find(New Object() {DSPH_Key}),DisponibilidadHorariaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DisponibilidadHorariaDataTable = CType(MyBase.Clone,DisponibilidadHorariaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DisponibilidadHorariaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDSPH_Key = MyBase.Columns("DSPH_Key")
            Me.columnMed_Key = MyBase.Columns("Med_Key")
            Me.columnDSPH_DiaSemana = MyBase.Columns("DSPH_DiaSemana")
            Me.columnDSPH_Duracion = MyBase.Columns("DSPH_Duracion")
            Me.columnDSPH_HoraInicio = MyBase.Columns("DSPH_HoraInicio")
            Me.columnDSPH_HoraFin = MyBase.Columns("DSPH_HoraFin")
            Me.columnDSPH_FechaIni = MyBase.Columns("DSPH_FechaIni")
            Me.columnDSPH_FechaFin = MyBase.Columns("DSPH_FechaFin")
            Me.columnDSPH_Novedades = MyBase.Columns("DSPH_Novedades")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDSPH_Key = New System.Data.DataColumn("DSPH_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDSPH_Key)
            Me.columnMed_Key = New System.Data.DataColumn("Med_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_Key)
            Me.columnDSPH_DiaSemana = New System.Data.DataColumn("DSPH_DiaSemana", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDSPH_DiaSemana)
            Me.columnDSPH_Duracion = New System.Data.DataColumn("DSPH_Duracion", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDSPH_Duracion)
            Me.columnDSPH_HoraInicio = New System.Data.DataColumn("DSPH_HoraInicio", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDSPH_HoraInicio)
            Me.columnDSPH_HoraFin = New System.Data.DataColumn("DSPH_HoraFin", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDSPH_HoraFin)
            Me.columnDSPH_FechaIni = New System.Data.DataColumn("DSPH_FechaIni", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDSPH_FechaIni)
            Me.columnDSPH_FechaFin = New System.Data.DataColumn("DSPH_FechaFin", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDSPH_FechaFin)
            Me.columnDSPH_Novedades = New System.Data.DataColumn("DSPH_Novedades", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDSPH_Novedades)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnDSPH_Key}, true))
            Me.columnDSPH_Key.AllowDBNull = false
            Me.columnDSPH_Key.Unique = true
            Me.columnDSPH_DiaSemana.MaxLength = 50
            Me.columnDSPH_Novedades.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDisponibilidadHorariaRow() As DisponibilidadHorariaRow
            Return CType(Me.NewRow,DisponibilidadHorariaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DisponibilidadHorariaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DisponibilidadHorariaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DisponibilidadHorariaRowChangedEvent) Is Nothing) Then
                RaiseEvent DisponibilidadHorariaRowChanged(Me, New DisponibilidadHorariaRowChangeEvent(CType(e.Row,DisponibilidadHorariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DisponibilidadHorariaRowChangingEvent) Is Nothing) Then
                RaiseEvent DisponibilidadHorariaRowChanging(Me, New DisponibilidadHorariaRowChangeEvent(CType(e.Row,DisponibilidadHorariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DisponibilidadHorariaRowDeletedEvent) Is Nothing) Then
                RaiseEvent DisponibilidadHorariaRowDeleted(Me, New DisponibilidadHorariaRowChangeEvent(CType(e.Row,DisponibilidadHorariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DisponibilidadHorariaRowDeletingEvent) Is Nothing) Then
                RaiseEvent DisponibilidadHorariaRowDeleting(Me, New DisponibilidadHorariaRowChangeEvent(CType(e.Row,DisponibilidadHorariaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDisponibilidadHorariaRow(ByVal row As DisponibilidadHorariaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DisponibilidadHorariaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EspecialidadesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnEspe_Especialidad As System.Data.DataColumn
        
        Private columnEspe_Descripcion As System.Data.DataColumn
        
        Private columnCons_key As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Especialidades"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Espe_EspecialidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnEspe_Especialidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Espe_DescripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columnEspe_Descripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Cons_keyColumn() As System.Data.DataColumn
            Get
                Return Me.columnCons_key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EspecialidadesRow
            Get
                Return CType(Me.Rows(index),EspecialidadesRow)
            End Get
        End Property
        
        Public Event EspecialidadesRowChanging As EspecialidadesRowChangeEventHandler
        
        Public Event EspecialidadesRowChanged As EspecialidadesRowChangeEventHandler
        
        Public Event EspecialidadesRowDeleting As EspecialidadesRowChangeEventHandler
        
        Public Event EspecialidadesRowDeleted As EspecialidadesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEspecialidadesRow(ByVal row As EspecialidadesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEspecialidadesRow(ByVal Espe_Especialidad As Integer, ByVal Espe_Descripcion As String, ByVal parentConsultoriosRowByConsultorioEspecialidad As ConsultoriosRow) As EspecialidadesRow
            Dim rowEspecialidadesRow As EspecialidadesRow = CType(Me.NewRow,EspecialidadesRow)
            rowEspecialidadesRow.ItemArray = New Object() {Espe_Especialidad, Espe_Descripcion, parentConsultoriosRowByConsultorioEspecialidad(0)}
            Me.Rows.Add(rowEspecialidadesRow)
            Return rowEspecialidadesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByEspe_Especialidad(ByVal Espe_Especialidad As Integer) As EspecialidadesRow
            Return CType(Me.Rows.Find(New Object() {Espe_Especialidad}),EspecialidadesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As EspecialidadesDataTable = CType(MyBase.Clone,EspecialidadesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New EspecialidadesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnEspe_Especialidad = MyBase.Columns("Espe_Especialidad")
            Me.columnEspe_Descripcion = MyBase.Columns("Espe_Descripcion")
            Me.columnCons_key = MyBase.Columns("Cons_key")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnEspe_Especialidad = New System.Data.DataColumn("Espe_Especialidad", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEspe_Especialidad)
            Me.columnEspe_Descripcion = New System.Data.DataColumn("Espe_Descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEspe_Descripcion)
            Me.columnCons_key = New System.Data.DataColumn("Cons_key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCons_key)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnEspe_Especialidad}, true))
            Me.columnEspe_Especialidad.AllowDBNull = false
            Me.columnEspe_Especialidad.Unique = true
            Me.columnEspe_Descripcion.MaxLength = 30
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEspecialidadesRow() As EspecialidadesRow
            Return CType(Me.NewRow,EspecialidadesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New EspecialidadesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(EspecialidadesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EspecialidadesRowChangedEvent) Is Nothing) Then
                RaiseEvent EspecialidadesRowChanged(Me, New EspecialidadesRowChangeEvent(CType(e.Row,EspecialidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EspecialidadesRowChangingEvent) Is Nothing) Then
                RaiseEvent EspecialidadesRowChanging(Me, New EspecialidadesRowChangeEvent(CType(e.Row,EspecialidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EspecialidadesRowDeletedEvent) Is Nothing) Then
                RaiseEvent EspecialidadesRowDeleted(Me, New EspecialidadesRowChangeEvent(CType(e.Row,EspecialidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EspecialidadesRowDeletingEvent) Is Nothing) Then
                RaiseEvent EspecialidadesRowDeleting(Me, New EspecialidadesRowChangeEvent(CType(e.Row,EspecialidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEspecialidadesRow(ByVal row As EspecialidadesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EspecialidadesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FacturasDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnFact_Key As System.Data.DataColumn
        
        Private columnPac_Key As System.Data.DataColumn
        
        Private columnFact_FechaFactura As System.Data.DataColumn
        
        Private columnFact_Tipo As System.Data.DataColumn
        
        Private columnFact_Monto As System.Data.DataColumn
        
        Private columnFact_TipoDoc As System.Data.DataColumn
        
        Private columnFact_NumeroDoc As System.Data.DataColumn
        
        Private columnFact_Cantidad As System.Data.DataColumn
        
        Private columnPM_Key As System.Data.DataColumn
        
        Private columnFact_Observacion As System.Data.DataColumn
        
        Private columnFact_FechaAlta As System.Data.DataColumn
        
        Private columnFact_FechaCancelacion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Facturas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fact_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnFact_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fact_FechaFacturaColumn() As System.Data.DataColumn
            Get
                Return Me.columnFact_FechaFactura
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fact_TipoColumn() As System.Data.DataColumn
            Get
                Return Me.columnFact_Tipo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fact_MontoColumn() As System.Data.DataColumn
            Get
                Return Me.columnFact_Monto
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fact_TipoDocColumn() As System.Data.DataColumn
            Get
                Return Me.columnFact_TipoDoc
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fact_NumeroDocColumn() As System.Data.DataColumn
            Get
                Return Me.columnFact_NumeroDoc
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fact_CantidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnFact_Cantidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PM_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnPM_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fact_ObservacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnFact_Observacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fact_FechaAltaColumn() As System.Data.DataColumn
            Get
                Return Me.columnFact_FechaAlta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Fact_FechaCancelacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnFact_FechaCancelacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FacturasRow
            Get
                Return CType(Me.Rows(index),FacturasRow)
            End Get
        End Property
        
        Public Event FacturasRowChanging As FacturasRowChangeEventHandler
        
        Public Event FacturasRowChanged As FacturasRowChangeEventHandler
        
        Public Event FacturasRowDeleting As FacturasRowChangeEventHandler
        
        Public Event FacturasRowDeleted As FacturasRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFacturasRow(ByVal row As FacturasRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFacturasRow(ByVal Fact_Key As Integer, ByVal parentPacientesRowByPacientesFacturas As PacientesRow, ByVal Fact_FechaFactura As Date, ByVal Fact_Tipo As String, ByVal Fact_Monto As Double, ByVal Fact_TipoDoc As Integer, ByVal Fact_NumeroDoc As String, ByVal Fact_Cantidad As Integer, ByVal parentPracticasMedicasRowByPracticasMedicasFacturas As PracticasMedicasRow, ByVal Fact_Observacion As String, ByVal Fact_FechaAlta As Date, ByVal Fact_FechaCancelacion As Date) As FacturasRow
            Dim rowFacturasRow As FacturasRow = CType(Me.NewRow,FacturasRow)
            rowFacturasRow.ItemArray = New Object() {Fact_Key, parentPacientesRowByPacientesFacturas(0), Fact_FechaFactura, Fact_Tipo, Fact_Monto, Fact_TipoDoc, Fact_NumeroDoc, Fact_Cantidad, parentPracticasMedicasRowByPracticasMedicasFacturas(0), Fact_Observacion, Fact_FechaAlta, Fact_FechaCancelacion}
            Me.Rows.Add(rowFacturasRow)
            Return rowFacturasRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFact_Key(ByVal Fact_Key As Integer) As FacturasRow
            Return CType(Me.Rows.Find(New Object() {Fact_Key}),FacturasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FacturasDataTable = CType(MyBase.Clone,FacturasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FacturasDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFact_Key = MyBase.Columns("Fact_Key")
            Me.columnPac_Key = MyBase.Columns("Pac_Key")
            Me.columnFact_FechaFactura = MyBase.Columns("Fact_FechaFactura")
            Me.columnFact_Tipo = MyBase.Columns("Fact_Tipo")
            Me.columnFact_Monto = MyBase.Columns("Fact_Monto")
            Me.columnFact_TipoDoc = MyBase.Columns("Fact_TipoDoc")
            Me.columnFact_NumeroDoc = MyBase.Columns("Fact_NumeroDoc")
            Me.columnFact_Cantidad = MyBase.Columns("Fact_Cantidad")
            Me.columnPM_Key = MyBase.Columns("PM_Key")
            Me.columnFact_Observacion = MyBase.Columns("Fact_Observacion")
            Me.columnFact_FechaAlta = MyBase.Columns("Fact_FechaAlta")
            Me.columnFact_FechaCancelacion = MyBase.Columns("Fact_FechaCancelacion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFact_Key = New System.Data.DataColumn("Fact_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFact_Key)
            Me.columnPac_Key = New System.Data.DataColumn("Pac_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_Key)
            Me.columnFact_FechaFactura = New System.Data.DataColumn("Fact_FechaFactura", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFact_FechaFactura)
            Me.columnFact_Tipo = New System.Data.DataColumn("Fact_Tipo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFact_Tipo)
            Me.columnFact_Monto = New System.Data.DataColumn("Fact_Monto", GetType(Double), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFact_Monto)
            Me.columnFact_TipoDoc = New System.Data.DataColumn("Fact_TipoDoc", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFact_TipoDoc)
            Me.columnFact_NumeroDoc = New System.Data.DataColumn("Fact_NumeroDoc", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFact_NumeroDoc)
            Me.columnFact_Cantidad = New System.Data.DataColumn("Fact_Cantidad", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFact_Cantidad)
            Me.columnPM_Key = New System.Data.DataColumn("PM_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPM_Key)
            Me.columnFact_Observacion = New System.Data.DataColumn("Fact_Observacion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFact_Observacion)
            Me.columnFact_FechaAlta = New System.Data.DataColumn("Fact_FechaAlta", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFact_FechaAlta)
            Me.columnFact_FechaCancelacion = New System.Data.DataColumn("Fact_FechaCancelacion", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFact_FechaCancelacion)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFact_Key}, true))
            Me.columnFact_Key.AllowDBNull = false
            Me.columnFact_Key.Unique = true
            Me.columnFact_Tipo.MaxLength = 1
            Me.columnFact_NumeroDoc.MaxLength = 8
            Me.columnFact_Observacion.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFacturasRow() As FacturasRow
            Return CType(Me.NewRow,FacturasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FacturasRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FacturasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FacturasRowChangedEvent) Is Nothing) Then
                RaiseEvent FacturasRowChanged(Me, New FacturasRowChangeEvent(CType(e.Row,FacturasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FacturasRowChangingEvent) Is Nothing) Then
                RaiseEvent FacturasRowChanging(Me, New FacturasRowChangeEvent(CType(e.Row,FacturasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FacturasRowDeletedEvent) Is Nothing) Then
                RaiseEvent FacturasRowDeleted(Me, New FacturasRowChangeEvent(CType(e.Row,FacturasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FacturasRowDeletingEvent) Is Nothing) Then
                RaiseEvent FacturasRowDeleting(Me, New FacturasRowChangeEvent(CType(e.Row,FacturasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFacturasRow(ByVal row As FacturasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FacturasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class LocalidadesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnLOCA_Key As System.Data.DataColumn
        
        Private columnPROV_Key As System.Data.DataColumn
        
        Private columnLOCA_Nombre As System.Data.DataColumn
        
        Private columnLOCA_Codpos As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Localidades"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOCA_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnLOCA_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROV_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnPROV_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOCA_NombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnLOCA_Nombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOCA_CodposColumn() As System.Data.DataColumn
            Get
                Return Me.columnLOCA_Codpos
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As LocalidadesRow
            Get
                Return CType(Me.Rows(index),LocalidadesRow)
            End Get
        End Property
        
        Public Event LocalidadesRowChanging As LocalidadesRowChangeEventHandler
        
        Public Event LocalidadesRowChanged As LocalidadesRowChangeEventHandler
        
        Public Event LocalidadesRowDeleting As LocalidadesRowChangeEventHandler
        
        Public Event LocalidadesRowDeleted As LocalidadesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddLocalidadesRow(ByVal row As LocalidadesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddLocalidadesRow(ByVal parentMedicosRowByMedicosLocalidades As MedicosRow, ByVal parentProvinciasRowByProvinciasLocalidades As ProvinciasRow, ByVal LOCA_Nombre As String, ByVal LOCA_Codpos As String) As LocalidadesRow
            Dim rowLocalidadesRow As LocalidadesRow = CType(Me.NewRow,LocalidadesRow)
            rowLocalidadesRow.ItemArray = New Object() {parentMedicosRowByMedicosLocalidades(0), parentProvinciasRowByProvinciasLocalidades(0), LOCA_Nombre, LOCA_Codpos}
            Me.Rows.Add(rowLocalidadesRow)
            Return rowLocalidadesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLOCA_KeyPROV_Key(ByVal LOCA_Key As Integer, ByVal PROV_Key As Integer) As LocalidadesRow
            Return CType(Me.Rows.Find(New Object() {LOCA_Key, PROV_Key}),LocalidadesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As LocalidadesDataTable = CType(MyBase.Clone,LocalidadesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New LocalidadesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLOCA_Key = MyBase.Columns("LOCA_Key")
            Me.columnPROV_Key = MyBase.Columns("PROV_Key")
            Me.columnLOCA_Nombre = MyBase.Columns("LOCA_Nombre")
            Me.columnLOCA_Codpos = MyBase.Columns("LOCA_Codpos")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLOCA_Key = New System.Data.DataColumn("LOCA_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOCA_Key)
            Me.columnPROV_Key = New System.Data.DataColumn("PROV_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROV_Key)
            Me.columnLOCA_Nombre = New System.Data.DataColumn("LOCA_Nombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOCA_Nombre)
            Me.columnLOCA_Codpos = New System.Data.DataColumn("LOCA_Codpos", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOCA_Codpos)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnLOCA_Key, Me.columnPROV_Key}, true))
            Me.columnLOCA_Key.AllowDBNull = false
            Me.columnPROV_Key.AllowDBNull = false
            Me.columnLOCA_Nombre.MaxLength = 255
            Me.columnLOCA_Codpos.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewLocalidadesRow() As LocalidadesRow
            Return CType(Me.NewRow,LocalidadesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New LocalidadesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LocalidadesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LocalidadesRowChangedEvent) Is Nothing) Then
                RaiseEvent LocalidadesRowChanged(Me, New LocalidadesRowChangeEvent(CType(e.Row,LocalidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LocalidadesRowChangingEvent) Is Nothing) Then
                RaiseEvent LocalidadesRowChanging(Me, New LocalidadesRowChangeEvent(CType(e.Row,LocalidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LocalidadesRowDeletedEvent) Is Nothing) Then
                RaiseEvent LocalidadesRowDeleted(Me, New LocalidadesRowChangeEvent(CType(e.Row,LocalidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LocalidadesRowDeletingEvent) Is Nothing) Then
                RaiseEvent LocalidadesRowDeleting(Me, New LocalidadesRowChangeEvent(CType(e.Row,LocalidadesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveLocalidadesRow(ByVal row As LocalidadesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LocalidadesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MedicosDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMed_key As System.Data.DataColumn
        
        Private columnTDOC_Key As System.Data.DataColumn
        
        Private columnMed_NumeroDoc As System.Data.DataColumn
        
        Private columnMed_Nombres As System.Data.DataColumn
        
        Private columnMed_Apellidos As System.Data.DataColumn
        
        Private columnMed_Calle As System.Data.DataColumn
        
        Private columnMed_NumeroExt As System.Data.DataColumn
        
        Private columnMed_NumeroInt As System.Data.DataColumn
        
        Private columnLOCA_Key As System.Data.DataColumn
        
        Private columnMed_Especialidad As System.Data.DataColumn
        
        Private columnMed_Matricula As System.Data.DataColumn
        
        Private columnMed_FechaNacimiento As System.Data.DataColumn
        
        Private columnMed_Telefonos As System.Data.DataColumn
        
        Private columnMed_Celular As System.Data.DataColumn
        
        Private columnMed_Email As System.Data.DataColumn
        
        Private columnMed_EstadoCivil As System.Data.DataColumn
        
        Private columnMed_Sexo As System.Data.DataColumn
        
        Private columnMed_FechaIngreso As System.Data.DataColumn
        
        Private columnMed_Matricula1 As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Medicos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_keyColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDOC_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnTDOC_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_NumeroDocColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_NumeroDoc
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_NombresColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_Nombres
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_ApellidosColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_Apellidos
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_CalleColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_Calle
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_NumeroExtColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_NumeroExt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_NumeroIntColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_NumeroInt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOCA_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnLOCA_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_EspecialidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_Especialidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_MatriculaColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_Matricula
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_FechaNacimientoColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_FechaNacimiento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_TelefonosColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_Telefonos
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_CelularColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_Celular
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_EmailColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_Email
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_EstadoCivilColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_EstadoCivil
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_SexoColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_Sexo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_FechaIngresoColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_FechaIngreso
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_Matricula1Column() As System.Data.DataColumn
            Get
                Return Me.columnMed_Matricula1
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MedicosRow
            Get
                Return CType(Me.Rows(index),MedicosRow)
            End Get
        End Property
        
        Public Event MedicosRowChanging As MedicosRowChangeEventHandler
        
        Public Event MedicosRowChanged As MedicosRowChangeEventHandler
        
        Public Event MedicosRowDeleting As MedicosRowChangeEventHandler
        
        Public Event MedicosRowDeleted As MedicosRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMedicosRow(ByVal row As MedicosRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMedicosRow( _
                    ByVal Med_key As Integer,  _
                    ByVal parentTiposDocumentoRowByTipoDocumentoMedico As TiposDocumentoRow,  _
                    ByVal Med_NumeroDoc As String,  _
                    ByVal Med_Nombres As String,  _
                    ByVal Med_Apellidos As String,  _
                    ByVal Med_Calle As String,  _
                    ByVal Med_NumeroExt As String,  _
                    ByVal Med_NumeroInt As String,  _
                    ByVal LOCA_Key As Integer,  _
                    ByVal parentEspecialidadesRowByEspecialidadMedico As EspecialidadesRow,  _
                    ByVal Med_Matricula As String,  _
                    ByVal Med_FechaNacimiento As Date,  _
                    ByVal Med_Telefonos As String,  _
                    ByVal Med_Celular As String,  _
                    ByVal Med_Email As String,  _
                    ByVal Med_EstadoCivil As String,  _
                    ByVal Med_Sexo As String,  _
                    ByVal Med_FechaIngreso As String,  _
                    ByVal Med_Matricula1 As Integer) As MedicosRow
            Dim rowMedicosRow As MedicosRow = CType(Me.NewRow,MedicosRow)
            rowMedicosRow.ItemArray = New Object() {Med_key, parentTiposDocumentoRowByTipoDocumentoMedico(0), Med_NumeroDoc, Med_Nombres, Med_Apellidos, Med_Calle, Med_NumeroExt, Med_NumeroInt, LOCA_Key, parentEspecialidadesRowByEspecialidadMedico(0), Med_Matricula, Med_FechaNacimiento, Med_Telefonos, Med_Celular, Med_Email, Med_EstadoCivil, Med_Sexo, Med_FechaIngreso, Med_Matricula1}
            Me.Rows.Add(rowMedicosRow)
            Return rowMedicosRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMed_key(ByVal Med_key As Integer) As MedicosRow
            Return CType(Me.Rows.Find(New Object() {Med_key}),MedicosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As MedicosDataTable = CType(MyBase.Clone,MedicosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New MedicosDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMed_key = MyBase.Columns("Med_key")
            Me.columnTDOC_Key = MyBase.Columns("TDOC_Key")
            Me.columnMed_NumeroDoc = MyBase.Columns("Med_NumeroDoc")
            Me.columnMed_Nombres = MyBase.Columns("Med_Nombres")
            Me.columnMed_Apellidos = MyBase.Columns("Med_Apellidos")
            Me.columnMed_Calle = MyBase.Columns("Med_Calle")
            Me.columnMed_NumeroExt = MyBase.Columns("Med_NumeroExt")
            Me.columnMed_NumeroInt = MyBase.Columns("Med_NumeroInt")
            Me.columnLOCA_Key = MyBase.Columns("LOCA_Key")
            Me.columnMed_Especialidad = MyBase.Columns("Med_Especialidad")
            Me.columnMed_Matricula = MyBase.Columns("Med_Matricula")
            Me.columnMed_FechaNacimiento = MyBase.Columns("Med_FechaNacimiento")
            Me.columnMed_Telefonos = MyBase.Columns("Med_Telefonos")
            Me.columnMed_Celular = MyBase.Columns("Med_Celular")
            Me.columnMed_Email = MyBase.Columns("Med_Email")
            Me.columnMed_EstadoCivil = MyBase.Columns("Med_EstadoCivil")
            Me.columnMed_Sexo = MyBase.Columns("Med_Sexo")
            Me.columnMed_FechaIngreso = MyBase.Columns("Med_FechaIngreso")
            Me.columnMed_Matricula1 = MyBase.Columns("Med_Matricula1")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMed_key = New System.Data.DataColumn("Med_key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_key)
            Me.columnTDOC_Key = New System.Data.DataColumn("TDOC_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDOC_Key)
            Me.columnMed_NumeroDoc = New System.Data.DataColumn("Med_NumeroDoc", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_NumeroDoc)
            Me.columnMed_Nombres = New System.Data.DataColumn("Med_Nombres", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_Nombres)
            Me.columnMed_Apellidos = New System.Data.DataColumn("Med_Apellidos", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_Apellidos)
            Me.columnMed_Calle = New System.Data.DataColumn("Med_Calle", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_Calle)
            Me.columnMed_NumeroExt = New System.Data.DataColumn("Med_NumeroExt", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_NumeroExt)
            Me.columnMed_NumeroInt = New System.Data.DataColumn("Med_NumeroInt", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_NumeroInt)
            Me.columnLOCA_Key = New System.Data.DataColumn("LOCA_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOCA_Key)
            Me.columnMed_Especialidad = New System.Data.DataColumn("Med_Especialidad", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_Especialidad)
            Me.columnMed_Matricula = New System.Data.DataColumn("Med_Matricula", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_Matricula)
            Me.columnMed_FechaNacimiento = New System.Data.DataColumn("Med_FechaNacimiento", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_FechaNacimiento)
            Me.columnMed_Telefonos = New System.Data.DataColumn("Med_Telefonos", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_Telefonos)
            Me.columnMed_Celular = New System.Data.DataColumn("Med_Celular", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_Celular)
            Me.columnMed_Email = New System.Data.DataColumn("Med_Email", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_Email)
            Me.columnMed_EstadoCivil = New System.Data.DataColumn("Med_EstadoCivil", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_EstadoCivil)
            Me.columnMed_Sexo = New System.Data.DataColumn("Med_Sexo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_Sexo)
            Me.columnMed_FechaIngreso = New System.Data.DataColumn("Med_FechaIngreso", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_FechaIngreso)
            Me.columnMed_Matricula1 = New System.Data.DataColumn("Med_Matricula1", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_Matricula1)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnMed_key}, true))
            Me.columnMed_key.AllowDBNull = false
            Me.columnMed_key.Unique = true
            Me.columnMed_NumeroDoc.MaxLength = 8
            Me.columnMed_Nombres.MaxLength = 20
            Me.columnMed_Apellidos.MaxLength = 20
            Me.columnMed_Calle.MaxLength = 50
            Me.columnMed_NumeroExt.MaxLength = 50
            Me.columnMed_NumeroInt.MaxLength = 50
            Me.columnMed_Matricula.MaxLength = 50
            Me.columnMed_Telefonos.MaxLength = 20
            Me.columnMed_Celular.MaxLength = 50
            Me.columnMed_Email.MaxLength = 30
            Me.columnMed_EstadoCivil.MaxLength = 50
            Me.columnMed_Sexo.MaxLength = 50
            Me.columnMed_FechaIngreso.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMedicosRow() As MedicosRow
            Return CType(Me.NewRow,MedicosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New MedicosRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MedicosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MedicosRowChangedEvent) Is Nothing) Then
                RaiseEvent MedicosRowChanged(Me, New MedicosRowChangeEvent(CType(e.Row,MedicosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MedicosRowChangingEvent) Is Nothing) Then
                RaiseEvent MedicosRowChanging(Me, New MedicosRowChangeEvent(CType(e.Row,MedicosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MedicosRowDeletedEvent) Is Nothing) Then
                RaiseEvent MedicosRowDeleted(Me, New MedicosRowChangeEvent(CType(e.Row,MedicosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MedicosRowDeletingEvent) Is Nothing) Then
                RaiseEvent MedicosRowDeleting(Me, New MedicosRowChangeEvent(CType(e.Row,MedicosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMedicosRow(ByVal row As MedicosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MedicosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MotivoVisitaDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnMOVI_Key As System.Data.DataColumn
        
        Private columnMOVI_Motivo As System.Data.DataColumn
        
        Private columnMOVI_Descripcion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MotivoVisita"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MOVI_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnMOVI_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MOVI_MotivoColumn() As System.Data.DataColumn
            Get
                Return Me.columnMOVI_Motivo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MOVI_DescripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columnMOVI_Descripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MotivoVisitaRow
            Get
                Return CType(Me.Rows(index),MotivoVisitaRow)
            End Get
        End Property
        
        Public Event MotivoVisitaRowChanging As MotivoVisitaRowChangeEventHandler
        
        Public Event MotivoVisitaRowChanged As MotivoVisitaRowChangeEventHandler
        
        Public Event MotivoVisitaRowDeleting As MotivoVisitaRowChangeEventHandler
        
        Public Event MotivoVisitaRowDeleted As MotivoVisitaRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMotivoVisitaRow(ByVal row As MotivoVisitaRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMotivoVisitaRow(ByVal MOVI_Key As Integer, ByVal MOVI_Motivo As String, ByVal MOVI_Descripcion As String) As MotivoVisitaRow
            Dim rowMotivoVisitaRow As MotivoVisitaRow = CType(Me.NewRow,MotivoVisitaRow)
            rowMotivoVisitaRow.ItemArray = New Object() {MOVI_Key, MOVI_Motivo, MOVI_Descripcion}
            Me.Rows.Add(rowMotivoVisitaRow)
            Return rowMotivoVisitaRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMOVI_Key(ByVal MOVI_Key As Integer) As MotivoVisitaRow
            Return CType(Me.Rows.Find(New Object() {MOVI_Key}),MotivoVisitaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As MotivoVisitaDataTable = CType(MyBase.Clone,MotivoVisitaDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New MotivoVisitaDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMOVI_Key = MyBase.Columns("MOVI_Key")
            Me.columnMOVI_Motivo = MyBase.Columns("MOVI_Motivo")
            Me.columnMOVI_Descripcion = MyBase.Columns("MOVI_Descripcion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMOVI_Key = New System.Data.DataColumn("MOVI_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOVI_Key)
            Me.columnMOVI_Motivo = New System.Data.DataColumn("MOVI_Motivo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOVI_Motivo)
            Me.columnMOVI_Descripcion = New System.Data.DataColumn("MOVI_Descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOVI_Descripcion)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnMOVI_Key}, true))
            Me.columnMOVI_Key.AllowDBNull = false
            Me.columnMOVI_Key.Unique = true
            Me.columnMOVI_Motivo.MaxLength = 50
            Me.columnMOVI_Descripcion.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMotivoVisitaRow() As MotivoVisitaRow
            Return CType(Me.NewRow,MotivoVisitaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New MotivoVisitaRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MotivoVisitaRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MotivoVisitaRowChangedEvent) Is Nothing) Then
                RaiseEvent MotivoVisitaRowChanged(Me, New MotivoVisitaRowChangeEvent(CType(e.Row,MotivoVisitaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MotivoVisitaRowChangingEvent) Is Nothing) Then
                RaiseEvent MotivoVisitaRowChanging(Me, New MotivoVisitaRowChangeEvent(CType(e.Row,MotivoVisitaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MotivoVisitaRowDeletedEvent) Is Nothing) Then
                RaiseEvent MotivoVisitaRowDeleted(Me, New MotivoVisitaRowChangeEvent(CType(e.Row,MotivoVisitaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MotivoVisitaRowDeletingEvent) Is Nothing) Then
                RaiseEvent MotivoVisitaRowDeleting(Me, New MotivoVisitaRowChangeEvent(CType(e.Row,MotivoVisitaRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMotivoVisitaRow(ByVal row As MotivoVisitaRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MotivoVisitaDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ObrasSocialesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnOS_Key As System.Data.DataColumn
        
        Private columnOS_Nombre As System.Data.DataColumn
        
        Private columnOS_Descripcion As System.Data.DataColumn
        
        Private columnOS_Calle As System.Data.DataColumn
        
        Private columnOS_NumeroExt As System.Data.DataColumn
        
        Private columnOS_NumeroInt As System.Data.DataColumn
        
        Private columnLOCA_Key As System.Data.DataColumn
        
        Private columnOS_Telefonos As System.Data.DataColumn
        
        Private columnOS_FechaFinConvenio As System.Data.DataColumn
        
        Private columnOS_FechaAlta As System.Data.DataColumn
        
        Private columnOS_FechaCancelacion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ObrasSociales"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OS_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnOS_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OS_NombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnOS_Nombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OS_DescripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columnOS_Descripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OS_CalleColumn() As System.Data.DataColumn
            Get
                Return Me.columnOS_Calle
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OS_NumeroExtColumn() As System.Data.DataColumn
            Get
                Return Me.columnOS_NumeroExt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OS_NumeroIntColumn() As System.Data.DataColumn
            Get
                Return Me.columnOS_NumeroInt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOCA_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnLOCA_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OS_TelefonosColumn() As System.Data.DataColumn
            Get
                Return Me.columnOS_Telefonos
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OS_FechaFinConvenioColumn() As System.Data.DataColumn
            Get
                Return Me.columnOS_FechaFinConvenio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OS_FechaAltaColumn() As System.Data.DataColumn
            Get
                Return Me.columnOS_FechaAlta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OS_FechaCancelacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnOS_FechaCancelacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ObrasSocialesRow
            Get
                Return CType(Me.Rows(index),ObrasSocialesRow)
            End Get
        End Property
        
        Public Event ObrasSocialesRowChanging As ObrasSocialesRowChangeEventHandler
        
        Public Event ObrasSocialesRowChanged As ObrasSocialesRowChangeEventHandler
        
        Public Event ObrasSocialesRowDeleting As ObrasSocialesRowChangeEventHandler
        
        Public Event ObrasSocialesRowDeleted As ObrasSocialesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddObrasSocialesRow(ByVal row As ObrasSocialesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddObrasSocialesRow(ByVal OS_Key As Integer, ByVal OS_Nombre As String, ByVal OS_Descripcion As String, ByVal OS_Calle As String, ByVal OS_NumeroExt As String, ByVal OS_NumeroInt As String, ByVal LOCA_Key As Integer, ByVal OS_Telefonos As String, ByVal OS_FechaFinConvenio As Date, ByVal OS_FechaAlta As Date, ByVal OS_FechaCancelacion As Date) As ObrasSocialesRow
            Dim rowObrasSocialesRow As ObrasSocialesRow = CType(Me.NewRow,ObrasSocialesRow)
            rowObrasSocialesRow.ItemArray = New Object() {OS_Key, OS_Nombre, OS_Descripcion, OS_Calle, OS_NumeroExt, OS_NumeroInt, LOCA_Key, OS_Telefonos, OS_FechaFinConvenio, OS_FechaAlta, OS_FechaCancelacion}
            Me.Rows.Add(rowObrasSocialesRow)
            Return rowObrasSocialesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByOS_Key(ByVal OS_Key As Integer) As ObrasSocialesRow
            Return CType(Me.Rows.Find(New Object() {OS_Key}),ObrasSocialesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ObrasSocialesDataTable = CType(MyBase.Clone,ObrasSocialesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ObrasSocialesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnOS_Key = MyBase.Columns("OS_Key")
            Me.columnOS_Nombre = MyBase.Columns("OS_Nombre")
            Me.columnOS_Descripcion = MyBase.Columns("OS_Descripcion")
            Me.columnOS_Calle = MyBase.Columns("OS_Calle")
            Me.columnOS_NumeroExt = MyBase.Columns("OS_NumeroExt")
            Me.columnOS_NumeroInt = MyBase.Columns("OS_NumeroInt")
            Me.columnLOCA_Key = MyBase.Columns("LOCA_Key")
            Me.columnOS_Telefonos = MyBase.Columns("OS_Telefonos")
            Me.columnOS_FechaFinConvenio = MyBase.Columns("OS_FechaFinConvenio")
            Me.columnOS_FechaAlta = MyBase.Columns("OS_FechaAlta")
            Me.columnOS_FechaCancelacion = MyBase.Columns("OS_FechaCancelacion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnOS_Key = New System.Data.DataColumn("OS_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOS_Key)
            Me.columnOS_Nombre = New System.Data.DataColumn("OS_Nombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOS_Nombre)
            Me.columnOS_Descripcion = New System.Data.DataColumn("OS_Descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOS_Descripcion)
            Me.columnOS_Calle = New System.Data.DataColumn("OS_Calle", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOS_Calle)
            Me.columnOS_NumeroExt = New System.Data.DataColumn("OS_NumeroExt", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOS_NumeroExt)
            Me.columnOS_NumeroInt = New System.Data.DataColumn("OS_NumeroInt", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOS_NumeroInt)
            Me.columnLOCA_Key = New System.Data.DataColumn("LOCA_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOCA_Key)
            Me.columnOS_Telefonos = New System.Data.DataColumn("OS_Telefonos", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOS_Telefonos)
            Me.columnOS_FechaFinConvenio = New System.Data.DataColumn("OS_FechaFinConvenio", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOS_FechaFinConvenio)
            Me.columnOS_FechaAlta = New System.Data.DataColumn("OS_FechaAlta", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOS_FechaAlta)
            Me.columnOS_FechaCancelacion = New System.Data.DataColumn("OS_FechaCancelacion", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOS_FechaCancelacion)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnOS_Key}, true))
            Me.columnOS_Key.AllowDBNull = false
            Me.columnOS_Key.Unique = true
            Me.columnOS_Nombre.MaxLength = 20
            Me.columnOS_Descripcion.MaxLength = 50
            Me.columnOS_Calle.MaxLength = 30
            Me.columnOS_NumeroExt.MaxLength = 50
            Me.columnOS_NumeroInt.MaxLength = 50
            Me.columnOS_Telefonos.MaxLength = 10
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewObrasSocialesRow() As ObrasSocialesRow
            Return CType(Me.NewRow,ObrasSocialesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ObrasSocialesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ObrasSocialesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ObrasSocialesRowChangedEvent) Is Nothing) Then
                RaiseEvent ObrasSocialesRowChanged(Me, New ObrasSocialesRowChangeEvent(CType(e.Row,ObrasSocialesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ObrasSocialesRowChangingEvent) Is Nothing) Then
                RaiseEvent ObrasSocialesRowChanging(Me, New ObrasSocialesRowChangeEvent(CType(e.Row,ObrasSocialesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ObrasSocialesRowDeletedEvent) Is Nothing) Then
                RaiseEvent ObrasSocialesRowDeleted(Me, New ObrasSocialesRowChangeEvent(CType(e.Row,ObrasSocialesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ObrasSocialesRowDeletingEvent) Is Nothing) Then
                RaiseEvent ObrasSocialesRowDeleting(Me, New ObrasSocialesRowChangeEvent(CType(e.Row,ObrasSocialesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveObrasSocialesRow(ByVal row As ObrasSocialesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ObrasSocialesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PacientesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPac_key As System.Data.DataColumn
        
        Private columnTDOC_Key As System.Data.DataColumn
        
        Private columnPac_NumeroDoc As System.Data.DataColumn
        
        Private columnPac_Nombres As System.Data.DataColumn
        
        Private columnPac_Apellidos As System.Data.DataColumn
        
        Private columnPac_Calle As System.Data.DataColumn
        
        Private columnPac_NumeroExt As System.Data.DataColumn
        
        Private columnPac_NumeroInt As System.Data.DataColumn
        
        Private columnLOCA_Key As System.Data.DataColumn
        
        Private columnPac_Telefonos As System.Data.DataColumn
        
        Private columnPac_Celular As System.Data.DataColumn
        
        Private columnPac_Email As System.Data.DataColumn
        
        Private columnPac_FechaNacimiento As System.Data.DataColumn
        
        Private columnPac_FechaAlta As System.Data.DataColumn
        
        Private columnPac_FechaCancelacion As System.Data.DataColumn
        
        Private columnPac_EstadoCivil As System.Data.DataColumn
        
        Private columnPac_Sexo As System.Data.DataColumn
        
        Private columnPac_Ocupacion As System.Data.DataColumn
        
        Private columnPac_Nacionalidad As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Pacientes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_keyColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDOC_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnTDOC_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_NumeroDocColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_NumeroDoc
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_NombresColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_Nombres
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_ApellidosColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_Apellidos
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_CalleColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_Calle
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_NumeroExtColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_NumeroExt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_NumeroIntColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_NumeroInt
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LOCA_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnLOCA_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_TelefonosColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_Telefonos
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_CelularColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_Celular
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_EmailColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_Email
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_FechaNacimientoColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_FechaNacimiento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_FechaAltaColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_FechaAlta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_FechaCancelacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_FechaCancelacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_EstadoCivilColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_EstadoCivil
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_SexoColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_Sexo
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_OcupacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_Ocupacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_NacionalidadColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_Nacionalidad
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PacientesRow
            Get
                Return CType(Me.Rows(index),PacientesRow)
            End Get
        End Property
        
        Public Event PacientesRowChanging As PacientesRowChangeEventHandler
        
        Public Event PacientesRowChanged As PacientesRowChangeEventHandler
        
        Public Event PacientesRowDeleting As PacientesRowChangeEventHandler
        
        Public Event PacientesRowDeleted As PacientesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPacientesRow(ByVal row As PacientesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPacientesRow( _
                    ByVal parentTiposDocumentoRowByTipoDocumentoPaciente As TiposDocumentoRow,  _
                    ByVal Pac_NumeroDoc As String,  _
                    ByVal Pac_Nombres As String,  _
                    ByVal Pac_Apellidos As String,  _
                    ByVal Pac_Calle As String,  _
                    ByVal Pac_NumeroExt As String,  _
                    ByVal Pac_NumeroInt As String,  _
                    ByVal LOCA_Key As Integer,  _
                    ByVal Pac_Telefonos As String,  _
                    ByVal Pac_Celular As String,  _
                    ByVal Pac_Email As String,  _
                    ByVal Pac_FechaNacimiento As Date,  _
                    ByVal Pac_FechaAlta As Date,  _
                    ByVal Pac_FechaCancelacion As Date,  _
                    ByVal Pac_EstadoCivil As String,  _
                    ByVal Pac_Sexo As String,  _
                    ByVal Pac_Ocupacion As String,  _
                    ByVal Pac_Nacionalidad As String) As PacientesRow
            Dim rowPacientesRow As PacientesRow = CType(Me.NewRow,PacientesRow)
            rowPacientesRow.ItemArray = New Object() {Nothing, parentTiposDocumentoRowByTipoDocumentoPaciente(0), Pac_NumeroDoc, Pac_Nombres, Pac_Apellidos, Pac_Calle, Pac_NumeroExt, Pac_NumeroInt, LOCA_Key, Pac_Telefonos, Pac_Celular, Pac_Email, Pac_FechaNacimiento, Pac_FechaAlta, Pac_FechaCancelacion, Pac_EstadoCivil, Pac_Sexo, Pac_Ocupacion, Pac_Nacionalidad}
            Me.Rows.Add(rowPacientesRow)
            Return rowPacientesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPac_key(ByVal Pac_key As Integer) As PacientesRow
            Return CType(Me.Rows.Find(New Object() {Pac_key}),PacientesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PacientesDataTable = CType(MyBase.Clone,PacientesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PacientesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPac_key = MyBase.Columns("Pac_key")
            Me.columnTDOC_Key = MyBase.Columns("TDOC_Key")
            Me.columnPac_NumeroDoc = MyBase.Columns("Pac_NumeroDoc")
            Me.columnPac_Nombres = MyBase.Columns("Pac_Nombres")
            Me.columnPac_Apellidos = MyBase.Columns("Pac_Apellidos")
            Me.columnPac_Calle = MyBase.Columns("Pac_Calle")
            Me.columnPac_NumeroExt = MyBase.Columns("Pac_NumeroExt")
            Me.columnPac_NumeroInt = MyBase.Columns("Pac_NumeroInt")
            Me.columnLOCA_Key = MyBase.Columns("LOCA_Key")
            Me.columnPac_Telefonos = MyBase.Columns("Pac_Telefonos")
            Me.columnPac_Celular = MyBase.Columns("Pac_Celular")
            Me.columnPac_Email = MyBase.Columns("Pac_Email")
            Me.columnPac_FechaNacimiento = MyBase.Columns("Pac_FechaNacimiento")
            Me.columnPac_FechaAlta = MyBase.Columns("Pac_FechaAlta")
            Me.columnPac_FechaCancelacion = MyBase.Columns("Pac_FechaCancelacion")
            Me.columnPac_EstadoCivil = MyBase.Columns("Pac_EstadoCivil")
            Me.columnPac_Sexo = MyBase.Columns("Pac_Sexo")
            Me.columnPac_Ocupacion = MyBase.Columns("Pac_Ocupacion")
            Me.columnPac_Nacionalidad = MyBase.Columns("Pac_Nacionalidad")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPac_key = New System.Data.DataColumn("Pac_key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_key)
            Me.columnTDOC_Key = New System.Data.DataColumn("TDOC_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDOC_Key)
            Me.columnPac_NumeroDoc = New System.Data.DataColumn("Pac_NumeroDoc", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_NumeroDoc)
            Me.columnPac_Nombres = New System.Data.DataColumn("Pac_Nombres", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_Nombres)
            Me.columnPac_Apellidos = New System.Data.DataColumn("Pac_Apellidos", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_Apellidos)
            Me.columnPac_Calle = New System.Data.DataColumn("Pac_Calle", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_Calle)
            Me.columnPac_NumeroExt = New System.Data.DataColumn("Pac_NumeroExt", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_NumeroExt)
            Me.columnPac_NumeroInt = New System.Data.DataColumn("Pac_NumeroInt", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_NumeroInt)
            Me.columnLOCA_Key = New System.Data.DataColumn("LOCA_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLOCA_Key)
            Me.columnPac_Telefonos = New System.Data.DataColumn("Pac_Telefonos", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_Telefonos)
            Me.columnPac_Celular = New System.Data.DataColumn("Pac_Celular", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_Celular)
            Me.columnPac_Email = New System.Data.DataColumn("Pac_Email", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_Email)
            Me.columnPac_FechaNacimiento = New System.Data.DataColumn("Pac_FechaNacimiento", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_FechaNacimiento)
            Me.columnPac_FechaAlta = New System.Data.DataColumn("Pac_FechaAlta", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_FechaAlta)
            Me.columnPac_FechaCancelacion = New System.Data.DataColumn("Pac_FechaCancelacion", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_FechaCancelacion)
            Me.columnPac_EstadoCivil = New System.Data.DataColumn("Pac_EstadoCivil", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_EstadoCivil)
            Me.columnPac_Sexo = New System.Data.DataColumn("Pac_Sexo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_Sexo)
            Me.columnPac_Ocupacion = New System.Data.DataColumn("Pac_Ocupacion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_Ocupacion)
            Me.columnPac_Nacionalidad = New System.Data.DataColumn("Pac_Nacionalidad", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_Nacionalidad)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPac_key}, true))
            Me.columnPac_key.AutoIncrement = true
            Me.columnPac_key.AllowDBNull = false
            Me.columnPac_key.Unique = true
            Me.columnPac_NumeroDoc.MaxLength = 8
            Me.columnPac_Nombres.MaxLength = 20
            Me.columnPac_Apellidos.MaxLength = 20
            Me.columnPac_Calle.MaxLength = 30
            Me.columnPac_NumeroExt.MaxLength = 50
            Me.columnPac_NumeroInt.MaxLength = 50
            Me.columnPac_Telefonos.MaxLength = 20
            Me.columnPac_Celular.MaxLength = 50
            Me.columnPac_Email.MaxLength = 20
            Me.columnPac_EstadoCivil.MaxLength = 50
            Me.columnPac_Sexo.MaxLength = 50
            Me.columnPac_Ocupacion.MaxLength = 50
            Me.columnPac_Nacionalidad.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPacientesRow() As PacientesRow
            Return CType(Me.NewRow,PacientesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PacientesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PacientesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PacientesRowChangedEvent) Is Nothing) Then
                RaiseEvent PacientesRowChanged(Me, New PacientesRowChangeEvent(CType(e.Row,PacientesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PacientesRowChangingEvent) Is Nothing) Then
                RaiseEvent PacientesRowChanging(Me, New PacientesRowChangeEvent(CType(e.Row,PacientesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PacientesRowDeletedEvent) Is Nothing) Then
                RaiseEvent PacientesRowDeleted(Me, New PacientesRowChangeEvent(CType(e.Row,PacientesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PacientesRowDeletingEvent) Is Nothing) Then
                RaiseEvent PacientesRowDeleting(Me, New PacientesRowChangeEvent(CType(e.Row,PacientesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePacientesRow(ByVal row As PacientesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PacientesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PacientexPlanDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPacxP_Key As System.Data.DataColumn
        
        Private columnPlan_Key As System.Data.DataColumn
        
        Private columnOS_Key As System.Data.DataColumn
        
        Private columnPacxP_FechaInicio As System.Data.DataColumn
        
        Private columnPacxP_FechaFin As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PacientexPlan"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PacxP_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnPacxP_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Plan_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlan_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OS_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnOS_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PacxP_FechaInicioColumn() As System.Data.DataColumn
            Get
                Return Me.columnPacxP_FechaInicio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PacxP_FechaFinColumn() As System.Data.DataColumn
            Get
                Return Me.columnPacxP_FechaFin
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PacientexPlanRow
            Get
                Return CType(Me.Rows(index),PacientexPlanRow)
            End Get
        End Property
        
        Public Event PacientexPlanRowChanging As PacientexPlanRowChangeEventHandler
        
        Public Event PacientexPlanRowChanged As PacientexPlanRowChangeEventHandler
        
        Public Event PacientexPlanRowDeleting As PacientexPlanRowChangeEventHandler
        
        Public Event PacientexPlanRowDeleted As PacientexPlanRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPacientexPlanRow(ByVal row As PacientexPlanRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPacientexPlanRow(ByVal parentPacientesRowByPacientesPacientexPlan As PacientesRow, ByVal Plan_Key As Integer, ByVal OS_Key As Integer, ByVal PacxP_FechaInicio As Date, ByVal PacxP_FechaFin As Date) As PacientexPlanRow
            Dim rowPacientexPlanRow As PacientexPlanRow = CType(Me.NewRow,PacientexPlanRow)
            rowPacientexPlanRow.ItemArray = New Object() {parentPacientesRowByPacientesPacientexPlan(0), Plan_Key, OS_Key, PacxP_FechaInicio, PacxP_FechaFin}
            Me.Rows.Add(rowPacientexPlanRow)
            Return rowPacientexPlanRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPacxP_KeyPlan_KeyOS_Key(ByVal PacxP_Key As Integer, ByVal Plan_Key As Integer, ByVal OS_Key As Integer) As PacientexPlanRow
            Return CType(Me.Rows.Find(New Object() {PacxP_Key, Plan_Key, OS_Key}),PacientexPlanRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PacientexPlanDataTable = CType(MyBase.Clone,PacientexPlanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PacientexPlanDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPacxP_Key = MyBase.Columns("PacxP_Key")
            Me.columnPlan_Key = MyBase.Columns("Plan_Key")
            Me.columnOS_Key = MyBase.Columns("OS_Key")
            Me.columnPacxP_FechaInicio = MyBase.Columns("PacxP_FechaInicio")
            Me.columnPacxP_FechaFin = MyBase.Columns("PacxP_FechaFin")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPacxP_Key = New System.Data.DataColumn("PacxP_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPacxP_Key)
            Me.columnPlan_Key = New System.Data.DataColumn("Plan_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlan_Key)
            Me.columnOS_Key = New System.Data.DataColumn("OS_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOS_Key)
            Me.columnPacxP_FechaInicio = New System.Data.DataColumn("PacxP_FechaInicio", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPacxP_FechaInicio)
            Me.columnPacxP_FechaFin = New System.Data.DataColumn("PacxP_FechaFin", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPacxP_FechaFin)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPacxP_Key, Me.columnPlan_Key, Me.columnOS_Key}, true))
            Me.columnPacxP_Key.AllowDBNull = false
            Me.columnPlan_Key.AllowDBNull = false
            Me.columnOS_Key.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPacientexPlanRow() As PacientexPlanRow
            Return CType(Me.NewRow,PacientexPlanRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PacientexPlanRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PacientexPlanRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PacientexPlanRowChangedEvent) Is Nothing) Then
                RaiseEvent PacientexPlanRowChanged(Me, New PacientexPlanRowChangeEvent(CType(e.Row,PacientexPlanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PacientexPlanRowChangingEvent) Is Nothing) Then
                RaiseEvent PacientexPlanRowChanging(Me, New PacientexPlanRowChangeEvent(CType(e.Row,PacientexPlanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PacientexPlanRowDeletedEvent) Is Nothing) Then
                RaiseEvent PacientexPlanRowDeleted(Me, New PacientexPlanRowChangeEvent(CType(e.Row,PacientexPlanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PacientexPlanRowDeletingEvent) Is Nothing) Then
                RaiseEvent PacientexPlanRowDeleting(Me, New PacientexPlanRowChangeEvent(CType(e.Row,PacientexPlanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePacientexPlanRow(ByVal row As PacientexPlanRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PacientexPlanDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PlanesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPlan_Key As System.Data.DataColumn
        
        Private columnOS_Key As System.Data.DataColumn
        
        Private columnPlan_Nombre As System.Data.DataColumn
        
        Private columnPlan_Descripcion As System.Data.DataColumn
        
        Private columnPlan_FechaFinConvenio As System.Data.DataColumn
        
        Private columnPlan_FechaAlta As System.Data.DataColumn
        
        Private columnPlan_FechaCancelacion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Planes"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Plan_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlan_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OS_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnOS_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Plan_NombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlan_Nombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Plan_DescripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlan_Descripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Plan_FechaFinConvenioColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlan_FechaFinConvenio
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Plan_FechaAltaColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlan_FechaAlta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Plan_FechaCancelacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlan_FechaCancelacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PlanesRow
            Get
                Return CType(Me.Rows(index),PlanesRow)
            End Get
        End Property
        
        Public Event PlanesRowChanging As PlanesRowChangeEventHandler
        
        Public Event PlanesRowChanged As PlanesRowChangeEventHandler
        
        Public Event PlanesRowDeleting As PlanesRowChangeEventHandler
        
        Public Event PlanesRowDeleted As PlanesRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPlanesRow(ByVal row As PlanesRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPlanesRow(ByVal Plan_Key As Integer, ByVal parentObrasSocialesRowByObrasSocialesPlanes As ObrasSocialesRow, ByVal Plan_Nombre As String, ByVal Plan_Descripcion As String, ByVal Plan_FechaFinConvenio As Date, ByVal Plan_FechaAlta As Date, ByVal Plan_FechaCancelacion As Date) As PlanesRow
            Dim rowPlanesRow As PlanesRow = CType(Me.NewRow,PlanesRow)
            rowPlanesRow.ItemArray = New Object() {Plan_Key, parentObrasSocialesRowByObrasSocialesPlanes(0), Plan_Nombre, Plan_Descripcion, Plan_FechaFinConvenio, Plan_FechaAlta, Plan_FechaCancelacion}
            Me.Rows.Add(rowPlanesRow)
            Return rowPlanesRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPlan_KeyOS_Key(ByVal Plan_Key As Integer, ByVal OS_Key As Integer) As PlanesRow
            Return CType(Me.Rows.Find(New Object() {Plan_Key, OS_Key}),PlanesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PlanesDataTable = CType(MyBase.Clone,PlanesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PlanesDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPlan_Key = MyBase.Columns("Plan_Key")
            Me.columnOS_Key = MyBase.Columns("OS_Key")
            Me.columnPlan_Nombre = MyBase.Columns("Plan_Nombre")
            Me.columnPlan_Descripcion = MyBase.Columns("Plan_Descripcion")
            Me.columnPlan_FechaFinConvenio = MyBase.Columns("Plan_FechaFinConvenio")
            Me.columnPlan_FechaAlta = MyBase.Columns("Plan_FechaAlta")
            Me.columnPlan_FechaCancelacion = MyBase.Columns("Plan_FechaCancelacion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPlan_Key = New System.Data.DataColumn("Plan_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlan_Key)
            Me.columnOS_Key = New System.Data.DataColumn("OS_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOS_Key)
            Me.columnPlan_Nombre = New System.Data.DataColumn("Plan_Nombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlan_Nombre)
            Me.columnPlan_Descripcion = New System.Data.DataColumn("Plan_Descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlan_Descripcion)
            Me.columnPlan_FechaFinConvenio = New System.Data.DataColumn("Plan_FechaFinConvenio", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlan_FechaFinConvenio)
            Me.columnPlan_FechaAlta = New System.Data.DataColumn("Plan_FechaAlta", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlan_FechaAlta)
            Me.columnPlan_FechaCancelacion = New System.Data.DataColumn("Plan_FechaCancelacion", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlan_FechaCancelacion)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPlan_Key, Me.columnOS_Key}, true))
            Me.columnPlan_Key.AllowDBNull = false
            Me.columnOS_Key.AllowDBNull = false
            Me.columnPlan_Nombre.MaxLength = 50
            Me.columnPlan_Descripcion.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPlanesRow() As PlanesRow
            Return CType(Me.NewRow,PlanesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PlanesRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PlanesRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PlanesRowChangedEvent) Is Nothing) Then
                RaiseEvent PlanesRowChanged(Me, New PlanesRowChangeEvent(CType(e.Row,PlanesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PlanesRowChangingEvent) Is Nothing) Then
                RaiseEvent PlanesRowChanging(Me, New PlanesRowChangeEvent(CType(e.Row,PlanesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PlanesRowDeletedEvent) Is Nothing) Then
                RaiseEvent PlanesRowDeleted(Me, New PlanesRowChangeEvent(CType(e.Row,PlanesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PlanesRowDeletingEvent) Is Nothing) Then
                RaiseEvent PlanesRowDeleting(Me, New PlanesRowChangeEvent(CType(e.Row,PlanesRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePlanesRow(ByVal row As PlanesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PlanesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PracticaMedicaxPlanDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPMxP_Key As System.Data.DataColumn
        
        Private columnPlan_Key As System.Data.DataColumn
        
        Private columnOS_Key As System.Data.DataColumn
        
        Private columnPMxP_PorcentajeDescuento As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PracticaMedicaxPlan"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PMxP_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnPMxP_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Plan_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlan_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OS_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnOS_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PMxP_PorcentajeDescuentoColumn() As System.Data.DataColumn
            Get
                Return Me.columnPMxP_PorcentajeDescuento
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PracticaMedicaxPlanRow
            Get
                Return CType(Me.Rows(index),PracticaMedicaxPlanRow)
            End Get
        End Property
        
        Public Event PracticaMedicaxPlanRowChanging As PracticaMedicaxPlanRowChangeEventHandler
        
        Public Event PracticaMedicaxPlanRowChanged As PracticaMedicaxPlanRowChangeEventHandler
        
        Public Event PracticaMedicaxPlanRowDeleting As PracticaMedicaxPlanRowChangeEventHandler
        
        Public Event PracticaMedicaxPlanRowDeleted As PracticaMedicaxPlanRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPracticaMedicaxPlanRow(ByVal row As PracticaMedicaxPlanRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPracticaMedicaxPlanRow(ByVal parentPracticasMedicasRowByPracticasMedicasPracticaMedicaxObraSocial As PracticasMedicasRow, ByVal Plan_Key As Integer, ByVal OS_Key As Integer, ByVal PMxP_PorcentajeDescuento As Single) As PracticaMedicaxPlanRow
            Dim rowPracticaMedicaxPlanRow As PracticaMedicaxPlanRow = CType(Me.NewRow,PracticaMedicaxPlanRow)
            rowPracticaMedicaxPlanRow.ItemArray = New Object() {parentPracticasMedicasRowByPracticasMedicasPracticaMedicaxObraSocial(0), Plan_Key, OS_Key, PMxP_PorcentajeDescuento}
            Me.Rows.Add(rowPracticaMedicaxPlanRow)
            Return rowPracticaMedicaxPlanRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPMxP_KeyPlan_KeyOS_Key(ByVal PMxP_Key As Integer, ByVal Plan_Key As Integer, ByVal OS_Key As Integer) As PracticaMedicaxPlanRow
            Return CType(Me.Rows.Find(New Object() {PMxP_Key, Plan_Key, OS_Key}),PracticaMedicaxPlanRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PracticaMedicaxPlanDataTable = CType(MyBase.Clone,PracticaMedicaxPlanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PracticaMedicaxPlanDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPMxP_Key = MyBase.Columns("PMxP_Key")
            Me.columnPlan_Key = MyBase.Columns("Plan_Key")
            Me.columnOS_Key = MyBase.Columns("OS_Key")
            Me.columnPMxP_PorcentajeDescuento = MyBase.Columns("PMxP_PorcentajeDescuento")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPMxP_Key = New System.Data.DataColumn("PMxP_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPMxP_Key)
            Me.columnPlan_Key = New System.Data.DataColumn("Plan_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlan_Key)
            Me.columnOS_Key = New System.Data.DataColumn("OS_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOS_Key)
            Me.columnPMxP_PorcentajeDescuento = New System.Data.DataColumn("PMxP_PorcentajeDescuento", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPMxP_PorcentajeDescuento)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPMxP_Key, Me.columnPlan_Key, Me.columnOS_Key}, true))
            Me.columnPMxP_Key.AllowDBNull = false
            Me.columnPlan_Key.AllowDBNull = false
            Me.columnOS_Key.AllowDBNull = false
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPracticaMedicaxPlanRow() As PracticaMedicaxPlanRow
            Return CType(Me.NewRow,PracticaMedicaxPlanRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PracticaMedicaxPlanRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PracticaMedicaxPlanRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PracticaMedicaxPlanRowChangedEvent) Is Nothing) Then
                RaiseEvent PracticaMedicaxPlanRowChanged(Me, New PracticaMedicaxPlanRowChangeEvent(CType(e.Row,PracticaMedicaxPlanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PracticaMedicaxPlanRowChangingEvent) Is Nothing) Then
                RaiseEvent PracticaMedicaxPlanRowChanging(Me, New PracticaMedicaxPlanRowChangeEvent(CType(e.Row,PracticaMedicaxPlanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PracticaMedicaxPlanRowDeletedEvent) Is Nothing) Then
                RaiseEvent PracticaMedicaxPlanRowDeleted(Me, New PracticaMedicaxPlanRowChangeEvent(CType(e.Row,PracticaMedicaxPlanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PracticaMedicaxPlanRowDeletingEvent) Is Nothing) Then
                RaiseEvent PracticaMedicaxPlanRowDeleting(Me, New PracticaMedicaxPlanRowChangeEvent(CType(e.Row,PracticaMedicaxPlanRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePracticaMedicaxPlanRow(ByVal row As PracticaMedicaxPlanRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PracticaMedicaxPlanDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class PracticasMedicasDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPM_Key As System.Data.DataColumn
        
        Private columnPM_Descripcion As System.Data.DataColumn
        
        Private columnPM_PrecioUnitario As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "PracticasMedicas"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PM_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnPM_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PM_DescripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columnPM_Descripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PM_PrecioUnitarioColumn() As System.Data.DataColumn
            Get
                Return Me.columnPM_PrecioUnitario
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As PracticasMedicasRow
            Get
                Return CType(Me.Rows(index),PracticasMedicasRow)
            End Get
        End Property
        
        Public Event PracticasMedicasRowChanging As PracticasMedicasRowChangeEventHandler
        
        Public Event PracticasMedicasRowChanged As PracticasMedicasRowChangeEventHandler
        
        Public Event PracticasMedicasRowDeleting As PracticasMedicasRowChangeEventHandler
        
        Public Event PracticasMedicasRowDeleted As PracticasMedicasRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddPracticasMedicasRow(ByVal row As PracticasMedicasRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddPracticasMedicasRow(ByVal PM_Key As Integer, ByVal PM_Descripcion As String, ByVal PM_PrecioUnitario As Decimal) As PracticasMedicasRow
            Dim rowPracticasMedicasRow As PracticasMedicasRow = CType(Me.NewRow,PracticasMedicasRow)
            rowPracticasMedicasRow.ItemArray = New Object() {PM_Key, PM_Descripcion, PM_PrecioUnitario}
            Me.Rows.Add(rowPracticasMedicasRow)
            Return rowPracticasMedicasRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPM_Key(ByVal PM_Key As Integer) As PracticasMedicasRow
            Return CType(Me.Rows.Find(New Object() {PM_Key}),PracticasMedicasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PracticasMedicasDataTable = CType(MyBase.Clone,PracticasMedicasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PracticasMedicasDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPM_Key = MyBase.Columns("PM_Key")
            Me.columnPM_Descripcion = MyBase.Columns("PM_Descripcion")
            Me.columnPM_PrecioUnitario = MyBase.Columns("PM_PrecioUnitario")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPM_Key = New System.Data.DataColumn("PM_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPM_Key)
            Me.columnPM_Descripcion = New System.Data.DataColumn("PM_Descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPM_Descripcion)
            Me.columnPM_PrecioUnitario = New System.Data.DataColumn("PM_PrecioUnitario", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPM_PrecioUnitario)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPM_Key}, true))
            Me.columnPM_Key.AllowDBNull = false
            Me.columnPM_Key.Unique = true
            Me.columnPM_Descripcion.MaxLength = 30
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewPracticasMedicasRow() As PracticasMedicasRow
            Return CType(Me.NewRow,PracticasMedicasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PracticasMedicasRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PracticasMedicasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PracticasMedicasRowChangedEvent) Is Nothing) Then
                RaiseEvent PracticasMedicasRowChanged(Me, New PracticasMedicasRowChangeEvent(CType(e.Row,PracticasMedicasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PracticasMedicasRowChangingEvent) Is Nothing) Then
                RaiseEvent PracticasMedicasRowChanging(Me, New PracticasMedicasRowChangeEvent(CType(e.Row,PracticasMedicasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PracticasMedicasRowDeletedEvent) Is Nothing) Then
                RaiseEvent PracticasMedicasRowDeleted(Me, New PracticasMedicasRowChangeEvent(CType(e.Row,PracticasMedicasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PracticasMedicasRowDeletingEvent) Is Nothing) Then
                RaiseEvent PracticasMedicasRowDeleting(Me, New PracticasMedicasRowChangeEvent(CType(e.Row,PracticasMedicasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovePracticasMedicasRow(ByVal row As PracticasMedicasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PracticasMedicasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ProvinciasDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnPROV_Key As System.Data.DataColumn
        
        Private columnPROV_Nombre As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Provincias"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROV_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnPROV_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PROV_NombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnPROV_Nombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ProvinciasRow
            Get
                Return CType(Me.Rows(index),ProvinciasRow)
            End Get
        End Property
        
        Public Event ProvinciasRowChanging As ProvinciasRowChangeEventHandler
        
        Public Event ProvinciasRowChanged As ProvinciasRowChangeEventHandler
        
        Public Event ProvinciasRowDeleting As ProvinciasRowChangeEventHandler
        
        Public Event ProvinciasRowDeleted As ProvinciasRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddProvinciasRow(ByVal row As ProvinciasRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddProvinciasRow(ByVal PROV_Key As Integer, ByVal PROV_Nombre As String) As ProvinciasRow
            Dim rowProvinciasRow As ProvinciasRow = CType(Me.NewRow,ProvinciasRow)
            rowProvinciasRow.ItemArray = New Object() {PROV_Key, PROV_Nombre}
            Me.Rows.Add(rowProvinciasRow)
            Return rowProvinciasRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByPROV_Key(ByVal PROV_Key As Integer) As ProvinciasRow
            Return CType(Me.Rows.Find(New Object() {PROV_Key}),ProvinciasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ProvinciasDataTable = CType(MyBase.Clone,ProvinciasDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ProvinciasDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnPROV_Key = MyBase.Columns("PROV_Key")
            Me.columnPROV_Nombre = MyBase.Columns("PROV_Nombre")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnPROV_Key = New System.Data.DataColumn("PROV_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROV_Key)
            Me.columnPROV_Nombre = New System.Data.DataColumn("PROV_Nombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPROV_Nombre)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPROV_Key}, true))
            Me.columnPROV_Key.AllowDBNull = false
            Me.columnPROV_Key.Unique = true
            Me.columnPROV_Nombre.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewProvinciasRow() As ProvinciasRow
            Return CType(Me.NewRow,ProvinciasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ProvinciasRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ProvinciasRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ProvinciasRowChangedEvent) Is Nothing) Then
                RaiseEvent ProvinciasRowChanged(Me, New ProvinciasRowChangeEvent(CType(e.Row,ProvinciasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ProvinciasRowChangingEvent) Is Nothing) Then
                RaiseEvent ProvinciasRowChanging(Me, New ProvinciasRowChangeEvent(CType(e.Row,ProvinciasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ProvinciasRowDeletedEvent) Is Nothing) Then
                RaiseEvent ProvinciasRowDeleted(Me, New ProvinciasRowChangeEvent(CType(e.Row,ProvinciasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ProvinciasRowDeletingEvent) Is Nothing) Then
                RaiseEvent ProvinciasRowDeleting(Me, New ProvinciasRowChangeEvent(CType(e.Row,ProvinciasRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveProvinciasRow(ByVal row As ProvinciasRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ProvinciasDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYS_ROLESDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSYS_ROLE_KEY As System.Data.DataColumn
        
        Private columnSYS_ROLE_Descripcion As System.Data.DataColumn
        
        Private columnSYS_ROLE_Enabled As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYS_ROLES"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYS_ROLE_KEYColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYS_ROLE_KEY
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYS_ROLE_DescripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYS_ROLE_Descripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYS_ROLE_EnabledColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYS_ROLE_Enabled
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYS_ROLESRow
            Get
                Return CType(Me.Rows(index),SYS_ROLESRow)
            End Get
        End Property
        
        Public Event SYS_ROLESRowChanging As SYS_ROLESRowChangeEventHandler
        
        Public Event SYS_ROLESRowChanged As SYS_ROLESRowChangeEventHandler
        
        Public Event SYS_ROLESRowDeleting As SYS_ROLESRowChangeEventHandler
        
        Public Event SYS_ROLESRowDeleted As SYS_ROLESRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYS_ROLESRow(ByVal row As SYS_ROLESRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYS_ROLESRow(ByVal SYS_ROLE_Descripcion As String, ByVal SYS_ROLE_Enabled As Integer) As SYS_ROLESRow
            Dim rowSYS_ROLESRow As SYS_ROLESRow = CType(Me.NewRow,SYS_ROLESRow)
            rowSYS_ROLESRow.ItemArray = New Object() {Nothing, SYS_ROLE_Descripcion, SYS_ROLE_Enabled}
            Me.Rows.Add(rowSYS_ROLESRow)
            Return rowSYS_ROLESRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYS_ROLE_KEY(ByVal SYS_ROLE_KEY As Integer) As SYS_ROLESRow
            Return CType(Me.Rows.Find(New Object() {SYS_ROLE_KEY}),SYS_ROLESRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SYS_ROLESDataTable = CType(MyBase.Clone,SYS_ROLESDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SYS_ROLESDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYS_ROLE_KEY = MyBase.Columns("SYS_ROLE_KEY")
            Me.columnSYS_ROLE_Descripcion = MyBase.Columns("SYS_ROLE_Descripcion")
            Me.columnSYS_ROLE_Enabled = MyBase.Columns("SYS_ROLE_Enabled")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYS_ROLE_KEY = New System.Data.DataColumn("SYS_ROLE_KEY", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYS_ROLE_KEY)
            Me.columnSYS_ROLE_Descripcion = New System.Data.DataColumn("SYS_ROLE_Descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYS_ROLE_Descripcion)
            Me.columnSYS_ROLE_Enabled = New System.Data.DataColumn("SYS_ROLE_Enabled", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYS_ROLE_Enabled)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSYS_ROLE_KEY}, true))
            Me.columnSYS_ROLE_KEY.AutoIncrement = true
            Me.columnSYS_ROLE_KEY.AllowDBNull = false
            Me.columnSYS_ROLE_KEY.Unique = true
            Me.columnSYS_ROLE_Descripcion.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYS_ROLESRow() As SYS_ROLESRow
            Return CType(Me.NewRow,SYS_ROLESRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SYS_ROLESRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SYS_ROLESRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYS_ROLESRowChangedEvent) Is Nothing) Then
                RaiseEvent SYS_ROLESRowChanged(Me, New SYS_ROLESRowChangeEvent(CType(e.Row,SYS_ROLESRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYS_ROLESRowChangingEvent) Is Nothing) Then
                RaiseEvent SYS_ROLESRowChanging(Me, New SYS_ROLESRowChangeEvent(CType(e.Row,SYS_ROLESRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYS_ROLESRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYS_ROLESRowDeleted(Me, New SYS_ROLESRowChangeEvent(CType(e.Row,SYS_ROLESRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYS_ROLESRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYS_ROLESRowDeleting(Me, New SYS_ROLESRowChangeEvent(CType(e.Row,SYS_ROLESRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYS_ROLESRow(ByVal row As SYS_ROLESRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYS_ROLESDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class SYS_UsuariosDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnSYS_User_Login As System.Data.DataColumn
        
        Private columnSYS_ROLE_KEY As System.Data.DataColumn
        
        Private columnSYS_User_Pass As System.Data.DataColumn
        
        Private columnSYS_User_Autorizacion As System.Data.DataColumn
        
        Private columnSYS_User_Nombre As System.Data.DataColumn
        
        Private columnSYS_User_Apellido As System.Data.DataColumn
        
        Private columnTDOC_Key As System.Data.DataColumn
        
        Private columnSYS_User_DNI As System.Data.DataColumn
        
        Private columnSYS_User_Telefono As System.Data.DataColumn
        
        Private columnSYS_User_email As System.Data.DataColumn
        
        Private columnSYS_User_Direccion As System.Data.DataColumn
        
        Private columnSYS_User_Celular As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "SYS_Usuarios"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYS_User_LoginColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYS_User_Login
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYS_ROLE_KEYColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYS_ROLE_KEY
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYS_User_PassColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYS_User_Pass
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYS_User_AutorizacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYS_User_Autorizacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYS_User_NombreColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYS_User_Nombre
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYS_User_ApellidoColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYS_User_Apellido
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDOC_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnTDOC_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYS_User_DNIColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYS_User_DNI
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYS_User_TelefonoColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYS_User_Telefono
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYS_User_emailColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYS_User_email
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYS_User_DireccionColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYS_User_Direccion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SYS_User_CelularColumn() As System.Data.DataColumn
            Get
                Return Me.columnSYS_User_Celular
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As SYS_UsuariosRow
            Get
                Return CType(Me.Rows(index),SYS_UsuariosRow)
            End Get
        End Property
        
        Public Event SYS_UsuariosRowChanging As SYS_UsuariosRowChangeEventHandler
        
        Public Event SYS_UsuariosRowChanged As SYS_UsuariosRowChangeEventHandler
        
        Public Event SYS_UsuariosRowDeleting As SYS_UsuariosRowChangeEventHandler
        
        Public Event SYS_UsuariosRowDeleted As SYS_UsuariosRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddSYS_UsuariosRow(ByVal row As SYS_UsuariosRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddSYS_UsuariosRow(ByVal SYS_User_Login As String, ByVal parentSYS_ROLESRowBySYS_ROLESSYS_Usuarios As SYS_ROLESRow, ByVal SYS_User_Pass As String, ByVal SYS_User_Autorizacion As Integer, ByVal SYS_User_Nombre As String, ByVal SYS_User_Apellido As String, ByVal parentTiposDocumentoRowByTiposDocumentoSYS_Usuarios As TiposDocumentoRow, ByVal SYS_User_DNI As String, ByVal SYS_User_Telefono As String, ByVal SYS_User_email As String, ByVal SYS_User_Direccion As String, ByVal SYS_User_Celular As String) As SYS_UsuariosRow
            Dim rowSYS_UsuariosRow As SYS_UsuariosRow = CType(Me.NewRow,SYS_UsuariosRow)
            rowSYS_UsuariosRow.ItemArray = New Object() {SYS_User_Login, parentSYS_ROLESRowBySYS_ROLESSYS_Usuarios(0), SYS_User_Pass, SYS_User_Autorizacion, SYS_User_Nombre, SYS_User_Apellido, parentTiposDocumentoRowByTiposDocumentoSYS_Usuarios(0), SYS_User_DNI, SYS_User_Telefono, SYS_User_email, SYS_User_Direccion, SYS_User_Celular}
            Me.Rows.Add(rowSYS_UsuariosRow)
            Return rowSYS_UsuariosRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySYS_User_Login(ByVal SYS_User_Login As String) As SYS_UsuariosRow
            Return CType(Me.Rows.Find(New Object() {SYS_User_Login}),SYS_UsuariosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SYS_UsuariosDataTable = CType(MyBase.Clone,SYS_UsuariosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SYS_UsuariosDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSYS_User_Login = MyBase.Columns("SYS_User_Login")
            Me.columnSYS_ROLE_KEY = MyBase.Columns("SYS_ROLE_KEY")
            Me.columnSYS_User_Pass = MyBase.Columns("SYS_User_Pass")
            Me.columnSYS_User_Autorizacion = MyBase.Columns("SYS_User_Autorizacion")
            Me.columnSYS_User_Nombre = MyBase.Columns("SYS_User_Nombre")
            Me.columnSYS_User_Apellido = MyBase.Columns("SYS_User_Apellido")
            Me.columnTDOC_Key = MyBase.Columns("TDOC_Key")
            Me.columnSYS_User_DNI = MyBase.Columns("SYS_User_DNI")
            Me.columnSYS_User_Telefono = MyBase.Columns("SYS_User_Telefono")
            Me.columnSYS_User_email = MyBase.Columns("SYS_User_email")
            Me.columnSYS_User_Direccion = MyBase.Columns("SYS_User_Direccion")
            Me.columnSYS_User_Celular = MyBase.Columns("SYS_User_Celular")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSYS_User_Login = New System.Data.DataColumn("SYS_User_Login", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYS_User_Login)
            Me.columnSYS_ROLE_KEY = New System.Data.DataColumn("SYS_ROLE_KEY", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYS_ROLE_KEY)
            Me.columnSYS_User_Pass = New System.Data.DataColumn("SYS_User_Pass", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYS_User_Pass)
            Me.columnSYS_User_Autorizacion = New System.Data.DataColumn("SYS_User_Autorizacion", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYS_User_Autorizacion)
            Me.columnSYS_User_Nombre = New System.Data.DataColumn("SYS_User_Nombre", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYS_User_Nombre)
            Me.columnSYS_User_Apellido = New System.Data.DataColumn("SYS_User_Apellido", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYS_User_Apellido)
            Me.columnTDOC_Key = New System.Data.DataColumn("TDOC_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDOC_Key)
            Me.columnSYS_User_DNI = New System.Data.DataColumn("SYS_User_DNI", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYS_User_DNI)
            Me.columnSYS_User_Telefono = New System.Data.DataColumn("SYS_User_Telefono", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYS_User_Telefono)
            Me.columnSYS_User_email = New System.Data.DataColumn("SYS_User_email", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYS_User_email)
            Me.columnSYS_User_Direccion = New System.Data.DataColumn("SYS_User_Direccion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYS_User_Direccion)
            Me.columnSYS_User_Celular = New System.Data.DataColumn("SYS_User_Celular", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSYS_User_Celular)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSYS_User_Login}, true))
            Me.columnSYS_User_Login.AllowDBNull = false
            Me.columnSYS_User_Login.Unique = true
            Me.columnSYS_User_Login.MaxLength = 50
            Me.columnSYS_User_Pass.MaxLength = 50
            Me.columnSYS_User_Nombre.MaxLength = 255
            Me.columnSYS_User_Apellido.MaxLength = 255
            Me.columnSYS_User_DNI.MaxLength = 255
            Me.columnSYS_User_Telefono.MaxLength = 255
            Me.columnSYS_User_email.MaxLength = 255
            Me.columnSYS_User_Direccion.MaxLength = 255
            Me.columnSYS_User_Celular.MaxLength = 255
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewSYS_UsuariosRow() As SYS_UsuariosRow
            Return CType(Me.NewRow,SYS_UsuariosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SYS_UsuariosRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SYS_UsuariosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SYS_UsuariosRowChangedEvent) Is Nothing) Then
                RaiseEvent SYS_UsuariosRowChanged(Me, New SYS_UsuariosRowChangeEvent(CType(e.Row,SYS_UsuariosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SYS_UsuariosRowChangingEvent) Is Nothing) Then
                RaiseEvent SYS_UsuariosRowChanging(Me, New SYS_UsuariosRowChangeEvent(CType(e.Row,SYS_UsuariosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SYS_UsuariosRowDeletedEvent) Is Nothing) Then
                RaiseEvent SYS_UsuariosRowDeleted(Me, New SYS_UsuariosRowChangeEvent(CType(e.Row,SYS_UsuariosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SYS_UsuariosRowDeletingEvent) Is Nothing) Then
                RaiseEvent SYS_UsuariosRowDeleting(Me, New SYS_UsuariosRowChangeEvent(CType(e.Row,SYS_UsuariosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveSYS_UsuariosRow(ByVal row As SYS_UsuariosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SYS_UsuariosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TiposDocumentoDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnTDOC_Key As System.Data.DataColumn
        
        Private columnTDOC_Descripcion As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TiposDocumento"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDOC_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnTDOC_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TDOC_DescripcionColumn() As System.Data.DataColumn
            Get
                Return Me.columnTDOC_Descripcion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TiposDocumentoRow
            Get
                Return CType(Me.Rows(index),TiposDocumentoRow)
            End Get
        End Property
        
        Public Event TiposDocumentoRowChanging As TiposDocumentoRowChangeEventHandler
        
        Public Event TiposDocumentoRowChanged As TiposDocumentoRowChangeEventHandler
        
        Public Event TiposDocumentoRowDeleting As TiposDocumentoRowChangeEventHandler
        
        Public Event TiposDocumentoRowDeleted As TiposDocumentoRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTiposDocumentoRow(ByVal row As TiposDocumentoRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTiposDocumentoRow(ByVal TDOC_Key As Integer, ByVal TDOC_Descripcion As String) As TiposDocumentoRow
            Dim rowTiposDocumentoRow As TiposDocumentoRow = CType(Me.NewRow,TiposDocumentoRow)
            rowTiposDocumentoRow.ItemArray = New Object() {TDOC_Key, TDOC_Descripcion}
            Me.Rows.Add(rowTiposDocumentoRow)
            Return rowTiposDocumentoRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTDOC_Key(ByVal TDOC_Key As Integer) As TiposDocumentoRow
            Return CType(Me.Rows.Find(New Object() {TDOC_Key}),TiposDocumentoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TiposDocumentoDataTable = CType(MyBase.Clone,TiposDocumentoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TiposDocumentoDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTDOC_Key = MyBase.Columns("TDOC_Key")
            Me.columnTDOC_Descripcion = MyBase.Columns("TDOC_Descripcion")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTDOC_Key = New System.Data.DataColumn("TDOC_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDOC_Key)
            Me.columnTDOC_Descripcion = New System.Data.DataColumn("TDOC_Descripcion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTDOC_Descripcion)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnTDOC_Key}, true))
            Me.columnTDOC_Key.AllowDBNull = false
            Me.columnTDOC_Key.Unique = true
            Me.columnTDOC_Descripcion.MaxLength = 3
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTiposDocumentoRow() As TiposDocumentoRow
            Return CType(Me.NewRow,TiposDocumentoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TiposDocumentoRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TiposDocumentoRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TiposDocumentoRowChangedEvent) Is Nothing) Then
                RaiseEvent TiposDocumentoRowChanged(Me, New TiposDocumentoRowChangeEvent(CType(e.Row,TiposDocumentoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TiposDocumentoRowChangingEvent) Is Nothing) Then
                RaiseEvent TiposDocumentoRowChanging(Me, New TiposDocumentoRowChangeEvent(CType(e.Row,TiposDocumentoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TiposDocumentoRowDeletedEvent) Is Nothing) Then
                RaiseEvent TiposDocumentoRowDeleted(Me, New TiposDocumentoRowChangeEvent(CType(e.Row,TiposDocumentoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TiposDocumentoRowDeletingEvent) Is Nothing) Then
                RaiseEvent TiposDocumentoRowDeleting(Me, New TiposDocumentoRowChangeEvent(CType(e.Row,TiposDocumentoRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTiposDocumentoRow(ByVal row As TiposDocumentoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TiposDocumentoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.Serializable(),  _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TurnosDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable
        
        Private columnturno_key As System.Data.DataColumn
        
        Private columnTurno_Fecha As System.Data.DataColumn
        
        Private columnTurno_Hora As System.Data.DataColumn
        
        Private columnPac_Key As System.Data.DataColumn
        
        Private columnMed_Key As System.Data.DataColumn
        
        Private columnTurno_Estado As System.Data.DataColumn
        
        Private columnTurno_FechaAlta As System.Data.DataColumn
        
        Private columnTurno_FechaCancelacion As System.Data.DataColumn
        
        Private columnMOVI_Key As System.Data.DataColumn
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Turnos"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property turno_keyColumn() As System.Data.DataColumn
            Get
                Return Me.columnturno_key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Turno_FechaColumn() As System.Data.DataColumn
            Get
                Return Me.columnTurno_Fecha
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Turno_HoraColumn() As System.Data.DataColumn
            Get
                Return Me.columnTurno_Hora
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Pac_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnPac_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Med_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnMed_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Turno_EstadoColumn() As System.Data.DataColumn
            Get
                Return Me.columnTurno_Estado
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Turno_FechaAltaColumn() As System.Data.DataColumn
            Get
                Return Me.columnTurno_FechaAlta
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Turno_FechaCancelacionColumn() As System.Data.DataColumn
            Get
                Return Me.columnTurno_FechaCancelacion
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MOVI_KeyColumn() As System.Data.DataColumn
            Get
                Return Me.columnMOVI_Key
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TurnosRow
            Get
                Return CType(Me.Rows(index),TurnosRow)
            End Get
        End Property
        
        Public Event TurnosRowChanging As TurnosRowChangeEventHandler
        
        Public Event TurnosRowChanged As TurnosRowChangeEventHandler
        
        Public Event TurnosRowDeleting As TurnosRowChangeEventHandler
        
        Public Event TurnosRowDeleted As TurnosRowChangeEventHandler
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTurnosRow(ByVal row As TurnosRow)
            Me.Rows.Add(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTurnosRow(ByVal Turno_Fecha As Date, ByVal Turno_Hora As String, ByVal parentPacientesRowByPacientesTurnos As PacientesRow, ByVal parentMedicosRowByMedicosTurnos As MedicosRow, ByVal Turno_Estado As Integer, ByVal Turno_FechaAlta As Date, ByVal Turno_FechaCancelacion As Date, ByVal parentMotivoVisitaRowByMotivo_VisitaTurnos As MotivoVisitaRow) As TurnosRow
            Dim rowTurnosRow As TurnosRow = CType(Me.NewRow,TurnosRow)
            rowTurnosRow.ItemArray = New Object() {Nothing, Turno_Fecha, Turno_Hora, parentPacientesRowByPacientesTurnos(0), parentMedicosRowByMedicosTurnos(0), Turno_Estado, Turno_FechaAlta, Turno_FechaCancelacion, parentMotivoVisitaRowByMotivo_VisitaTurnos(0)}
            Me.Rows.Add(rowTurnosRow)
            Return rowTurnosRow
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByturno_key(ByVal turno_key As Integer) As TurnosRow
            Return CType(Me.Rows.Find(New Object() {turno_key}),TurnosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TurnosDataTable = CType(MyBase.Clone,TurnosDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TurnosDataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnturno_key = MyBase.Columns("turno_key")
            Me.columnTurno_Fecha = MyBase.Columns("Turno_Fecha")
            Me.columnTurno_Hora = MyBase.Columns("Turno_Hora")
            Me.columnPac_Key = MyBase.Columns("Pac_Key")
            Me.columnMed_Key = MyBase.Columns("Med_Key")
            Me.columnTurno_Estado = MyBase.Columns("Turno_Estado")
            Me.columnTurno_FechaAlta = MyBase.Columns("Turno_FechaAlta")
            Me.columnTurno_FechaCancelacion = MyBase.Columns("Turno_FechaCancelacion")
            Me.columnMOVI_Key = MyBase.Columns("MOVI_Key")
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnturno_key = New System.Data.DataColumn("turno_key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnturno_key)
            Me.columnTurno_Fecha = New System.Data.DataColumn("Turno_Fecha", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTurno_Fecha)
            Me.columnTurno_Hora = New System.Data.DataColumn("Turno_Hora", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTurno_Hora)
            Me.columnPac_Key = New System.Data.DataColumn("Pac_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPac_Key)
            Me.columnMed_Key = New System.Data.DataColumn("Med_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMed_Key)
            Me.columnTurno_Estado = New System.Data.DataColumn("Turno_Estado", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTurno_Estado)
            Me.columnTurno_FechaAlta = New System.Data.DataColumn("Turno_FechaAlta", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTurno_FechaAlta)
            Me.columnTurno_FechaCancelacion = New System.Data.DataColumn("Turno_FechaCancelacion", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTurno_FechaCancelacion)
            Me.columnMOVI_Key = New System.Data.DataColumn("MOVI_Key", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMOVI_Key)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnturno_key}, true))
            Me.columnturno_key.AutoIncrement = true
            Me.columnturno_key.AllowDBNull = false
            Me.columnturno_key.Unique = true
            Me.columnTurno_Hora.MaxLength = 50
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTurnosRow() As TurnosRow
            Return CType(Me.NewRow,TurnosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TurnosRow(builder)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TurnosRow)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TurnosRowChangedEvent) Is Nothing) Then
                RaiseEvent TurnosRowChanged(Me, New TurnosRowChangeEvent(CType(e.Row,TurnosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TurnosRowChangingEvent) Is Nothing) Then
                RaiseEvent TurnosRowChanging(Me, New TurnosRowChangeEvent(CType(e.Row,TurnosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TurnosRowDeletedEvent) Is Nothing) Then
                RaiseEvent TurnosRowDeleted(Me, New TurnosRowChangeEvent(CType(e.Row,TurnosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TurnosRowDeletingEvent) Is Nothing) Then
                RaiseEvent TurnosRowDeleting(Me, New TurnosRowChangeEvent(CType(e.Row,TurnosRow), e.Action))
            End If
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTurnosRow(ByVal row As TurnosRow)
            Me.Rows.Remove(row)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As Base2006DataSet3 = New Base2006DataSet3
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TurnosDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ConsultoriosRow
        Inherits System.Data.DataRow
        
        Private tableConsultorios As ConsultoriosDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableConsultorios = CType(Me.Table,ConsultoriosDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cons_key() As Integer
            Get
                Return CType(Me(Me.tableConsultorios.Cons_keyColumn),Integer)
            End Get
            Set
                Me(Me.tableConsultorios.Cons_keyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cons_Ubicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableConsultorios.Cons_UbicacionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Cons_Ubicacion' de la tabla 'Consultorios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultorios.Cons_UbicacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cons_Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableConsultorios.Cons_DescripcionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Cons_Descripcion' de la tabla 'Consultorios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultorios.Cons_DescripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCons_UbicacionNull() As Boolean
            Return Me.IsNull(Me.tableConsultorios.Cons_UbicacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCons_UbicacionNull()
            Me(Me.tableConsultorios.Cons_UbicacionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCons_DescripcionNull() As Boolean
            Return Me.IsNull(Me.tableConsultorios.Cons_DescripcionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCons_DescripcionNull()
            Me(Me.tableConsultorios.Cons_DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetEspecialidadesRows() As EspecialidadesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ConsultorioEspecialidad")),EspecialidadesRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DetalleHistoriaClinicaRow
        Inherits System.Data.DataRow
        
        Private tableDetalleHistoriaClinica As DetalleHistoriaClinicaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDetalleHistoriaClinica = CType(Me.Table,DetalleHistoriaClinicaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deta_Key() As Integer
            Get
                Return CType(Me(Me.tableDetalleHistoriaClinica.Deta_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tableDetalleHistoriaClinica.Deta_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_key() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDetalleHistoriaClinica.Pac_keyColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_key' de la tabla 'DetalleHistoriaClinica' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleHistoriaClinica.Pac_keyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deta_FechaConsulta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDetalleHistoriaClinica.Deta_FechaConsultaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Deta_FechaConsulta' de la tabla 'DetalleHistoriaClinica' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleHistoriaClinica.Deta_FechaConsultaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deta_Especialidad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDetalleHistoriaClinica.Deta_EspecialidadColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Deta_Especialidad' de la tabla 'DetalleHistoriaClinica' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleHistoriaClinica.Deta_EspecialidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deta_NombresMedico() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleHistoriaClinica.Deta_NombresMedicoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Deta_NombresMedico' de la tabla 'DetalleHistoriaClinica' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleHistoriaClinica.Deta_NombresMedicoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deta_ApellidosMedico() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleHistoriaClinica.Deta_ApellidosMedicoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Deta_ApellidosMedico' de la tabla 'DetalleHistoriaClinica"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleHistoriaClinica.Deta_ApellidosMedicoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deta_Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleHistoriaClinica.Deta_DescripcionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Deta_Descripcion' de la tabla 'DetalleHistoriaClinica' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleHistoriaClinica.Deta_DescripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deta_Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleHistoriaClinica.Deta_ObservacionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Deta_Observacion' de la tabla 'DetalleHistoriaClinica' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleHistoriaClinica.Deta_ObservacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deta_Diagnostico() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleHistoriaClinica.Deta_DiagnosticoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Deta_Diagnostico' de la tabla 'DetalleHistoriaClinica' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleHistoriaClinica.Deta_DiagnosticoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deta_Medicacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleHistoriaClinica.Deta_MedicacionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Deta_Medicacion' de la tabla 'DetalleHistoriaClinica' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleHistoriaClinica.Deta_MedicacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deta_Tratamiento() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleHistoriaClinica.Deta_TratamientoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Deta_Tratamiento' de la tabla 'DetalleHistoriaClinica' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleHistoriaClinica.Deta_TratamientoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Deta_DuracionTratamiento() As String
            Get
                Try 
                    Return CType(Me(Me.tableDetalleHistoriaClinica.Deta_DuracionTratamientoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Deta_DuracionTratamiento' de la tabla 'DetalleHistoriaCli"& _ 
                            "nica' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDetalleHistoriaClinica.Deta_DuracionTratamientoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EspecialidadesRow() As EspecialidadesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("EspecialidadDetalleHistoriaClinica")),EspecialidadesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("EspecialidadDetalleHistoriaClinica"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PacientesRow() As PacientesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PacientesDetalleHistoriaClinica")),PacientesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PacientesDetalleHistoriaClinica"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_keyNull() As Boolean
            Return Me.IsNull(Me.tableDetalleHistoriaClinica.Pac_keyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_keyNull()
            Me(Me.tableDetalleHistoriaClinica.Pac_keyColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeta_FechaConsultaNull() As Boolean
            Return Me.IsNull(Me.tableDetalleHistoriaClinica.Deta_FechaConsultaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeta_FechaConsultaNull()
            Me(Me.tableDetalleHistoriaClinica.Deta_FechaConsultaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeta_EspecialidadNull() As Boolean
            Return Me.IsNull(Me.tableDetalleHistoriaClinica.Deta_EspecialidadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeta_EspecialidadNull()
            Me(Me.tableDetalleHistoriaClinica.Deta_EspecialidadColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeta_NombresMedicoNull() As Boolean
            Return Me.IsNull(Me.tableDetalleHistoriaClinica.Deta_NombresMedicoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeta_NombresMedicoNull()
            Me(Me.tableDetalleHistoriaClinica.Deta_NombresMedicoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeta_ApellidosMedicoNull() As Boolean
            Return Me.IsNull(Me.tableDetalleHistoriaClinica.Deta_ApellidosMedicoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeta_ApellidosMedicoNull()
            Me(Me.tableDetalleHistoriaClinica.Deta_ApellidosMedicoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeta_DescripcionNull() As Boolean
            Return Me.IsNull(Me.tableDetalleHistoriaClinica.Deta_DescripcionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeta_DescripcionNull()
            Me(Me.tableDetalleHistoriaClinica.Deta_DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeta_ObservacionNull() As Boolean
            Return Me.IsNull(Me.tableDetalleHistoriaClinica.Deta_ObservacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeta_ObservacionNull()
            Me(Me.tableDetalleHistoriaClinica.Deta_ObservacionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeta_DiagnosticoNull() As Boolean
            Return Me.IsNull(Me.tableDetalleHistoriaClinica.Deta_DiagnosticoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeta_DiagnosticoNull()
            Me(Me.tableDetalleHistoriaClinica.Deta_DiagnosticoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeta_MedicacionNull() As Boolean
            Return Me.IsNull(Me.tableDetalleHistoriaClinica.Deta_MedicacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeta_MedicacionNull()
            Me(Me.tableDetalleHistoriaClinica.Deta_MedicacionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeta_TratamientoNull() As Boolean
            Return Me.IsNull(Me.tableDetalleHistoriaClinica.Deta_TratamientoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeta_TratamientoNull()
            Me(Me.tableDetalleHistoriaClinica.Deta_TratamientoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeta_DuracionTratamientoNull() As Boolean
            Return Me.IsNull(Me.tableDetalleHistoriaClinica.Deta_DuracionTratamientoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeta_DuracionTratamientoNull()
            Me(Me.tableDetalleHistoriaClinica.Deta_DuracionTratamientoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DisponibilidadHorariaRow
        Inherits System.Data.DataRow
        
        Private tableDisponibilidadHoraria As DisponibilidadHorariaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDisponibilidadHoraria = CType(Me.Table,DisponibilidadHorariaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DSPH_Key() As Integer
            Get
                Return CType(Me(Me.tableDisponibilidadHoraria.DSPH_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tableDisponibilidadHoraria.DSPH_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_Key() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDisponibilidadHoraria.Med_KeyColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_Key' de la tabla 'DisponibilidadHoraria' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisponibilidadHoraria.Med_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DSPH_DiaSemana() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisponibilidadHoraria.DSPH_DiaSemanaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DSPH_DiaSemana' de la tabla 'DisponibilidadHoraria' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisponibilidadHoraria.DSPH_DiaSemanaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DSPH_Duracion() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDisponibilidadHoraria.DSPH_DuracionColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DSPH_Duracion' de la tabla 'DisponibilidadHoraria' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisponibilidadHoraria.DSPH_DuracionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DSPH_HoraInicio() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDisponibilidadHoraria.DSPH_HoraInicioColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DSPH_HoraInicio' de la tabla 'DisponibilidadHoraria' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisponibilidadHoraria.DSPH_HoraInicioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DSPH_HoraFin() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDisponibilidadHoraria.DSPH_HoraFinColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DSPH_HoraFin' de la tabla 'DisponibilidadHoraria' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisponibilidadHoraria.DSPH_HoraFinColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DSPH_FechaIni() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDisponibilidadHoraria.DSPH_FechaIniColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DSPH_FechaIni' de la tabla 'DisponibilidadHoraria' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisponibilidadHoraria.DSPH_FechaIniColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DSPH_FechaFin() As Date
            Get
                Try 
                    Return CType(Me(Me.tableDisponibilidadHoraria.DSPH_FechaFinColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DSPH_FechaFin' de la tabla 'DisponibilidadHoraria' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisponibilidadHoraria.DSPH_FechaFinColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DSPH_Novedades() As String
            Get
                Try 
                    Return CType(Me(Me.tableDisponibilidadHoraria.DSPH_NovedadesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'DSPH_Novedades' de la tabla 'DisponibilidadHoraria' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableDisponibilidadHoraria.DSPH_NovedadesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MedicosRow() As MedicosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MedicosDisponibilidadHoraria")),MedicosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MedicosDisponibilidadHoraria"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_KeyNull() As Boolean
            Return Me.IsNull(Me.tableDisponibilidadHoraria.Med_KeyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_KeyNull()
            Me(Me.tableDisponibilidadHoraria.Med_KeyColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDSPH_DiaSemanaNull() As Boolean
            Return Me.IsNull(Me.tableDisponibilidadHoraria.DSPH_DiaSemanaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDSPH_DiaSemanaNull()
            Me(Me.tableDisponibilidadHoraria.DSPH_DiaSemanaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDSPH_DuracionNull() As Boolean
            Return Me.IsNull(Me.tableDisponibilidadHoraria.DSPH_DuracionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDSPH_DuracionNull()
            Me(Me.tableDisponibilidadHoraria.DSPH_DuracionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDSPH_HoraInicioNull() As Boolean
            Return Me.IsNull(Me.tableDisponibilidadHoraria.DSPH_HoraInicioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDSPH_HoraInicioNull()
            Me(Me.tableDisponibilidadHoraria.DSPH_HoraInicioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDSPH_HoraFinNull() As Boolean
            Return Me.IsNull(Me.tableDisponibilidadHoraria.DSPH_HoraFinColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDSPH_HoraFinNull()
            Me(Me.tableDisponibilidadHoraria.DSPH_HoraFinColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDSPH_FechaIniNull() As Boolean
            Return Me.IsNull(Me.tableDisponibilidadHoraria.DSPH_FechaIniColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDSPH_FechaIniNull()
            Me(Me.tableDisponibilidadHoraria.DSPH_FechaIniColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDSPH_FechaFinNull() As Boolean
            Return Me.IsNull(Me.tableDisponibilidadHoraria.DSPH_FechaFinColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDSPH_FechaFinNull()
            Me(Me.tableDisponibilidadHoraria.DSPH_FechaFinColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDSPH_NovedadesNull() As Boolean
            Return Me.IsNull(Me.tableDisponibilidadHoraria.DSPH_NovedadesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDSPH_NovedadesNull()
            Me(Me.tableDisponibilidadHoraria.DSPH_NovedadesColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EspecialidadesRow
        Inherits System.Data.DataRow
        
        Private tableEspecialidades As EspecialidadesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEspecialidades = CType(Me.Table,EspecialidadesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Espe_Especialidad() As Integer
            Get
                Return CType(Me(Me.tableEspecialidades.Espe_EspecialidadColumn),Integer)
            End Get
            Set
                Me(Me.tableEspecialidades.Espe_EspecialidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Espe_Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableEspecialidades.Espe_DescripcionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Espe_Descripcion' de la tabla 'Especialidades' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableEspecialidades.Espe_DescripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Cons_key() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEspecialidades.Cons_keyColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Cons_key' de la tabla 'Especialidades' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEspecialidades.Cons_keyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsultoriosRow() As ConsultoriosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ConsultorioEspecialidad")),ConsultoriosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ConsultorioEspecialidad"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEspe_DescripcionNull() As Boolean
            Return Me.IsNull(Me.tableEspecialidades.Espe_DescripcionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEspe_DescripcionNull()
            Me(Me.tableEspecialidades.Espe_DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCons_keyNull() As Boolean
            Return Me.IsNull(Me.tableEspecialidades.Cons_keyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCons_keyNull()
            Me(Me.tableEspecialidades.Cons_keyColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDetalleHistoriaClinicaRows() As DetalleHistoriaClinicaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("EspecialidadDetalleHistoriaClinica")),DetalleHistoriaClinicaRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMedicosRows() As MedicosRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("EspecialidadMedico")),MedicosRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FacturasRow
        Inherits System.Data.DataRow
        
        Private tableFacturas As FacturasDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFacturas = CType(Me.Table,FacturasDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fact_Key() As Integer
            Get
                Return CType(Me(Me.tableFacturas.Fact_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tableFacturas.Fact_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_Key() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFacturas.Pac_KeyColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_Key' de la tabla 'Facturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturas.Pac_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fact_FechaFactura() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFacturas.Fact_FechaFacturaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Fact_FechaFactura' de la tabla 'Facturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturas.Fact_FechaFacturaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fact_Tipo() As String
            Get
                Try 
                    Return CType(Me(Me.tableFacturas.Fact_TipoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Fact_Tipo' de la tabla 'Facturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturas.Fact_TipoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fact_Monto() As Double
            Get
                Try 
                    Return CType(Me(Me.tableFacturas.Fact_MontoColumn),Double)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Fact_Monto' de la tabla 'Facturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturas.Fact_MontoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fact_TipoDoc() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFacturas.Fact_TipoDocColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Fact_TipoDoc' de la tabla 'Facturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturas.Fact_TipoDocColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fact_NumeroDoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableFacturas.Fact_NumeroDocColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Fact_NumeroDoc' de la tabla 'Facturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturas.Fact_NumeroDocColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fact_Cantidad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFacturas.Fact_CantidadColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Fact_Cantidad' de la tabla 'Facturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturas.Fact_CantidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PM_Key() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFacturas.PM_KeyColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PM_Key' de la tabla 'Facturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturas.PM_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fact_Observacion() As String
            Get
                Try 
                    Return CType(Me(Me.tableFacturas.Fact_ObservacionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Fact_Observacion' de la tabla 'Facturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturas.Fact_ObservacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fact_FechaAlta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFacturas.Fact_FechaAltaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Fact_FechaAlta' de la tabla 'Facturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturas.Fact_FechaAltaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fact_FechaCancelacion() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFacturas.Fact_FechaCancelacionColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Fact_FechaCancelacion' de la tabla 'Facturas' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFacturas.Fact_FechaCancelacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PacientesRow() As PacientesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PacientesFacturas")),PacientesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PacientesFacturas"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PracticasMedicasRow() As PracticasMedicasRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PracticasMedicasFacturas")),PracticasMedicasRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PracticasMedicasFacturas"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_KeyNull() As Boolean
            Return Me.IsNull(Me.tableFacturas.Pac_KeyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_KeyNull()
            Me(Me.tableFacturas.Pac_KeyColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFact_FechaFacturaNull() As Boolean
            Return Me.IsNull(Me.tableFacturas.Fact_FechaFacturaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFact_FechaFacturaNull()
            Me(Me.tableFacturas.Fact_FechaFacturaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFact_TipoNull() As Boolean
            Return Me.IsNull(Me.tableFacturas.Fact_TipoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFact_TipoNull()
            Me(Me.tableFacturas.Fact_TipoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFact_MontoNull() As Boolean
            Return Me.IsNull(Me.tableFacturas.Fact_MontoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFact_MontoNull()
            Me(Me.tableFacturas.Fact_MontoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFact_TipoDocNull() As Boolean
            Return Me.IsNull(Me.tableFacturas.Fact_TipoDocColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFact_TipoDocNull()
            Me(Me.tableFacturas.Fact_TipoDocColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFact_NumeroDocNull() As Boolean
            Return Me.IsNull(Me.tableFacturas.Fact_NumeroDocColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFact_NumeroDocNull()
            Me(Me.tableFacturas.Fact_NumeroDocColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFact_CantidadNull() As Boolean
            Return Me.IsNull(Me.tableFacturas.Fact_CantidadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFact_CantidadNull()
            Me(Me.tableFacturas.Fact_CantidadColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPM_KeyNull() As Boolean
            Return Me.IsNull(Me.tableFacturas.PM_KeyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPM_KeyNull()
            Me(Me.tableFacturas.PM_KeyColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFact_ObservacionNull() As Boolean
            Return Me.IsNull(Me.tableFacturas.Fact_ObservacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFact_ObservacionNull()
            Me(Me.tableFacturas.Fact_ObservacionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFact_FechaAltaNull() As Boolean
            Return Me.IsNull(Me.tableFacturas.Fact_FechaAltaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFact_FechaAltaNull()
            Me(Me.tableFacturas.Fact_FechaAltaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFact_FechaCancelacionNull() As Boolean
            Return Me.IsNull(Me.tableFacturas.Fact_FechaCancelacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFact_FechaCancelacionNull()
            Me(Me.tableFacturas.Fact_FechaCancelacionColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LocalidadesRow
        Inherits System.Data.DataRow
        
        Private tableLocalidades As LocalidadesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLocalidades = CType(Me.Table,LocalidadesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOCA_Key() As Integer
            Get
                Return CType(Me(Me.tableLocalidades.LOCA_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tableLocalidades.LOCA_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROV_Key() As Integer
            Get
                Return CType(Me(Me.tableLocalidades.PROV_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tableLocalidades.PROV_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOCA_Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableLocalidades.LOCA_NombreColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'LOCA_Nombre' de la tabla 'Localidades' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLocalidades.LOCA_NombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOCA_Codpos() As String
            Get
                Try 
                    Return CType(Me(Me.tableLocalidades.LOCA_CodposColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'LOCA_Codpos' de la tabla 'Localidades' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLocalidades.LOCA_CodposColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MedicosRow() As MedicosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MedicosLocalidades")),MedicosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MedicosLocalidades"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PacientesRow() As PacientesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PacientesLocalidades")),PacientesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PacientesLocalidades"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProvinciasRow() As ProvinciasRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ProvinciasLocalidades")),ProvinciasRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ProvinciasLocalidades"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOCA_NombreNull() As Boolean
            Return Me.IsNull(Me.tableLocalidades.LOCA_NombreColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOCA_NombreNull()
            Me(Me.tableLocalidades.LOCA_NombreColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOCA_CodposNull() As Boolean
            Return Me.IsNull(Me.tableLocalidades.LOCA_CodposColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOCA_CodposNull()
            Me(Me.tableLocalidades.LOCA_CodposColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MedicosRow
        Inherits System.Data.DataRow
        
        Private tableMedicos As MedicosDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMedicos = CType(Me.Table,MedicosDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_key() As Integer
            Get
                Return CType(Me(Me.tableMedicos.Med_keyColumn),Integer)
            End Get
            Set
                Me(Me.tableMedicos.Med_keyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDOC_Key() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.TDOC_KeyColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'TDOC_Key' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.TDOC_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_NumeroDoc() As String
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.Med_NumeroDocColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_NumeroDoc' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.Med_NumeroDocColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_Nombres() As String
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.Med_NombresColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_Nombres' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.Med_NombresColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_Apellidos() As String
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.Med_ApellidosColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_Apellidos' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.Med_ApellidosColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_Calle() As String
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.Med_CalleColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_Calle' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.Med_CalleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_NumeroExt() As String
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.Med_NumeroExtColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_NumeroExt' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.Med_NumeroExtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_NumeroInt() As String
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.Med_NumeroIntColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_NumeroInt' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.Med_NumeroIntColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOCA_Key() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.LOCA_KeyColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'LOCA_Key' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.LOCA_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_Especialidad() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.Med_EspecialidadColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_Especialidad' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.Med_EspecialidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_Matricula() As String
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.Med_MatriculaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_Matricula' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.Med_MatriculaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_FechaNacimiento() As Date
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.Med_FechaNacimientoColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_FechaNacimiento' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.Med_FechaNacimientoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_Telefonos() As String
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.Med_TelefonosColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_Telefonos' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.Med_TelefonosColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_Celular() As String
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.Med_CelularColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_Celular' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.Med_CelularColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_Email() As String
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.Med_EmailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_Email' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.Med_EmailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_EstadoCivil() As String
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.Med_EstadoCivilColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_EstadoCivil' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.Med_EstadoCivilColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_Sexo() As String
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.Med_SexoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_Sexo' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.Med_SexoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_FechaIngreso() As String
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.Med_FechaIngresoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_FechaIngreso' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.Med_FechaIngresoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_Matricula1() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMedicos.Med_Matricula1Column),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_Matricula1' de la tabla 'Medicos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMedicos.Med_Matricula1Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EspecialidadesRow() As EspecialidadesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("EspecialidadMedico")),EspecialidadesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("EspecialidadMedico"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TiposDocumentoRow() As TiposDocumentoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoDocumentoMedico")),TiposDocumentoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoDocumentoMedico"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDOC_KeyNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.TDOC_KeyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDOC_KeyNull()
            Me(Me.tableMedicos.TDOC_KeyColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_NumeroDocNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.Med_NumeroDocColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_NumeroDocNull()
            Me(Me.tableMedicos.Med_NumeroDocColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_NombresNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.Med_NombresColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_NombresNull()
            Me(Me.tableMedicos.Med_NombresColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_ApellidosNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.Med_ApellidosColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_ApellidosNull()
            Me(Me.tableMedicos.Med_ApellidosColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_CalleNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.Med_CalleColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_CalleNull()
            Me(Me.tableMedicos.Med_CalleColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_NumeroExtNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.Med_NumeroExtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_NumeroExtNull()
            Me(Me.tableMedicos.Med_NumeroExtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_NumeroIntNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.Med_NumeroIntColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_NumeroIntNull()
            Me(Me.tableMedicos.Med_NumeroIntColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOCA_KeyNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.LOCA_KeyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOCA_KeyNull()
            Me(Me.tableMedicos.LOCA_KeyColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_EspecialidadNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.Med_EspecialidadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_EspecialidadNull()
            Me(Me.tableMedicos.Med_EspecialidadColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_MatriculaNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.Med_MatriculaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_MatriculaNull()
            Me(Me.tableMedicos.Med_MatriculaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_FechaNacimientoNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.Med_FechaNacimientoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_FechaNacimientoNull()
            Me(Me.tableMedicos.Med_FechaNacimientoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_TelefonosNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.Med_TelefonosColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_TelefonosNull()
            Me(Me.tableMedicos.Med_TelefonosColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_CelularNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.Med_CelularColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_CelularNull()
            Me(Me.tableMedicos.Med_CelularColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_EmailNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.Med_EmailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_EmailNull()
            Me(Me.tableMedicos.Med_EmailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_EstadoCivilNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.Med_EstadoCivilColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_EstadoCivilNull()
            Me(Me.tableMedicos.Med_EstadoCivilColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_SexoNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.Med_SexoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_SexoNull()
            Me(Me.tableMedicos.Med_SexoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_FechaIngresoNull() As Boolean
            Return Me.IsNull(Me.tableMedicos.Med_FechaIngresoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_FechaIngresoNull()
            Me(Me.tableMedicos.Med_FechaIngresoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_Matricula1Null() As Boolean
            Return Me.IsNull(Me.tableMedicos.Med_Matricula1Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_Matricula1Null()
            Me(Me.tableMedicos.Med_Matricula1Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDisponibilidadHorariaRows() As DisponibilidadHorariaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("MedicosDisponibilidadHoraria")),DisponibilidadHorariaRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetLocalidadesRows() As LocalidadesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("MedicosLocalidades")),LocalidadesRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTurnosRows() As TurnosRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("MedicosTurnos")),TurnosRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MotivoVisitaRow
        Inherits System.Data.DataRow
        
        Private tableMotivoVisita As MotivoVisitaDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMotivoVisita = CType(Me.Table,MotivoVisitaDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOVI_Key() As Integer
            Get
                Return CType(Me(Me.tableMotivoVisita.MOVI_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tableMotivoVisita.MOVI_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOVI_Motivo() As String
            Get
                Try 
                    Return CType(Me(Me.tableMotivoVisita.MOVI_MotivoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MOVI_Motivo' de la tabla 'MotivoVisita' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMotivoVisita.MOVI_MotivoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOVI_Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableMotivoVisita.MOVI_DescripcionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MOVI_Descripcion' de la tabla 'MotivoVisita' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMotivoVisita.MOVI_DescripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMOVI_MotivoNull() As Boolean
            Return Me.IsNull(Me.tableMotivoVisita.MOVI_MotivoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMOVI_MotivoNull()
            Me(Me.tableMotivoVisita.MOVI_MotivoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMOVI_DescripcionNull() As Boolean
            Return Me.IsNull(Me.tableMotivoVisita.MOVI_DescripcionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMOVI_DescripcionNull()
            Me(Me.tableMotivoVisita.MOVI_DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTurnosRows() As TurnosRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Motivo VisitaTurnos")),TurnosRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ObrasSocialesRow
        Inherits System.Data.DataRow
        
        Private tableObrasSociales As ObrasSocialesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableObrasSociales = CType(Me.Table,ObrasSocialesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OS_Key() As Integer
            Get
                Return CType(Me(Me.tableObrasSociales.OS_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tableObrasSociales.OS_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OS_Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableObrasSociales.OS_NombreColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'OS_Nombre' de la tabla 'ObrasSociales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableObrasSociales.OS_NombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OS_Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableObrasSociales.OS_DescripcionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'OS_Descripcion' de la tabla 'ObrasSociales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableObrasSociales.OS_DescripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OS_Calle() As String
            Get
                Try 
                    Return CType(Me(Me.tableObrasSociales.OS_CalleColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'OS_Calle' de la tabla 'ObrasSociales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableObrasSociales.OS_CalleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OS_NumeroExt() As String
            Get
                Try 
                    Return CType(Me(Me.tableObrasSociales.OS_NumeroExtColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'OS_NumeroExt' de la tabla 'ObrasSociales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableObrasSociales.OS_NumeroExtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OS_NumeroInt() As String
            Get
                Try 
                    Return CType(Me(Me.tableObrasSociales.OS_NumeroIntColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'OS_NumeroInt' de la tabla 'ObrasSociales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableObrasSociales.OS_NumeroIntColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOCA_Key() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableObrasSociales.LOCA_KeyColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'LOCA_Key' de la tabla 'ObrasSociales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableObrasSociales.LOCA_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OS_Telefonos() As String
            Get
                Try 
                    Return CType(Me(Me.tableObrasSociales.OS_TelefonosColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'OS_Telefonos' de la tabla 'ObrasSociales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableObrasSociales.OS_TelefonosColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OS_FechaFinConvenio() As Date
            Get
                Try 
                    Return CType(Me(Me.tableObrasSociales.OS_FechaFinConvenioColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'OS_FechaFinConvenio' de la tabla 'ObrasSociales' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableObrasSociales.OS_FechaFinConvenioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OS_FechaAlta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableObrasSociales.OS_FechaAltaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'OS_FechaAlta' de la tabla 'ObrasSociales' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableObrasSociales.OS_FechaAltaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OS_FechaCancelacion() As Date
            Get
                Try 
                    Return CType(Me(Me.tableObrasSociales.OS_FechaCancelacionColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'OS_FechaCancelacion' de la tabla 'ObrasSociales' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableObrasSociales.OS_FechaCancelacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOS_NombreNull() As Boolean
            Return Me.IsNull(Me.tableObrasSociales.OS_NombreColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOS_NombreNull()
            Me(Me.tableObrasSociales.OS_NombreColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOS_DescripcionNull() As Boolean
            Return Me.IsNull(Me.tableObrasSociales.OS_DescripcionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOS_DescripcionNull()
            Me(Me.tableObrasSociales.OS_DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOS_CalleNull() As Boolean
            Return Me.IsNull(Me.tableObrasSociales.OS_CalleColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOS_CalleNull()
            Me(Me.tableObrasSociales.OS_CalleColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOS_NumeroExtNull() As Boolean
            Return Me.IsNull(Me.tableObrasSociales.OS_NumeroExtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOS_NumeroExtNull()
            Me(Me.tableObrasSociales.OS_NumeroExtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOS_NumeroIntNull() As Boolean
            Return Me.IsNull(Me.tableObrasSociales.OS_NumeroIntColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOS_NumeroIntNull()
            Me(Me.tableObrasSociales.OS_NumeroIntColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOCA_KeyNull() As Boolean
            Return Me.IsNull(Me.tableObrasSociales.LOCA_KeyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOCA_KeyNull()
            Me(Me.tableObrasSociales.LOCA_KeyColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOS_TelefonosNull() As Boolean
            Return Me.IsNull(Me.tableObrasSociales.OS_TelefonosColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOS_TelefonosNull()
            Me(Me.tableObrasSociales.OS_TelefonosColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOS_FechaFinConvenioNull() As Boolean
            Return Me.IsNull(Me.tableObrasSociales.OS_FechaFinConvenioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOS_FechaFinConvenioNull()
            Me(Me.tableObrasSociales.OS_FechaFinConvenioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOS_FechaAltaNull() As Boolean
            Return Me.IsNull(Me.tableObrasSociales.OS_FechaAltaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOS_FechaAltaNull()
            Me(Me.tableObrasSociales.OS_FechaAltaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOS_FechaCancelacionNull() As Boolean
            Return Me.IsNull(Me.tableObrasSociales.OS_FechaCancelacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOS_FechaCancelacionNull()
            Me(Me.tableObrasSociales.OS_FechaCancelacionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPlanesRows() As PlanesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ObrasSocialesPlanes")),PlanesRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PacientesRow
        Inherits System.Data.DataRow
        
        Private tablePacientes As PacientesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePacientes = CType(Me.Table,PacientesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_key() As Integer
            Get
                Return CType(Me(Me.tablePacientes.Pac_keyColumn),Integer)
            End Get
            Set
                Me(Me.tablePacientes.Pac_keyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDOC_Key() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.TDOC_KeyColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'TDOC_Key' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.TDOC_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_NumeroDoc() As String
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.Pac_NumeroDocColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_NumeroDoc' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.Pac_NumeroDocColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_Nombres() As String
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.Pac_NombresColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_Nombres' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.Pac_NombresColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_Apellidos() As String
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.Pac_ApellidosColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_Apellidos' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.Pac_ApellidosColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_Calle() As String
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.Pac_CalleColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_Calle' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.Pac_CalleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_NumeroExt() As String
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.Pac_NumeroExtColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_NumeroExt' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.Pac_NumeroExtColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_NumeroInt() As String
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.Pac_NumeroIntColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_NumeroInt' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.Pac_NumeroIntColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LOCA_Key() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.LOCA_KeyColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'LOCA_Key' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.LOCA_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_Telefonos() As String
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.Pac_TelefonosColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_Telefonos' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.Pac_TelefonosColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_Celular() As String
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.Pac_CelularColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_Celular' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.Pac_CelularColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_Email() As String
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.Pac_EmailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_Email' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.Pac_EmailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_FechaNacimiento() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.Pac_FechaNacimientoColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_FechaNacimiento' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.Pac_FechaNacimientoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_FechaAlta() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.Pac_FechaAltaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_FechaAlta' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.Pac_FechaAltaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_FechaCancelacion() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.Pac_FechaCancelacionColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_FechaCancelacion' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.Pac_FechaCancelacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_EstadoCivil() As String
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.Pac_EstadoCivilColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_EstadoCivil' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.Pac_EstadoCivilColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_Sexo() As String
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.Pac_SexoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_Sexo' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.Pac_SexoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_Ocupacion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.Pac_OcupacionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_Ocupacion' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.Pac_OcupacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_Nacionalidad() As String
            Get
                Try 
                    Return CType(Me(Me.tablePacientes.Pac_NacionalidadColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_Nacionalidad' de la tabla 'Pacientes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientes.Pac_NacionalidadColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TiposDocumentoRow() As TiposDocumentoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TipoDocumentoPaciente")),TiposDocumentoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TipoDocumentoPaciente"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDOC_KeyNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.TDOC_KeyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDOC_KeyNull()
            Me(Me.tablePacientes.TDOC_KeyColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_NumeroDocNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.Pac_NumeroDocColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_NumeroDocNull()
            Me(Me.tablePacientes.Pac_NumeroDocColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_NombresNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.Pac_NombresColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_NombresNull()
            Me(Me.tablePacientes.Pac_NombresColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_ApellidosNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.Pac_ApellidosColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_ApellidosNull()
            Me(Me.tablePacientes.Pac_ApellidosColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_CalleNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.Pac_CalleColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_CalleNull()
            Me(Me.tablePacientes.Pac_CalleColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_NumeroExtNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.Pac_NumeroExtColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_NumeroExtNull()
            Me(Me.tablePacientes.Pac_NumeroExtColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_NumeroIntNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.Pac_NumeroIntColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_NumeroIntNull()
            Me(Me.tablePacientes.Pac_NumeroIntColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLOCA_KeyNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.LOCA_KeyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLOCA_KeyNull()
            Me(Me.tablePacientes.LOCA_KeyColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_TelefonosNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.Pac_TelefonosColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_TelefonosNull()
            Me(Me.tablePacientes.Pac_TelefonosColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_CelularNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.Pac_CelularColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_CelularNull()
            Me(Me.tablePacientes.Pac_CelularColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_EmailNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.Pac_EmailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_EmailNull()
            Me(Me.tablePacientes.Pac_EmailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_FechaNacimientoNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.Pac_FechaNacimientoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_FechaNacimientoNull()
            Me(Me.tablePacientes.Pac_FechaNacimientoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_FechaAltaNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.Pac_FechaAltaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_FechaAltaNull()
            Me(Me.tablePacientes.Pac_FechaAltaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_FechaCancelacionNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.Pac_FechaCancelacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_FechaCancelacionNull()
            Me(Me.tablePacientes.Pac_FechaCancelacionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_EstadoCivilNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.Pac_EstadoCivilColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_EstadoCivilNull()
            Me(Me.tablePacientes.Pac_EstadoCivilColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_SexoNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.Pac_SexoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_SexoNull()
            Me(Me.tablePacientes.Pac_SexoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_OcupacionNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.Pac_OcupacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_OcupacionNull()
            Me(Me.tablePacientes.Pac_OcupacionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_NacionalidadNull() As Boolean
            Return Me.IsNull(Me.tablePacientes.Pac_NacionalidadColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_NacionalidadNull()
            Me(Me.tablePacientes.Pac_NacionalidadColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDetalleHistoriaClinicaRows() As DetalleHistoriaClinicaRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PacientesDetalleHistoriaClinica")),DetalleHistoriaClinicaRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFacturasRows() As FacturasRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PacientesFacturas")),FacturasRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetLocalidadesRows() As LocalidadesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PacientesLocalidades")),LocalidadesRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPacientexPlanRows() As PacientexPlanRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PacientesPacientexPlan")),PacientexPlanRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTurnosRows() As TurnosRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PacientesTurnos")),TurnosRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PacientexPlanRow
        Inherits System.Data.DataRow
        
        Private tablePacientexPlan As PacientexPlanDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePacientexPlan = CType(Me.Table,PacientexPlanDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PacxP_Key() As Integer
            Get
                Return CType(Me(Me.tablePacientexPlan.PacxP_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tablePacientexPlan.PacxP_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plan_Key() As Integer
            Get
                Return CType(Me(Me.tablePacientexPlan.Plan_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tablePacientexPlan.Plan_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OS_Key() As Integer
            Get
                Return CType(Me(Me.tablePacientexPlan.OS_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tablePacientexPlan.OS_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PacxP_FechaInicio() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePacientexPlan.PacxP_FechaInicioColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PacxP_FechaInicio' de la tabla 'PacientexPlan' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientexPlan.PacxP_FechaInicioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PacxP_FechaFin() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePacientexPlan.PacxP_FechaFinColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PacxP_FechaFin' de la tabla 'PacientexPlan' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePacientexPlan.PacxP_FechaFinColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PacientesRow() As PacientesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PacientesPacientexPlan")),PacientesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PacientesPacientexPlan"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanesRowParent() As PlanesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PlanesPacientexPlan")),PlanesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PlanesPacientexPlan"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPacxP_FechaInicioNull() As Boolean
            Return Me.IsNull(Me.tablePacientexPlan.PacxP_FechaInicioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPacxP_FechaInicioNull()
            Me(Me.tablePacientexPlan.PacxP_FechaInicioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPacxP_FechaFinNull() As Boolean
            Return Me.IsNull(Me.tablePacientexPlan.PacxP_FechaFinColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPacxP_FechaFinNull()
            Me(Me.tablePacientexPlan.PacxP_FechaFinColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PlanesRow
        Inherits System.Data.DataRow
        
        Private tablePlanes As PlanesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanes = CType(Me.Table,PlanesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plan_Key() As Integer
            Get
                Return CType(Me(Me.tablePlanes.Plan_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tablePlanes.Plan_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OS_Key() As Integer
            Get
                Return CType(Me(Me.tablePlanes.OS_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tablePlanes.OS_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plan_Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanes.Plan_NombreColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Plan_Nombre' de la tabla 'Planes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanes.Plan_NombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plan_Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanes.Plan_DescripcionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Plan_Descripcion' de la tabla 'Planes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanes.Plan_DescripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plan_FechaFinConvenio() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePlanes.Plan_FechaFinConvenioColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Plan_FechaFinConvenio' de la tabla 'Planes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanes.Plan_FechaFinConvenioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plan_FechaAlta() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePlanes.Plan_FechaAltaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Plan_FechaAlta' de la tabla 'Planes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanes.Plan_FechaAltaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plan_FechaCancelacion() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePlanes.Plan_FechaCancelacionColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Plan_FechaCancelacion' de la tabla 'Planes' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanes.Plan_FechaCancelacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObrasSocialesRow() As ObrasSocialesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ObrasSocialesPlanes")),ObrasSocialesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ObrasSocialesPlanes"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlan_NombreNull() As Boolean
            Return Me.IsNull(Me.tablePlanes.Plan_NombreColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlan_NombreNull()
            Me(Me.tablePlanes.Plan_NombreColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlan_DescripcionNull() As Boolean
            Return Me.IsNull(Me.tablePlanes.Plan_DescripcionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlan_DescripcionNull()
            Me(Me.tablePlanes.Plan_DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlan_FechaFinConvenioNull() As Boolean
            Return Me.IsNull(Me.tablePlanes.Plan_FechaFinConvenioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlan_FechaFinConvenioNull()
            Me(Me.tablePlanes.Plan_FechaFinConvenioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlan_FechaAltaNull() As Boolean
            Return Me.IsNull(Me.tablePlanes.Plan_FechaAltaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlan_FechaAltaNull()
            Me(Me.tablePlanes.Plan_FechaAltaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlan_FechaCancelacionNull() As Boolean
            Return Me.IsNull(Me.tablePlanes.Plan_FechaCancelacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlan_FechaCancelacionNull()
            Me(Me.tablePlanes.Plan_FechaCancelacionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPacientexPlanRows() As PacientexPlanRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PlanesPacientexPlan")),PacientexPlanRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPracticaMedicaxPlanRows() As PracticaMedicaxPlanRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PlanesPracticaMedicaxObraSocial")),PracticaMedicaxPlanRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PracticaMedicaxPlanRow
        Inherits System.Data.DataRow
        
        Private tablePracticaMedicaxPlan As PracticaMedicaxPlanDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePracticaMedicaxPlan = CType(Me.Table,PracticaMedicaxPlanDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PMxP_Key() As Integer
            Get
                Return CType(Me(Me.tablePracticaMedicaxPlan.PMxP_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tablePracticaMedicaxPlan.PMxP_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Plan_Key() As Integer
            Get
                Return CType(Me(Me.tablePracticaMedicaxPlan.Plan_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tablePracticaMedicaxPlan.Plan_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OS_Key() As Integer
            Get
                Return CType(Me(Me.tablePracticaMedicaxPlan.OS_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tablePracticaMedicaxPlan.OS_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PMxP_PorcentajeDescuento() As Single
            Get
                Try 
                    Return CType(Me(Me.tablePracticaMedicaxPlan.PMxP_PorcentajeDescuentoColumn),Single)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PMxP_PorcentajeDescuento' de la tabla 'PracticaMedicaxPla"& _ 
                            "n' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePracticaMedicaxPlan.PMxP_PorcentajeDescuentoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanesRowParent() As PlanesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PlanesPracticaMedicaxObraSocial")),PlanesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PlanesPracticaMedicaxObraSocial"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PracticasMedicasRow() As PracticasMedicasRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PracticasMedicasPracticaMedicaxObraSocial")),PracticasMedicasRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PracticasMedicasPracticaMedicaxObraSocial"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPMxP_PorcentajeDescuentoNull() As Boolean
            Return Me.IsNull(Me.tablePracticaMedicaxPlan.PMxP_PorcentajeDescuentoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPMxP_PorcentajeDescuentoNull()
            Me(Me.tablePracticaMedicaxPlan.PMxP_PorcentajeDescuentoColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PracticasMedicasRow
        Inherits System.Data.DataRow
        
        Private tablePracticasMedicas As PracticasMedicasDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePracticasMedicas = CType(Me.Table,PracticasMedicasDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PM_Key() As Integer
            Get
                Return CType(Me(Me.tablePracticasMedicas.PM_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tablePracticasMedicas.PM_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PM_Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePracticasMedicas.PM_DescripcionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PM_Descripcion' de la tabla 'PracticasMedicas' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePracticasMedicas.PM_DescripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PM_PrecioUnitario() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablePracticasMedicas.PM_PrecioUnitarioColumn),Decimal)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PM_PrecioUnitario' de la tabla 'PracticasMedicas' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePracticasMedicas.PM_PrecioUnitarioColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPM_DescripcionNull() As Boolean
            Return Me.IsNull(Me.tablePracticasMedicas.PM_DescripcionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPM_DescripcionNull()
            Me(Me.tablePracticasMedicas.PM_DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPM_PrecioUnitarioNull() As Boolean
            Return Me.IsNull(Me.tablePracticasMedicas.PM_PrecioUnitarioColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPM_PrecioUnitarioNull()
            Me(Me.tablePracticasMedicas.PM_PrecioUnitarioColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFacturasRows() As FacturasRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PracticasMedicasFacturas")),FacturasRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPracticaMedicaxPlanRows() As PracticaMedicaxPlanRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PracticasMedicasPracticaMedicaxObraSocial")),PracticaMedicaxPlanRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ProvinciasRow
        Inherits System.Data.DataRow
        
        Private tableProvincias As ProvinciasDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableProvincias = CType(Me.Table,ProvinciasDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROV_Key() As Integer
            Get
                Return CType(Me(Me.tableProvincias.PROV_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tableProvincias.PROV_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PROV_Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableProvincias.PROV_NombreColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'PROV_Nombre' de la tabla 'Provincias' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableProvincias.PROV_NombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPROV_NombreNull() As Boolean
            Return Me.IsNull(Me.tableProvincias.PROV_NombreColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPROV_NombreNull()
            Me(Me.tableProvincias.PROV_NombreColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetLocalidadesRows() As LocalidadesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ProvinciasLocalidades")),LocalidadesRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYS_ROLESRow
        Inherits System.Data.DataRow
        
        Private tableSYS_ROLES As SYS_ROLESDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYS_ROLES = CType(Me.Table,SYS_ROLESDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYS_ROLE_KEY() As Integer
            Get
                Return CType(Me(Me.tableSYS_ROLES.SYS_ROLE_KEYColumn),Integer)
            End Get
            Set
                Me(Me.tableSYS_ROLES.SYS_ROLE_KEYColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYS_ROLE_Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYS_ROLES.SYS_ROLE_DescripcionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SYS_ROLE_Descripcion' de la tabla 'SYS_ROLES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYS_ROLES.SYS_ROLE_DescripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYS_ROLE_Enabled() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSYS_ROLES.SYS_ROLE_EnabledColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SYS_ROLE_Enabled' de la tabla 'SYS_ROLES' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYS_ROLES.SYS_ROLE_EnabledColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYS_ROLE_DescripcionNull() As Boolean
            Return Me.IsNull(Me.tableSYS_ROLES.SYS_ROLE_DescripcionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYS_ROLE_DescripcionNull()
            Me(Me.tableSYS_ROLES.SYS_ROLE_DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYS_ROLE_EnabledNull() As Boolean
            Return Me.IsNull(Me.tableSYS_ROLES.SYS_ROLE_EnabledColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYS_ROLE_EnabledNull()
            Me(Me.tableSYS_ROLES.SYS_ROLE_EnabledColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSYS_UsuariosRows() As SYS_UsuariosRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SYS_ROLESSYS_Usuarios")),SYS_UsuariosRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SYS_UsuariosRow
        Inherits System.Data.DataRow
        
        Private tableSYS_Usuarios As SYS_UsuariosDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSYS_Usuarios = CType(Me.Table,SYS_UsuariosDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYS_User_Login() As String
            Get
                Return CType(Me(Me.tableSYS_Usuarios.SYS_User_LoginColumn),String)
            End Get
            Set
                Me(Me.tableSYS_Usuarios.SYS_User_LoginColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYS_ROLE_KEY() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSYS_Usuarios.SYS_ROLE_KEYColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SYS_ROLE_KEY' de la tabla 'SYS_Usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYS_Usuarios.SYS_ROLE_KEYColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYS_User_Pass() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYS_Usuarios.SYS_User_PassColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SYS_User_Pass' de la tabla 'SYS_Usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYS_Usuarios.SYS_User_PassColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYS_User_Autorizacion() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSYS_Usuarios.SYS_User_AutorizacionColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SYS_User_Autorizacion' de la tabla 'SYS_Usuarios' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYS_Usuarios.SYS_User_AutorizacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYS_User_Nombre() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYS_Usuarios.SYS_User_NombreColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SYS_User_Nombre' de la tabla 'SYS_Usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYS_Usuarios.SYS_User_NombreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYS_User_Apellido() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYS_Usuarios.SYS_User_ApellidoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SYS_User_Apellido' de la tabla 'SYS_Usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYS_Usuarios.SYS_User_ApellidoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDOC_Key() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSYS_Usuarios.TDOC_KeyColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'TDOC_Key' de la tabla 'SYS_Usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYS_Usuarios.TDOC_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYS_User_DNI() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYS_Usuarios.SYS_User_DNIColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SYS_User_DNI' de la tabla 'SYS_Usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYS_Usuarios.SYS_User_DNIColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYS_User_Telefono() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYS_Usuarios.SYS_User_TelefonoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SYS_User_Telefono' de la tabla 'SYS_Usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYS_Usuarios.SYS_User_TelefonoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYS_User_email() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYS_Usuarios.SYS_User_emailColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SYS_User_email' de la tabla 'SYS_Usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYS_Usuarios.SYS_User_emailColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYS_User_Direccion() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYS_Usuarios.SYS_User_DireccionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SYS_User_Direccion' de la tabla 'SYS_Usuarios' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableSYS_Usuarios.SYS_User_DireccionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYS_User_Celular() As String
            Get
                Try 
                    Return CType(Me(Me.tableSYS_Usuarios.SYS_User_CelularColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'SYS_User_Celular' de la tabla 'SYS_Usuarios' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSYS_Usuarios.SYS_User_CelularColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SYS_ROLESRow() As SYS_ROLESRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SYS_ROLESSYS_Usuarios")),SYS_ROLESRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SYS_ROLESSYS_Usuarios"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TiposDocumentoRow() As TiposDocumentoRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TiposDocumentoSYS_Usuarios")),TiposDocumentoRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TiposDocumentoSYS_Usuarios"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYS_ROLE_KEYNull() As Boolean
            Return Me.IsNull(Me.tableSYS_Usuarios.SYS_ROLE_KEYColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYS_ROLE_KEYNull()
            Me(Me.tableSYS_Usuarios.SYS_ROLE_KEYColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYS_User_PassNull() As Boolean
            Return Me.IsNull(Me.tableSYS_Usuarios.SYS_User_PassColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYS_User_PassNull()
            Me(Me.tableSYS_Usuarios.SYS_User_PassColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYS_User_AutorizacionNull() As Boolean
            Return Me.IsNull(Me.tableSYS_Usuarios.SYS_User_AutorizacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYS_User_AutorizacionNull()
            Me(Me.tableSYS_Usuarios.SYS_User_AutorizacionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYS_User_NombreNull() As Boolean
            Return Me.IsNull(Me.tableSYS_Usuarios.SYS_User_NombreColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYS_User_NombreNull()
            Me(Me.tableSYS_Usuarios.SYS_User_NombreColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYS_User_ApellidoNull() As Boolean
            Return Me.IsNull(Me.tableSYS_Usuarios.SYS_User_ApellidoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYS_User_ApellidoNull()
            Me(Me.tableSYS_Usuarios.SYS_User_ApellidoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDOC_KeyNull() As Boolean
            Return Me.IsNull(Me.tableSYS_Usuarios.TDOC_KeyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDOC_KeyNull()
            Me(Me.tableSYS_Usuarios.TDOC_KeyColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYS_User_DNINull() As Boolean
            Return Me.IsNull(Me.tableSYS_Usuarios.SYS_User_DNIColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYS_User_DNINull()
            Me(Me.tableSYS_Usuarios.SYS_User_DNIColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYS_User_TelefonoNull() As Boolean
            Return Me.IsNull(Me.tableSYS_Usuarios.SYS_User_TelefonoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYS_User_TelefonoNull()
            Me(Me.tableSYS_Usuarios.SYS_User_TelefonoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYS_User_emailNull() As Boolean
            Return Me.IsNull(Me.tableSYS_Usuarios.SYS_User_emailColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYS_User_emailNull()
            Me(Me.tableSYS_Usuarios.SYS_User_emailColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYS_User_DireccionNull() As Boolean
            Return Me.IsNull(Me.tableSYS_Usuarios.SYS_User_DireccionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYS_User_DireccionNull()
            Me(Me.tableSYS_Usuarios.SYS_User_DireccionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSYS_User_CelularNull() As Boolean
            Return Me.IsNull(Me.tableSYS_Usuarios.SYS_User_CelularColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSYS_User_CelularNull()
            Me(Me.tableSYS_Usuarios.SYS_User_CelularColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TiposDocumentoRow
        Inherits System.Data.DataRow
        
        Private tableTiposDocumento As TiposDocumentoDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTiposDocumento = CType(Me.Table,TiposDocumentoDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDOC_Key() As Integer
            Get
                Return CType(Me(Me.tableTiposDocumento.TDOC_KeyColumn),Integer)
            End Get
            Set
                Me(Me.tableTiposDocumento.TDOC_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TDOC_Descripcion() As String
            Get
                Try 
                    Return CType(Me(Me.tableTiposDocumento.TDOC_DescripcionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'TDOC_Descripcion' de la tabla 'TiposDocumento' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTiposDocumento.TDOC_DescripcionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDOC_DescripcionNull() As Boolean
            Return Me.IsNull(Me.tableTiposDocumento.TDOC_DescripcionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDOC_DescripcionNull()
            Me(Me.tableTiposDocumento.TDOC_DescripcionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMedicosRows() As MedicosRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TipoDocumentoMedico")),MedicosRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPacientesRows() As PacientesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TipoDocumentoPaciente")),PacientesRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSYS_UsuariosRows() As SYS_UsuariosRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TiposDocumentoSYS_Usuarios")),SYS_UsuariosRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TurnosRow
        Inherits System.Data.DataRow
        
        Private tableTurnos As TurnosDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTurnos = CType(Me.Table,TurnosDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property turno_key() As Integer
            Get
                Return CType(Me(Me.tableTurnos.turno_keyColumn),Integer)
            End Get
            Set
                Me(Me.tableTurnos.turno_keyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Turno_Fecha() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTurnos.Turno_FechaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Turno_Fecha' de la tabla 'Turnos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTurnos.Turno_FechaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Turno_Hora() As String
            Get
                Try 
                    Return CType(Me(Me.tableTurnos.Turno_HoraColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Turno_Hora' de la tabla 'Turnos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTurnos.Turno_HoraColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Pac_Key() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTurnos.Pac_KeyColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Pac_Key' de la tabla 'Turnos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTurnos.Pac_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Med_Key() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTurnos.Med_KeyColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Med_Key' de la tabla 'Turnos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTurnos.Med_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Turno_Estado() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTurnos.Turno_EstadoColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Turno_Estado' de la tabla 'Turnos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTurnos.Turno_EstadoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Turno_FechaAlta() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTurnos.Turno_FechaAltaColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Turno_FechaAlta' de la tabla 'Turnos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTurnos.Turno_FechaAltaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Turno_FechaCancelacion() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTurnos.Turno_FechaCancelacionColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'Turno_FechaCancelacion' de la tabla 'Turnos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTurnos.Turno_FechaCancelacionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MOVI_Key() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTurnos.MOVI_KeyColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("El valor de la columna 'MOVI_Key' de la tabla 'Turnos' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTurnos.MOVI_KeyColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MedicosRow() As MedicosRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("MedicosTurnos")),MedicosRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("MedicosTurnos"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MotivoVisitaRow() As MotivoVisitaRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Motivo VisitaTurnos")),MotivoVisitaRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Motivo VisitaTurnos"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PacientesRow() As PacientesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PacientesTurnos")),PacientesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PacientesTurnos"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTurno_FechaNull() As Boolean
            Return Me.IsNull(Me.tableTurnos.Turno_FechaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTurno_FechaNull()
            Me(Me.tableTurnos.Turno_FechaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTurno_HoraNull() As Boolean
            Return Me.IsNull(Me.tableTurnos.Turno_HoraColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTurno_HoraNull()
            Me(Me.tableTurnos.Turno_HoraColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPac_KeyNull() As Boolean
            Return Me.IsNull(Me.tableTurnos.Pac_KeyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPac_KeyNull()
            Me(Me.tableTurnos.Pac_KeyColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMed_KeyNull() As Boolean
            Return Me.IsNull(Me.tableTurnos.Med_KeyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMed_KeyNull()
            Me(Me.tableTurnos.Med_KeyColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTurno_EstadoNull() As Boolean
            Return Me.IsNull(Me.tableTurnos.Turno_EstadoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTurno_EstadoNull()
            Me(Me.tableTurnos.Turno_EstadoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTurno_FechaAltaNull() As Boolean
            Return Me.IsNull(Me.tableTurnos.Turno_FechaAltaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTurno_FechaAltaNull()
            Me(Me.tableTurnos.Turno_FechaAltaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTurno_FechaCancelacionNull() As Boolean
            Return Me.IsNull(Me.tableTurnos.Turno_FechaCancelacionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTurno_FechaCancelacionNull()
            Me(Me.tableTurnos.Turno_FechaCancelacionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMOVI_KeyNull() As Boolean
            Return Me.IsNull(Me.tableTurnos.MOVI_KeyColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMOVI_KeyNull()
            Me(Me.tableTurnos.MOVI_KeyColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ConsultoriosRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ConsultoriosRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ConsultoriosRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ConsultoriosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DetalleHistoriaClinicaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DetalleHistoriaClinicaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DetalleHistoriaClinicaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DetalleHistoriaClinicaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DisponibilidadHorariaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DisponibilidadHorariaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DisponibilidadHorariaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DisponibilidadHorariaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EspecialidadesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As EspecialidadesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EspecialidadesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EspecialidadesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FacturasRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FacturasRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FacturasRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FacturasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LocalidadesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As LocalidadesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LocalidadesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LocalidadesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MedicosRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As MedicosRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MedicosRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MedicosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MotivoVisitaRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As MotivoVisitaRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MotivoVisitaRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MotivoVisitaRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ObrasSocialesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ObrasSocialesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ObrasSocialesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ObrasSocialesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PacientesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PacientesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PacientesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PacientesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PacientexPlanRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PacientexPlanRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PacientexPlanRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PacientexPlanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PlanesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PlanesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PlanesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PlanesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PracticaMedicaxPlanRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PracticaMedicaxPlanRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PracticaMedicaxPlanRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PracticaMedicaxPlanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PracticasMedicasRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PracticasMedicasRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PracticasMedicasRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PracticasMedicasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ProvinciasRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ProvinciasRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ProvinciasRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ProvinciasRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYS_ROLESRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SYS_ROLESRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYS_ROLESRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYS_ROLESRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SYS_UsuariosRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SYS_UsuariosRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SYS_UsuariosRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SYS_UsuariosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TiposDocumentoRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TiposDocumentoRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TiposDocumentoRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TiposDocumentoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TurnosRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TurnosRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TurnosRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TurnosRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace Base2006DataSet3TableAdapters
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ConsultoriosTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Consultorios"
            tableMapping.ColumnMappings.Add("Cons_key", "Cons_key")
            tableMapping.ColumnMappings.Add("Cons_Ubicacion", "Cons_Ubicacion")
            tableMapping.ColumnMappings.Add("Cons_Descripcion", "Cons_Descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Consultorios` WHERE ((`Cons_key` = ?) AND ((? = 1 AND `Cons_Ubicacio"& _ 
                "n` IS NULL) OR (`Cons_Ubicacion` = ?)) AND ((? = 1 AND `Cons_Descripcion` IS NUL"& _ 
                "L) OR (`Cons_Descripcion` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Cons_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Cons_Ubicacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_Ubicacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Cons_Ubicacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_Ubicacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Cons_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Cons_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Consultorios` (`Cons_key`, `Cons_Ubicacion`, `Cons_Descripcion`) VAL"& _ 
                "UES (?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Cons_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Cons_Ubicacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_Ubicacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Cons_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Consultorios` SET `Cons_key` = ?, `Cons_Ubicacion` = ?, `Cons_Descripcion"& _ 
                "` = ? WHERE ((`Cons_key` = ?) AND ((? = 1 AND `Cons_Ubicacion` IS NULL) OR (`Con"& _ 
                "s_Ubicacion` = ?)) AND ((? = 1 AND `Cons_Descripcion` IS NULL) OR (`Cons_Descrip"& _ 
                "cion` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Cons_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Cons_Ubicacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_Ubicacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Cons_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Cons_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Cons_Ubicacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_Ubicacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Cons_Ubicacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_Ubicacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Cons_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Cons_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Cons_key, Cons_Ubicacion, Cons_Descripcion FROM Consultorios"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.ConsultoriosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.ConsultoriosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.ConsultoriosDataTable = New Base2006DataSet3.ConsultoriosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.ConsultoriosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "Consultorios")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Cons_key As System.Nullable(Of Integer), ByVal Original_Cons_Ubicacion As String, ByVal Original_Cons_Descripcion As String) As Integer
            If (Original_Cons_key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Cons_key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_Cons_Ubicacion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Cons_Ubicacion,String)
            End If
            If (Original_Cons_Descripcion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Cons_Descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Cons_key As System.Nullable(Of Integer), ByVal Cons_Ubicacion As String, ByVal Cons_Descripcion As String) As Integer
            If (Cons_key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Cons_key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Cons_Ubicacion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Cons_Ubicacion,String)
            End If
            If (Cons_Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Cons_Descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Cons_key As System.Nullable(Of Integer), ByVal Cons_Ubicacion As String, ByVal Cons_Descripcion As String, ByVal Original_Cons_key As System.Nullable(Of Integer), ByVal Original_Cons_Ubicacion As String, ByVal Original_Cons_Descripcion As String) As Integer
            If (Cons_key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Cons_key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Cons_Ubicacion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Cons_Ubicacion,String)
            End If
            If (Cons_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Cons_Descripcion,String)
            End If
            If (Original_Cons_key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_Cons_key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (Original_Cons_Ubicacion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Cons_Ubicacion,String)
            End If
            If (Original_Cons_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Cons_Descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DetalleHistoriaClinicaTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DetalleHistoriaClinica"
            tableMapping.ColumnMappings.Add("Deta_Key", "Deta_Key")
            tableMapping.ColumnMappings.Add("Pac_key", "Pac_key")
            tableMapping.ColumnMappings.Add("Deta_FechaConsulta", "Deta_FechaConsulta")
            tableMapping.ColumnMappings.Add("Deta_Especialidad", "Deta_Especialidad")
            tableMapping.ColumnMappings.Add("Deta_NombresMedico", "Deta_NombresMedico")
            tableMapping.ColumnMappings.Add("Deta_ApellidosMedico", "Deta_ApellidosMedico")
            tableMapping.ColumnMappings.Add("Deta_Descripcion", "Deta_Descripcion")
            tableMapping.ColumnMappings.Add("Deta_Observacion", "Deta_Observacion")
            tableMapping.ColumnMappings.Add("Deta_Diagnostico", "Deta_Diagnostico")
            tableMapping.ColumnMappings.Add("Deta_Medicacion", "Deta_Medicacion")
            tableMapping.ColumnMappings.Add("Deta_Tratamiento", "Deta_Tratamiento")
            tableMapping.ColumnMappings.Add("Deta_DuracionTratamiento", "Deta_DuracionTratamiento")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `DetalleHistoriaClinica` WHERE ((`Deta_Key` = ?) AND ((? = 1 AND `Pac"& _ 
                "_key` IS NULL) OR (`Pac_key` = ?)) AND ((? = 1 AND `Deta_FechaConsulta` IS NULL)"& _ 
                " OR (`Deta_FechaConsulta` = ?)) AND ((? = 1 AND `Deta_Especialidad` IS NULL) OR "& _ 
                "(`Deta_Especialidad` = ?)) AND ((? = 1 AND `Deta_NombresMedico` IS NULL) OR (`De"& _ 
                "ta_NombresMedico` = ?)) AND ((? = 1 AND `Deta_ApellidosMedico` IS NULL) OR (`Det"& _ 
                "a_ApellidosMedico` = ?)) AND ((? = 1 AND `Deta_Descripcion` IS NULL) OR (`Deta_D"& _ 
                "escripcion` = ?)) AND ((? = 1 AND `Deta_Observacion` IS NULL) OR (`Deta_Observac"& _ 
                "ion` = ?)) AND ((? = 1 AND `Deta_Diagnostico` IS NULL) OR (`Deta_Diagnostico` = "& _ 
                "?)) AND ((? = 1 AND `Deta_Medicacion` IS NULL) OR (`Deta_Medicacion` = ?)) AND ("& _ 
                "(? = 1 AND `Deta_Tratamiento` IS NULL) OR (`Deta_Tratamiento` = ?)) AND ((? = 1 "& _ 
                "AND `Deta_DuracionTratamiento` IS NULL) OR (`Deta_DuracionTratamiento` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_FechaConsulta", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_FechaConsulta", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_FechaConsulta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_FechaConsulta", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_Especialidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Especialidad", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_Especialidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Especialidad", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_NombresMedico", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_NombresMedico", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_NombresMedico", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_NombresMedico", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_ApellidosMedico", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_ApellidosMedico", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_ApellidosMedico", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_ApellidosMedico", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_Observacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Observacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_Observacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Observacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_Diagnostico", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Diagnostico", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_Diagnostico", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Diagnostico", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_Medicacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Medicacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_Medicacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Medicacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_Tratamiento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Tratamiento", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_Tratamiento", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Tratamiento", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_DuracionTratamiento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_DuracionTratamiento", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_DuracionTratamiento", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_DuracionTratamiento", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `DetalleHistoriaClinica` (`Pac_key`, `Deta_FechaConsulta`, `Deta_Espe"& _ 
                "cialidad`, `Deta_NombresMedico`, `Deta_ApellidosMedico`, `Deta_Descripcion`, `De"& _ 
                "ta_Observacion`, `Deta_Diagnostico`, `Deta_Medicacion`, `Deta_Tratamiento`, `Det"& _ 
                "a_DuracionTratamiento`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_FechaConsulta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_FechaConsulta", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_Especialidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Especialidad", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_NombresMedico", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_NombresMedico", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_ApellidosMedico", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_ApellidosMedico", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_Observacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Observacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_Diagnostico", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Diagnostico", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_Medicacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Medicacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_Tratamiento", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Tratamiento", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_DuracionTratamiento", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_DuracionTratamiento", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `DetalleHistoriaClinica` SET `Pac_key` = ?, `Deta_FechaConsulta` = ?, `Det"& _ 
                "a_Especialidad` = ?, `Deta_NombresMedico` = ?, `Deta_ApellidosMedico` = ?, `Deta"& _ 
                "_Descripcion` = ?, `Deta_Observacion` = ?, `Deta_Diagnostico` = ?, `Deta_Medicac"& _ 
                "ion` = ?, `Deta_Tratamiento` = ?, `Deta_DuracionTratamiento` = ? WHERE ((`Deta_K"& _ 
                "ey` = ?) AND ((? = 1 AND `Pac_key` IS NULL) OR (`Pac_key` = ?)) AND ((? = 1 AND "& _ 
                "`Deta_FechaConsulta` IS NULL) OR (`Deta_FechaConsulta` = ?)) AND ((? = 1 AND `De"& _ 
                "ta_Especialidad` IS NULL) OR (`Deta_Especialidad` = ?)) AND ((? = 1 AND `Deta_No"& _ 
                "mbresMedico` IS NULL) OR (`Deta_NombresMedico` = ?)) AND ((? = 1 AND `Deta_Apell"& _ 
                "idosMedico` IS NULL) OR (`Deta_ApellidosMedico` = ?)) AND ((? = 1 AND `Deta_Desc"& _ 
                "ripcion` IS NULL) OR (`Deta_Descripcion` = ?)) AND ((? = 1 AND `Deta_Observacion"& _ 
                "` IS NULL) OR (`Deta_Observacion` = ?)) AND ((? = 1 AND `Deta_Diagnostico` IS NU"& _ 
                "LL) OR (`Deta_Diagnostico` = ?)) AND ((? = 1 AND `Deta_Medicacion` IS NULL) OR ("& _ 
                "`Deta_Medicacion` = ?)) AND ((? = 1 AND `Deta_Tratamiento` IS NULL) OR (`Deta_Tr"& _ 
                "atamiento` = ?)) AND ((? = 1 AND `Deta_DuracionTratamiento` IS NULL) OR (`Deta_D"& _ 
                "uracionTratamiento` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_FechaConsulta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_FechaConsulta", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_Especialidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Especialidad", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_NombresMedico", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_NombresMedico", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_ApellidosMedico", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_ApellidosMedico", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_Observacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Observacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_Diagnostico", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Diagnostico", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_Medicacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Medicacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_Tratamiento", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Tratamiento", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Deta_DuracionTratamiento", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_DuracionTratamiento", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_FechaConsulta", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_FechaConsulta", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_FechaConsulta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_FechaConsulta", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_Especialidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Especialidad", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_Especialidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Especialidad", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_NombresMedico", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_NombresMedico", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_NombresMedico", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_NombresMedico", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_ApellidosMedico", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_ApellidosMedico", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_ApellidosMedico", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_ApellidosMedico", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_Observacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Observacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_Observacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Observacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_Diagnostico", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Diagnostico", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_Diagnostico", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Diagnostico", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_Medicacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Medicacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_Medicacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Medicacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_Tratamiento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Tratamiento", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_Tratamiento", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_Tratamiento", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Deta_DuracionTratamiento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_DuracionTratamiento", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Deta_DuracionTratamiento", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Deta_DuracionTratamiento", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Deta_Key, Pac_key, Deta_FechaConsulta, Deta_Especialidad, Deta_NombresMedi"& _ 
                "co, Deta_ApellidosMedico, Deta_Descripcion, Deta_Observacion, Deta_Diagnostico, "& _ 
                "Deta_Medicacion, Deta_Tratamiento, Deta_DuracionTratamiento FROM DetalleHistoria"& _ 
                "Clinica"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.DetalleHistoriaClinicaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.DetalleHistoriaClinicaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.DetalleHistoriaClinicaDataTable = New Base2006DataSet3.DetalleHistoriaClinicaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.DetalleHistoriaClinicaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "DetalleHistoriaClinica")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Deta_Key As Integer, ByVal Original_Pac_key As System.Nullable(Of Integer), ByVal Original_Deta_FechaConsulta As System.Nullable(Of Date), ByVal Original_Deta_Especialidad As System.Nullable(Of Integer), ByVal Original_Deta_NombresMedico As String, ByVal Original_Deta_ApellidosMedico As String, ByVal Original_Deta_Descripcion As String, ByVal Original_Deta_Observacion As String, ByVal Original_Deta_Diagnostico As String, ByVal Original_Deta_Medicacion As String, ByVal Original_Deta_Tratamiento As String, ByVal Original_Deta_DuracionTratamiento As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Deta_Key,Integer)
            If (Original_Pac_key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Pac_key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_Deta_FechaConsulta.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Deta_FechaConsulta.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_Deta_Especialidad.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Deta_Especialidad.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Original_Deta_NombresMedico Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Deta_NombresMedico,String)
            End If
            If (Original_Deta_ApellidosMedico Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Deta_ApellidosMedico,String)
            End If
            If (Original_Deta_Descripcion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Deta_Descripcion,String)
            End If
            If (Original_Deta_Observacion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Deta_Observacion,String)
            End If
            If (Original_Deta_Diagnostico Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_Deta_Diagnostico,String)
            End If
            If (Original_Deta_Medicacion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Deta_Medicacion,String)
            End If
            If (Original_Deta_Tratamiento Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Deta_Tratamiento,String)
            End If
            If (Original_Deta_DuracionTratamiento Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Deta_DuracionTratamiento,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Pac_key As System.Nullable(Of Integer), ByVal Deta_FechaConsulta As System.Nullable(Of Date), ByVal Deta_Especialidad As System.Nullable(Of Integer), ByVal Deta_NombresMedico As String, ByVal Deta_ApellidosMedico As String, ByVal Deta_Descripcion As String, ByVal Deta_Observacion As String, ByVal Deta_Diagnostico As String, ByVal Deta_Medicacion As String, ByVal Deta_Tratamiento As String, ByVal Deta_DuracionTratamiento As String) As Integer
            If (Pac_key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Pac_key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Deta_FechaConsulta.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Deta_FechaConsulta.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Deta_Especialidad.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Deta_Especialidad.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Deta_NombresMedico Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Deta_NombresMedico,String)
            End If
            If (Deta_ApellidosMedico Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Deta_ApellidosMedico,String)
            End If
            If (Deta_Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Deta_Descripcion,String)
            End If
            If (Deta_Observacion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Deta_Observacion,String)
            End If
            If (Deta_Diagnostico Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Deta_Diagnostico,String)
            End If
            If (Deta_Medicacion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Deta_Medicacion,String)
            End If
            If (Deta_Tratamiento Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Deta_Tratamiento,String)
            End If
            If (Deta_DuracionTratamiento Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Deta_DuracionTratamiento,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Pac_key As System.Nullable(Of Integer),  _
                    ByVal Deta_FechaConsulta As System.Nullable(Of Date),  _
                    ByVal Deta_Especialidad As System.Nullable(Of Integer),  _
                    ByVal Deta_NombresMedico As String,  _
                    ByVal Deta_ApellidosMedico As String,  _
                    ByVal Deta_Descripcion As String,  _
                    ByVal Deta_Observacion As String,  _
                    ByVal Deta_Diagnostico As String,  _
                    ByVal Deta_Medicacion As String,  _
                    ByVal Deta_Tratamiento As String,  _
                    ByVal Deta_DuracionTratamiento As String,  _
                    ByVal Original_Deta_Key As Integer,  _
                    ByVal Original_Pac_key As System.Nullable(Of Integer),  _
                    ByVal Original_Deta_FechaConsulta As System.Nullable(Of Date),  _
                    ByVal Original_Deta_Especialidad As System.Nullable(Of Integer),  _
                    ByVal Original_Deta_NombresMedico As String,  _
                    ByVal Original_Deta_ApellidosMedico As String,  _
                    ByVal Original_Deta_Descripcion As String,  _
                    ByVal Original_Deta_Observacion As String,  _
                    ByVal Original_Deta_Diagnostico As String,  _
                    ByVal Original_Deta_Medicacion As String,  _
                    ByVal Original_Deta_Tratamiento As String,  _
                    ByVal Original_Deta_DuracionTratamiento As String) As Integer
            If (Pac_key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Pac_key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Deta_FechaConsulta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Deta_FechaConsulta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Deta_Especialidad.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Deta_Especialidad.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Deta_NombresMedico Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Deta_NombresMedico,String)
            End If
            If (Deta_ApellidosMedico Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Deta_ApellidosMedico,String)
            End If
            If (Deta_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Deta_Descripcion,String)
            End If
            If (Deta_Observacion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Deta_Observacion,String)
            End If
            If (Deta_Diagnostico Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Deta_Diagnostico,String)
            End If
            If (Deta_Medicacion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Deta_Medicacion,String)
            End If
            If (Deta_Tratamiento Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Deta_Tratamiento,String)
            End If
            If (Deta_DuracionTratamiento Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Deta_DuracionTratamiento,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Deta_Key,Integer)
            If (Original_Pac_key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_Pac_key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (Original_Deta_FechaConsulta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_Deta_FechaConsulta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            End If
            If (Original_Deta_Especialidad.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_Deta_Especialidad.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            End If
            If (Original_Deta_NombresMedico Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Deta_NombresMedico,String)
            End If
            If (Original_Deta_ApellidosMedico Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_Deta_ApellidosMedico,String)
            End If
            If (Original_Deta_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Deta_Descripcion,String)
            End If
            If (Original_Deta_Observacion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Deta_Observacion,String)
            End If
            If (Original_Deta_Diagnostico Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_Deta_Diagnostico,String)
            End If
            If (Original_Deta_Medicacion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_Deta_Medicacion,String)
            End If
            If (Original_Deta_Tratamiento Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_Deta_Tratamiento,String)
            End If
            If (Original_Deta_DuracionTratamiento Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_Deta_DuracionTratamiento,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DisponibilidadHorariaTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "DisponibilidadHoraria"
            tableMapping.ColumnMappings.Add("DSPH_Key", "DSPH_Key")
            tableMapping.ColumnMappings.Add("Med_Key", "Med_Key")
            tableMapping.ColumnMappings.Add("DSPH_DiaSemana", "DSPH_DiaSemana")
            tableMapping.ColumnMappings.Add("DSPH_Duracion", "DSPH_Duracion")
            tableMapping.ColumnMappings.Add("DSPH_HoraInicio", "DSPH_HoraInicio")
            tableMapping.ColumnMappings.Add("DSPH_HoraFin", "DSPH_HoraFin")
            tableMapping.ColumnMappings.Add("DSPH_FechaIni", "DSPH_FechaIni")
            tableMapping.ColumnMappings.Add("DSPH_FechaFin", "DSPH_FechaFin")
            tableMapping.ColumnMappings.Add("DSPH_Novedades", "DSPH_Novedades")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `DisponibilidadHoraria` WHERE ((`DSPH_Key` = ?) AND ((? = 1 AND `Med_"& _ 
                "Key` IS NULL) OR (`Med_Key` = ?)) AND ((? = 1 AND `DSPH_DiaSemana` IS NULL) OR ("& _ 
                "`DSPH_DiaSemana` = ?)) AND ((? = 1 AND `DSPH_Duracion` IS NULL) OR (`DSPH_Duraci"& _ 
                "on` = ?)) AND ((? = 1 AND `DSPH_HoraInicio` IS NULL) OR (`DSPH_HoraInicio` = ?))"& _ 
                " AND ((? = 1 AND `DSPH_HoraFin` IS NULL) OR (`DSPH_HoraFin` = ?)) AND ((? = 1 AN"& _ 
                "D `DSPH_FechaIni` IS NULL) OR (`DSPH_FechaIni` = ?)) AND ((? = 1 AND `DSPH_Fecha"& _ 
                "Fin` IS NULL) OR (`DSPH_FechaFin` = ?)) AND ((? = 1 AND `DSPH_Novedades` IS NULL"& _ 
                ") OR (`DSPH_Novedades` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DSPH_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_DSPH_DiaSemana", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_DiaSemana", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DSPH_DiaSemana", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_DiaSemana", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_DSPH_Duracion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_Duracion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DSPH_Duracion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_Duracion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_DSPH_HoraInicio", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_HoraInicio", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DSPH_HoraInicio", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_HoraInicio", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_DSPH_HoraFin", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_HoraFin", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DSPH_HoraFin", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_HoraFin", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_DSPH_FechaIni", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_FechaIni", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DSPH_FechaIni", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_FechaIni", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_DSPH_FechaFin", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_FechaFin", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DSPH_FechaFin", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_FechaFin", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_DSPH_Novedades", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_Novedades", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DSPH_Novedades", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_Novedades", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `DisponibilidadHoraria` (`DSPH_Key`, `Med_Key`, `DSPH_DiaSemana`, `DS"& _ 
                "PH_Duracion`, `DSPH_HoraInicio`, `DSPH_HoraFin`, `DSPH_FechaIni`, `DSPH_FechaFin"& _ 
                "`, `DSPH_Novedades`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DSPH_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DSPH_DiaSemana", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_DiaSemana", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DSPH_Duracion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_Duracion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DSPH_HoraInicio", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_HoraInicio", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DSPH_HoraFin", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_HoraFin", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DSPH_FechaIni", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_FechaIni", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DSPH_FechaFin", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_FechaFin", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DSPH_Novedades", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_Novedades", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `DisponibilidadHoraria` SET `DSPH_Key` = ?, `Med_Key` = ?, `DSPH_DiaSemana"& _ 
                "` = ?, `DSPH_Duracion` = ?, `DSPH_HoraInicio` = ?, `DSPH_HoraFin` = ?, `DSPH_Fec"& _ 
                "haIni` = ?, `DSPH_FechaFin` = ?, `DSPH_Novedades` = ? WHERE ((`DSPH_Key` = ?) AN"& _ 
                "D ((? = 1 AND `Med_Key` IS NULL) OR (`Med_Key` = ?)) AND ((? = 1 AND `DSPH_DiaSe"& _ 
                "mana` IS NULL) OR (`DSPH_DiaSemana` = ?)) AND ((? = 1 AND `DSPH_Duracion` IS NUL"& _ 
                "L) OR (`DSPH_Duracion` = ?)) AND ((? = 1 AND `DSPH_HoraInicio` IS NULL) OR (`DSP"& _ 
                "H_HoraInicio` = ?)) AND ((? = 1 AND `DSPH_HoraFin` IS NULL) OR (`DSPH_HoraFin` ="& _ 
                " ?)) AND ((? = 1 AND `DSPH_FechaIni` IS NULL) OR (`DSPH_FechaIni` = ?)) AND ((? "& _ 
                "= 1 AND `DSPH_FechaFin` IS NULL) OR (`DSPH_FechaFin` = ?)) AND ((? = 1 AND `DSPH"& _ 
                "_Novedades` IS NULL) OR (`DSPH_Novedades` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DSPH_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DSPH_DiaSemana", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_DiaSemana", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DSPH_Duracion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_Duracion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DSPH_HoraInicio", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_HoraInicio", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DSPH_HoraFin", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_HoraFin", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DSPH_FechaIni", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_FechaIni", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DSPH_FechaFin", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_FechaFin", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("DSPH_Novedades", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_Novedades", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DSPH_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_DSPH_DiaSemana", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_DiaSemana", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DSPH_DiaSemana", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_DiaSemana", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_DSPH_Duracion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_Duracion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DSPH_Duracion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_Duracion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_DSPH_HoraInicio", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_HoraInicio", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DSPH_HoraInicio", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_HoraInicio", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_DSPH_HoraFin", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_HoraFin", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DSPH_HoraFin", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_HoraFin", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_DSPH_FechaIni", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_FechaIni", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DSPH_FechaIni", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_FechaIni", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_DSPH_FechaFin", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_FechaFin", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DSPH_FechaFin", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_FechaFin", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_DSPH_Novedades", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_Novedades", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_DSPH_Novedades", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "DSPH_Novedades", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT DSPH_Key, Med_Key, DSPH_DiaSemana, DSPH_Duracion, DSPH_HoraInicio, DSPH_Ho"& _ 
                "raFin, DSPH_FechaIni, DSPH_FechaFin, DSPH_Novedades FROM DisponibilidadHoraria"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.DisponibilidadHorariaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.DisponibilidadHorariaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.DisponibilidadHorariaDataTable = New Base2006DataSet3.DisponibilidadHorariaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.DisponibilidadHorariaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "DisponibilidadHoraria")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_DSPH_Key As System.Nullable(Of Integer), ByVal Original_Med_Key As System.Nullable(Of Integer), ByVal Original_DSPH_DiaSemana As String, ByVal Original_DSPH_Duracion As System.Nullable(Of Integer), ByVal Original_DSPH_HoraInicio As System.Nullable(Of Date), ByVal Original_DSPH_HoraFin As System.Nullable(Of Date), ByVal Original_DSPH_FechaIni As System.Nullable(Of Date), ByVal Original_DSPH_FechaFin As System.Nullable(Of Date), ByVal Original_DSPH_Novedades As String) As Integer
            If (Original_DSPH_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_DSPH_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_Med_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Med_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_DSPH_DiaSemana Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_DSPH_DiaSemana,String)
            End If
            If (Original_DSPH_Duracion.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_DSPH_Duracion.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Original_DSPH_HoraInicio.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_DSPH_HoraInicio.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (Original_DSPH_HoraFin.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_DSPH_HoraFin.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (Original_DSPH_FechaIni.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_DSPH_FechaIni.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (Original_DSPH_FechaFin.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_DSPH_FechaFin.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (Original_DSPH_Novedades Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_DSPH_Novedades,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DSPH_Key As System.Nullable(Of Integer), ByVal Med_Key As System.Nullable(Of Integer), ByVal DSPH_DiaSemana As String, ByVal DSPH_Duracion As System.Nullable(Of Integer), ByVal DSPH_HoraInicio As System.Nullable(Of Date), ByVal DSPH_HoraFin As System.Nullable(Of Date), ByVal DSPH_FechaIni As System.Nullable(Of Date), ByVal DSPH_FechaFin As System.Nullable(Of Date), ByVal DSPH_Novedades As String) As Integer
            If (DSPH_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(DSPH_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Med_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Med_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (DSPH_DiaSemana Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DSPH_DiaSemana,String)
            End If
            If (DSPH_Duracion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DSPH_Duracion.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (DSPH_HoraInicio.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DSPH_HoraInicio.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (DSPH_HoraFin.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DSPH_HoraFin.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (DSPH_FechaIni.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(DSPH_FechaIni.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (DSPH_FechaFin.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(DSPH_FechaFin.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (DSPH_Novedades Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(DSPH_Novedades,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal DSPH_Key As System.Nullable(Of Integer),  _
                    ByVal Med_Key As System.Nullable(Of Integer),  _
                    ByVal DSPH_DiaSemana As String,  _
                    ByVal DSPH_Duracion As System.Nullable(Of Integer),  _
                    ByVal DSPH_HoraInicio As System.Nullable(Of Date),  _
                    ByVal DSPH_HoraFin As System.Nullable(Of Date),  _
                    ByVal DSPH_FechaIni As System.Nullable(Of Date),  _
                    ByVal DSPH_FechaFin As System.Nullable(Of Date),  _
                    ByVal DSPH_Novedades As String,  _
                    ByVal Original_DSPH_Key As System.Nullable(Of Integer),  _
                    ByVal Original_Med_Key As System.Nullable(Of Integer),  _
                    ByVal Original_DSPH_DiaSemana As String,  _
                    ByVal Original_DSPH_Duracion As System.Nullable(Of Integer),  _
                    ByVal Original_DSPH_HoraInicio As System.Nullable(Of Date),  _
                    ByVal Original_DSPH_HoraFin As System.Nullable(Of Date),  _
                    ByVal Original_DSPH_FechaIni As System.Nullable(Of Date),  _
                    ByVal Original_DSPH_FechaFin As System.Nullable(Of Date),  _
                    ByVal Original_DSPH_Novedades As String) As Integer
            If (DSPH_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DSPH_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Med_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Med_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (DSPH_DiaSemana Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DSPH_DiaSemana,String)
            End If
            If (DSPH_Duracion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DSPH_Duracion.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (DSPH_HoraInicio.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DSPH_HoraInicio.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (DSPH_HoraFin.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DSPH_HoraFin.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (DSPH_FechaIni.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(DSPH_FechaIni.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (DSPH_FechaFin.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(DSPH_FechaFin.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (DSPH_Novedades Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(DSPH_Novedades,String)
            End If
            If (Original_DSPH_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_DSPH_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (Original_Med_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_Med_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (Original_DSPH_DiaSemana Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_DSPH_DiaSemana,String)
            End If
            If (Original_DSPH_Duracion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_DSPH_Duracion.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            End If
            If (Original_DSPH_HoraInicio.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_DSPH_HoraInicio.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            End If
            If (Original_DSPH_HoraFin.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_DSPH_HoraFin.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            End If
            If (Original_DSPH_FechaIni.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_DSPH_FechaIni.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            End If
            If (Original_DSPH_FechaFin.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_DSPH_FechaFin.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
            End If
            If (Original_DSPH_Novedades Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_DSPH_Novedades,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EspecialidadesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Especialidades"
            tableMapping.ColumnMappings.Add("Espe_Especialidad", "Espe_Especialidad")
            tableMapping.ColumnMappings.Add("Espe_Descripcion", "Espe_Descripcion")
            tableMapping.ColumnMappings.Add("Cons_key", "Cons_key")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Especialidades` WHERE ((`Espe_Especialidad` = ?) AND ((? = 1 AND `Es"& _ 
                "pe_Descripcion` IS NULL) OR (`Espe_Descripcion` = ?)) AND ((? = 1 AND `Cons_key`"& _ 
                " IS NULL) OR (`Cons_key` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Espe_Especialidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Espe_Especialidad", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Espe_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Espe_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Espe_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Espe_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Cons_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Cons_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Especialidades` (`Espe_Especialidad`, `Espe_Descripcion`, `Cons_key`"& _ 
                ") VALUES (?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Espe_Especialidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Espe_Especialidad", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Espe_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Espe_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Cons_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Especialidades` SET `Espe_Especialidad` = ?, `Espe_Descripcion` = ?, `Con"& _ 
                "s_key` = ? WHERE ((`Espe_Especialidad` = ?) AND ((? = 1 AND `Espe_Descripcion` I"& _ 
                "S NULL) OR (`Espe_Descripcion` = ?)) AND ((? = 1 AND `Cons_key` IS NULL) OR (`Co"& _ 
                "ns_key` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Espe_Especialidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Espe_Especialidad", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Espe_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Espe_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Cons_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Espe_Especialidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Espe_Especialidad", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Espe_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Espe_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Espe_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Espe_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Cons_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Cons_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Cons_key", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Espe_Especialidad, Espe_Descripcion, Cons_key FROM Especialidades"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.EspecialidadesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.EspecialidadesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.EspecialidadesDataTable = New Base2006DataSet3.EspecialidadesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.EspecialidadesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "Especialidades")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Espe_Especialidad As System.Nullable(Of Integer), ByVal Original_Espe_Descripcion As String, ByVal Original_Cons_key As System.Nullable(Of Integer)) As Integer
            If (Original_Espe_Especialidad.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Espe_Especialidad.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_Espe_Descripcion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Espe_Descripcion,String)
            End If
            If (Original_Cons_key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Cons_key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Espe_Especialidad As System.Nullable(Of Integer), ByVal Espe_Descripcion As String, ByVal Cons_key As System.Nullable(Of Integer)) As Integer
            If (Espe_Especialidad.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Espe_Especialidad.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Espe_Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Espe_Descripcion,String)
            End If
            If (Cons_key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Cons_key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Espe_Especialidad As System.Nullable(Of Integer), ByVal Espe_Descripcion As String, ByVal Cons_key As System.Nullable(Of Integer), ByVal Original_Espe_Especialidad As System.Nullable(Of Integer), ByVal Original_Espe_Descripcion As String, ByVal Original_Cons_key As System.Nullable(Of Integer)) As Integer
            If (Espe_Especialidad.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Espe_Especialidad.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Espe_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Espe_Descripcion,String)
            End If
            If (Cons_key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Cons_key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_Espe_Especialidad.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_Espe_Especialidad.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (Original_Espe_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Espe_Descripcion,String)
            End If
            If (Original_Cons_key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Cons_key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FacturasTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Facturas"
            tableMapping.ColumnMappings.Add("Fact_Key", "Fact_Key")
            tableMapping.ColumnMappings.Add("Pac_Key", "Pac_Key")
            tableMapping.ColumnMappings.Add("Fact_FechaFactura", "Fact_FechaFactura")
            tableMapping.ColumnMappings.Add("Fact_Tipo", "Fact_Tipo")
            tableMapping.ColumnMappings.Add("Fact_Monto", "Fact_Monto")
            tableMapping.ColumnMappings.Add("Fact_TipoDoc", "Fact_TipoDoc")
            tableMapping.ColumnMappings.Add("Fact_NumeroDoc", "Fact_NumeroDoc")
            tableMapping.ColumnMappings.Add("Fact_Cantidad", "Fact_Cantidad")
            tableMapping.ColumnMappings.Add("PM_Key", "PM_Key")
            tableMapping.ColumnMappings.Add("Fact_Observacion", "Fact_Observacion")
            tableMapping.ColumnMappings.Add("Fact_FechaAlta", "Fact_FechaAlta")
            tableMapping.ColumnMappings.Add("Fact_FechaCancelacion", "Fact_FechaCancelacion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Facturas` WHERE ((`Fact_Key` = ?) AND ((? = 1 AND `Pac_Key` IS NULL)"& _ 
                " OR (`Pac_Key` = ?)) AND ((? = 1 AND `Fact_FechaFactura` IS NULL) OR (`Fact_Fech"& _ 
                "aFactura` = ?)) AND ((? = 1 AND `Fact_Tipo` IS NULL) OR (`Fact_Tipo` = ?)) AND ("& _ 
                "(? = 1 AND `Fact_Monto` IS NULL) OR (`Fact_Monto` = ?)) AND ((? = 1 AND `Fact_Ti"& _ 
                "poDoc` IS NULL) OR (`Fact_TipoDoc` = ?)) AND ((? = 1 AND `Fact_NumeroDoc` IS NUL"& _ 
                "L) OR (`Fact_NumeroDoc` = ?)) AND ((? = 1 AND `Fact_Cantidad` IS NULL) OR (`Fact"& _ 
                "_Cantidad` = ?)) AND ((? = 1 AND `PM_Key` IS NULL) OR (`PM_Key` = ?)) AND ((? = "& _ 
                "1 AND `Fact_Observacion` IS NULL) OR (`Fact_Observacion` = ?)) AND ((? = 1 AND `"& _ 
                "Fact_FechaAlta` IS NULL) OR (`Fact_FechaAlta` = ?)) AND ((? = 1 AND `Fact_FechaC"& _ 
                "ancelacion` IS NULL) OR (`Fact_FechaCancelacion` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_FechaFactura", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaFactura", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_FechaFactura", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaFactura", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_Tipo", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Tipo", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_Tipo", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Tipo", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_Monto", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Monto", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_Monto", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Monto", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_TipoDoc", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_TipoDoc", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_TipoDoc", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_TipoDoc", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_NumeroDoc", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_NumeroDoc", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_NumeroDoc", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_NumeroDoc", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_Cantidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Cantidad", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_Cantidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Cantidad", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PM_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PM_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_Observacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Observacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_Observacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Observacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_FechaAlta", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaAlta", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaAlta", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_FechaCancelacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaCancelacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaCancelacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Facturas` (`Fact_Key`, `Pac_Key`, `Fact_FechaFactura`, `Fact_Tipo`, "& _ 
                "`Fact_Monto`, `Fact_TipoDoc`, `Fact_NumeroDoc`, `Fact_Cantidad`, `PM_Key`, `Fact"& _ 
                "_Observacion`, `Fact_FechaAlta`, `Fact_FechaCancelacion`) VALUES (?, ?, ?, ?, ?,"& _ 
                " ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_FechaFactura", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaFactura", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_Tipo", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Tipo", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_Monto", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Monto", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_TipoDoc", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_TipoDoc", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_NumeroDoc", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_NumeroDoc", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_Cantidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Cantidad", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PM_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_Observacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Observacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaAlta", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaCancelacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Facturas` SET `Fact_Key` = ?, `Pac_Key` = ?, `Fact_FechaFactura` = ?, `Fa"& _ 
                "ct_Tipo` = ?, `Fact_Monto` = ?, `Fact_TipoDoc` = ?, `Fact_NumeroDoc` = ?, `Fact_"& _ 
                "Cantidad` = ?, `PM_Key` = ?, `Fact_Observacion` = ?, `Fact_FechaAlta` = ?, `Fact"& _ 
                "_FechaCancelacion` = ? WHERE ((`Fact_Key` = ?) AND ((? = 1 AND `Pac_Key` IS NULL"& _ 
                ") OR (`Pac_Key` = ?)) AND ((? = 1 AND `Fact_FechaFactura` IS NULL) OR (`Fact_Fec"& _ 
                "haFactura` = ?)) AND ((? = 1 AND `Fact_Tipo` IS NULL) OR (`Fact_Tipo` = ?)) AND "& _ 
                "((? = 1 AND `Fact_Monto` IS NULL) OR (`Fact_Monto` = ?)) AND ((? = 1 AND `Fact_T"& _ 
                "ipoDoc` IS NULL) OR (`Fact_TipoDoc` = ?)) AND ((? = 1 AND `Fact_NumeroDoc` IS NU"& _ 
                "LL) OR (`Fact_NumeroDoc` = ?)) AND ((? = 1 AND `Fact_Cantidad` IS NULL) OR (`Fac"& _ 
                "t_Cantidad` = ?)) AND ((? = 1 AND `PM_Key` IS NULL) OR (`PM_Key` = ?)) AND ((? ="& _ 
                " 1 AND `Fact_Observacion` IS NULL) OR (`Fact_Observacion` = ?)) AND ((? = 1 AND "& _ 
                "`Fact_FechaAlta` IS NULL) OR (`Fact_FechaAlta` = ?)) AND ((? = 1 AND `Fact_Fecha"& _ 
                "Cancelacion` IS NULL) OR (`Fact_FechaCancelacion` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_FechaFactura", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaFactura", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_Tipo", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Tipo", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_Monto", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Monto", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_TipoDoc", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_TipoDoc", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_NumeroDoc", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_NumeroDoc", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_Cantidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Cantidad", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PM_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_Observacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Observacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaAlta", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Fact_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaCancelacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_FechaFactura", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaFactura", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_FechaFactura", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaFactura", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_Tipo", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Tipo", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_Tipo", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Tipo", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_Monto", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Monto", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_Monto", System.Data.OleDb.OleDbType.[Double], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Monto", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_TipoDoc", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_TipoDoc", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_TipoDoc", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_TipoDoc", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_NumeroDoc", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_NumeroDoc", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_NumeroDoc", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_NumeroDoc", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_Cantidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Cantidad", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_Cantidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Cantidad", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PM_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PM_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_Observacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Observacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_Observacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_Observacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_FechaAlta", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaAlta", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaAlta", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Fact_FechaCancelacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaCancelacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Fact_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Fact_FechaCancelacion", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Fact_Key, Pac_Key, Fact_FechaFactura, Fact_Tipo, Fact_Monto, Fact_TipoDoc,"& _ 
                " Fact_NumeroDoc, Fact_Cantidad, PM_Key, Fact_Observacion, Fact_FechaAlta, Fact_F"& _ 
                "echaCancelacion FROM Facturas"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.FacturasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.FacturasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.FacturasDataTable = New Base2006DataSet3.FacturasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.FacturasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "Facturas")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Fact_Key As System.Nullable(Of Integer), ByVal Original_Pac_Key As System.Nullable(Of Integer), ByVal Original_Fact_FechaFactura As System.Nullable(Of Date), ByVal Original_Fact_Tipo As String, ByVal Original_Fact_Monto As System.Nullable(Of Double), ByVal Original_Fact_TipoDoc As System.Nullable(Of Integer), ByVal Original_Fact_NumeroDoc As String, ByVal Original_Fact_Cantidad As System.Nullable(Of Integer), ByVal Original_PM_Key As System.Nullable(Of Integer), ByVal Original_Fact_Observacion As String, ByVal Original_Fact_FechaAlta As System.Nullable(Of Date), ByVal Original_Fact_FechaCancelacion As System.Nullable(Of Date)) As Integer
            If (Original_Fact_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Fact_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_Pac_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Pac_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_Fact_FechaFactura.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Fact_FechaFactura.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_Fact_Tipo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Fact_Tipo,String)
            End If
            If (Original_Fact_Monto.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Fact_Monto.Value,Double)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (Original_Fact_TipoDoc.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Fact_TipoDoc.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (Original_Fact_NumeroDoc Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Fact_NumeroDoc,String)
            End If
            If (Original_Fact_Cantidad.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Fact_Cantidad.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (Original_PM_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_PM_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (Original_Fact_Observacion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Fact_Observacion,String)
            End If
            If (Original_Fact_FechaAlta.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Fact_FechaAlta.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (Original_Fact_FechaCancelacion.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Fact_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Fact_Key As System.Nullable(Of Integer), ByVal Pac_Key As System.Nullable(Of Integer), ByVal Fact_FechaFactura As System.Nullable(Of Date), ByVal Fact_Tipo As String, ByVal Fact_Monto As System.Nullable(Of Double), ByVal Fact_TipoDoc As System.Nullable(Of Integer), ByVal Fact_NumeroDoc As String, ByVal Fact_Cantidad As System.Nullable(Of Integer), ByVal PM_Key As System.Nullable(Of Integer), ByVal Fact_Observacion As String, ByVal Fact_FechaAlta As System.Nullable(Of Date), ByVal Fact_FechaCancelacion As System.Nullable(Of Date)) As Integer
            If (Fact_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Fact_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Pac_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Pac_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Fact_FechaFactura.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Fact_FechaFactura.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Fact_Tipo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Fact_Tipo,String)
            End If
            If (Fact_Monto.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Fact_Monto.Value,Double)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Fact_TipoDoc.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Fact_TipoDoc.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Fact_NumeroDoc Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Fact_NumeroDoc,String)
            End If
            If (Fact_Cantidad.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Fact_Cantidad.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (PM_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PM_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (Fact_Observacion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Fact_Observacion,String)
            End If
            If (Fact_FechaAlta.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Fact_FechaAlta.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (Fact_FechaCancelacion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Fact_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Fact_Key As System.Nullable(Of Integer),  _
                    ByVal Pac_Key As System.Nullable(Of Integer),  _
                    ByVal Fact_FechaFactura As System.Nullable(Of Date),  _
                    ByVal Fact_Tipo As String,  _
                    ByVal Fact_Monto As System.Nullable(Of Double),  _
                    ByVal Fact_TipoDoc As System.Nullable(Of Integer),  _
                    ByVal Fact_NumeroDoc As String,  _
                    ByVal Fact_Cantidad As System.Nullable(Of Integer),  _
                    ByVal PM_Key As System.Nullable(Of Integer),  _
                    ByVal Fact_Observacion As String,  _
                    ByVal Fact_FechaAlta As System.Nullable(Of Date),  _
                    ByVal Fact_FechaCancelacion As System.Nullable(Of Date),  _
                    ByVal Original_Fact_Key As System.Nullable(Of Integer),  _
                    ByVal Original_Pac_Key As System.Nullable(Of Integer),  _
                    ByVal Original_Fact_FechaFactura As System.Nullable(Of Date),  _
                    ByVal Original_Fact_Tipo As String,  _
                    ByVal Original_Fact_Monto As System.Nullable(Of Double),  _
                    ByVal Original_Fact_TipoDoc As System.Nullable(Of Integer),  _
                    ByVal Original_Fact_NumeroDoc As String,  _
                    ByVal Original_Fact_Cantidad As System.Nullable(Of Integer),  _
                    ByVal Original_PM_Key As System.Nullable(Of Integer),  _
                    ByVal Original_Fact_Observacion As String,  _
                    ByVal Original_Fact_FechaAlta As System.Nullable(Of Date),  _
                    ByVal Original_Fact_FechaCancelacion As System.Nullable(Of Date)) As Integer
            If (Fact_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Fact_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Pac_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Pac_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Fact_FechaFactura.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Fact_FechaFactura.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Fact_Tipo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Fact_Tipo,String)
            End If
            If (Fact_Monto.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Fact_Monto.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Fact_TipoDoc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Fact_TipoDoc.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Fact_NumeroDoc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Fact_NumeroDoc,String)
            End If
            If (Fact_Cantidad.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Fact_Cantidad.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (PM_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PM_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (Fact_Observacion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Fact_Observacion,String)
            End If
            If (Fact_FechaAlta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Fact_FechaAlta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (Fact_FechaCancelacion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Fact_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (Original_Fact_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Fact_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (Original_Pac_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Pac_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (Original_Fact_FechaFactura.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Fact_FechaFactura.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (Original_Fact_Tipo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Fact_Tipo,String)
            End If
            If (Original_Fact_Monto.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Fact_Monto.Value,Double)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (Original_Fact_TipoDoc.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Fact_TipoDoc.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            End If
            If (Original_Fact_NumeroDoc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Fact_NumeroDoc,String)
            End If
            If (Original_Fact_Cantidad.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Fact_Cantidad.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = System.DBNull.Value
            End If
            If (Original_PM_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_PM_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = System.DBNull.Value
            End If
            If (Original_Fact_Observacion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Fact_Observacion,String)
            End If
            If (Original_Fact_FechaAlta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Fact_FechaAlta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = System.DBNull.Value
            End If
            If (Original_Fact_FechaCancelacion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_Fact_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class LocalidadesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Localidades"
            tableMapping.ColumnMappings.Add("LOCA_Key", "LOCA_Key")
            tableMapping.ColumnMappings.Add("PROV_Key", "PROV_Key")
            tableMapping.ColumnMappings.Add("LOCA_Nombre", "LOCA_Nombre")
            tableMapping.ColumnMappings.Add("LOCA_Codpos", "LOCA_Codpos")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Localidades` WHERE ((`LOCA_Key` = ?) AND (`PROV_Key` = ?) AND ((? = "& _ 
                "1 AND `LOCA_Nombre` IS NULL) OR (`LOCA_Nombre` = ?)) AND ((? = 1 AND `LOCA_Codpo"& _ 
                "s` IS NULL) OR (`LOCA_Codpos` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PROV_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROV_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_LOCA_Nombre", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Nombre", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_LOCA_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Nombre", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_LOCA_Codpos", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Codpos", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_LOCA_Codpos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Codpos", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Localidades` (`LOCA_Key`, `PROV_Key`, `LOCA_Nombre`, `LOCA_Codpos`) "& _ 
                "VALUES (?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PROV_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROV_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("LOCA_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Nombre", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("LOCA_Codpos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Codpos", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Localidades` SET `LOCA_Key` = ?, `PROV_Key` = ?, `LOCA_Nombre` = ?, `LOCA"& _ 
                "_Codpos` = ? WHERE ((`LOCA_Key` = ?) AND (`PROV_Key` = ?) AND ((? = 1 AND `LOCA_"& _ 
                "Nombre` IS NULL) OR (`LOCA_Nombre` = ?)) AND ((? = 1 AND `LOCA_Codpos` IS NULL) "& _ 
                "OR (`LOCA_Codpos` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PROV_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROV_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("LOCA_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Nombre", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("LOCA_Codpos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Codpos", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PROV_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROV_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_LOCA_Nombre", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Nombre", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_LOCA_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Nombre", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_LOCA_Codpos", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Codpos", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_LOCA_Codpos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Codpos", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT LOCA_Key, PROV_Key, LOCA_Nombre, LOCA_Codpos FROM Localidades"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.LocalidadesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.LocalidadesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.LocalidadesDataTable = New Base2006DataSet3.LocalidadesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.LocalidadesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "Localidades")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_LOCA_Key As System.Nullable(Of Integer), ByVal Original_PROV_Key As System.Nullable(Of Integer), ByVal Original_LOCA_Nombre As String, ByVal Original_LOCA_Codpos As String) As Integer
            If (Original_LOCA_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_LOCA_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_PROV_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_PROV_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Original_LOCA_Nombre Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_LOCA_Nombre,String)
            End If
            If (Original_LOCA_Codpos Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_LOCA_Codpos,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal LOCA_Key As System.Nullable(Of Integer), ByVal PROV_Key As System.Nullable(Of Integer), ByVal LOCA_Nombre As String, ByVal LOCA_Codpos As String) As Integer
            If (LOCA_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(LOCA_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (PROV_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PROV_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (LOCA_Nombre Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LOCA_Nombre,String)
            End If
            If (LOCA_Codpos Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LOCA_Codpos,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LOCA_Key As System.Nullable(Of Integer), ByVal PROV_Key As System.Nullable(Of Integer), ByVal LOCA_Nombre As String, ByVal LOCA_Codpos As String, ByVal Original_LOCA_Key As System.Nullable(Of Integer), ByVal Original_PROV_Key As System.Nullable(Of Integer), ByVal Original_LOCA_Nombre As String, ByVal Original_LOCA_Codpos As String) As Integer
            If (LOCA_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LOCA_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (PROV_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PROV_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (LOCA_Nombre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LOCA_Nombre,String)
            End If
            If (LOCA_Codpos Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LOCA_Codpos,String)
            End If
            If (Original_LOCA_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_LOCA_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_PROV_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PROV_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Original_LOCA_Nombre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_LOCA_Nombre,String)
            End If
            If (Original_LOCA_Codpos Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_LOCA_Codpos,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MedicosTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Medicos"
            tableMapping.ColumnMappings.Add("Med_key", "Med_key")
            tableMapping.ColumnMappings.Add("TDOC_Key", "TDOC_Key")
            tableMapping.ColumnMappings.Add("Med_NumeroDoc", "Med_NumeroDoc")
            tableMapping.ColumnMappings.Add("Med_Nombres", "Med_Nombres")
            tableMapping.ColumnMappings.Add("Med_Apellidos", "Med_Apellidos")
            tableMapping.ColumnMappings.Add("Med_Calle", "Med_Calle")
            tableMapping.ColumnMappings.Add("Med_NumeroExt", "Med_NumeroExt")
            tableMapping.ColumnMappings.Add("Med_NumeroInt", "Med_NumeroInt")
            tableMapping.ColumnMappings.Add("LOCA_Key", "LOCA_Key")
            tableMapping.ColumnMappings.Add("Med_Especialidad", "Med_Especialidad")
            tableMapping.ColumnMappings.Add("Med_Matricula", "Med_Matricula")
            tableMapping.ColumnMappings.Add("Med_FechaNacimiento", "Med_FechaNacimiento")
            tableMapping.ColumnMappings.Add("Med_Telefonos", "Med_Telefonos")
            tableMapping.ColumnMappings.Add("Med_Celular", "Med_Celular")
            tableMapping.ColumnMappings.Add("Med_Email", "Med_Email")
            tableMapping.ColumnMappings.Add("Med_EstadoCivil", "Med_EstadoCivil")
            tableMapping.ColumnMappings.Add("Med_Sexo", "Med_Sexo")
            tableMapping.ColumnMappings.Add("Med_FechaIngreso", "Med_FechaIngreso")
            tableMapping.ColumnMappings.Add("Med_Matricula1", "Med_Matricula1")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Medicos` WHERE ((`Med_key` = ?) AND ((? = 1 AND `TDOC_Key` IS NULL) "& _ 
                "OR (`TDOC_Key` = ?)) AND ((? = 1 AND `Med_NumeroDoc` IS NULL) OR (`Med_NumeroDoc"& _ 
                "` = ?)) AND ((? = 1 AND `Med_Nombres` IS NULL) OR (`Med_Nombres` = ?)) AND ((? ="& _ 
                " 1 AND `Med_Apellidos` IS NULL) OR (`Med_Apellidos` = ?)) AND ((? = 1 AND `Med_C"& _ 
                "alle` IS NULL) OR (`Med_Calle` = ?)) AND ((? = 1 AND `Med_NumeroExt` IS NULL) OR"& _ 
                " (`Med_NumeroExt` = ?)) AND ((? = 1 AND `Med_NumeroInt` IS NULL) OR (`Med_Numero"& _ 
                "Int` = ?)) AND ((? = 1 AND `LOCA_Key` IS NULL) OR (`LOCA_Key` = ?)) AND ((? = 1 "& _ 
                "AND `Med_Especialidad` IS NULL) OR (`Med_Especialidad` = ?)) AND ((? = 1 AND `Me"& _ 
                "d_Matricula` IS NULL) OR (`Med_Matricula` = ?)) AND ((? = 1 AND `Med_FechaNacimi"& _ 
                "ento` IS NULL) OR (`Med_FechaNacimiento` = ?)) AND ((? = 1 AND `Med_Telefonos` I"& _ 
                "S NULL) OR (`Med_Telefonos` = ?)) AND ((? = 1 AND `Med_Celular` IS NULL) OR (`Me"& _ 
                "d_Celular` = ?)) AND ((? = 1 AND `Med_Email` IS NULL) OR (`Med_Email` = ?)) AND "& _ 
                "((? = 1 AND `Med_EstadoCivil` IS NULL) OR (`Med_EstadoCivil` = ?)) AND ((? = 1 A"& _ 
                "ND `Med_Sexo` IS NULL) OR (`Med_Sexo` = ?)) AND ((? = 1 AND `Med_FechaIngreso` I"& _ 
                "S NULL) OR (`Med_FechaIngreso` = ?)) AND ((? = 1 AND `Med_Matricula1` IS NULL) O"& _ 
                "R (`Med_Matricula1` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_NumeroDoc", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroDoc", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_NumeroDoc", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroDoc", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Nombres", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Nombres", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Nombres", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Nombres", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Apellidos", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Apellidos", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Apellidos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Apellidos", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Calle", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Calle", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Calle", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Calle", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_NumeroExt", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroExt", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_NumeroExt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroExt", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_NumeroInt", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroInt", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_NumeroInt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroInt", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Especialidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Especialidad", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Especialidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Especialidad", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Matricula", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Matricula", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Matricula", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Matricula", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_FechaNacimiento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_FechaNacimiento", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_FechaNacimiento", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_FechaNacimiento", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Telefonos", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Telefonos", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Telefonos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Telefonos", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Celular", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Celular", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Celular", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Celular", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Email", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Email", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Email", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Email", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_EstadoCivil", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_EstadoCivil", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_EstadoCivil", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_EstadoCivil", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Sexo", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Sexo", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Sexo", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Sexo", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_FechaIngreso", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_FechaIngreso", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_FechaIngreso", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_FechaIngreso", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Matricula1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Matricula1", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Matricula1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Matricula1", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Medicos` (`Med_key`, `TDOC_Key`, `Med_NumeroDoc`, `Med_Nombres`, `Me"& _ 
                "d_Apellidos`, `Med_Calle`, `Med_NumeroExt`, `Med_NumeroInt`, `LOCA_Key`, `Med_Es"& _ 
                "pecialidad`, `Med_Matricula`, `Med_FechaNacimiento`, `Med_Telefonos`, `Med_Celul"& _ 
                "ar`, `Med_Email`, `Med_EstadoCivil`, `Med_Sexo`, `Med_FechaIngreso`, `Med_Matric"& _ 
                "ula1`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_NumeroDoc", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroDoc", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Nombres", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Nombres", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Apellidos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Apellidos", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Calle", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Calle", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_NumeroExt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroExt", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_NumeroInt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroInt", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Especialidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Especialidad", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Matricula", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Matricula", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_FechaNacimiento", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_FechaNacimiento", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Telefonos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Telefonos", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Celular", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Celular", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Email", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Email", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_EstadoCivil", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_EstadoCivil", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Sexo", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Sexo", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_FechaIngreso", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_FechaIngreso", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Matricula1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Matricula1", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Medicos` SET `Med_key` = ?, `TDOC_Key` = ?, `Med_NumeroDoc` = ?, `Med_Nom"& _ 
                "bres` = ?, `Med_Apellidos` = ?, `Med_Calle` = ?, `Med_NumeroExt` = ?, `Med_Numer"& _ 
                "oInt` = ?, `LOCA_Key` = ?, `Med_Especialidad` = ?, `Med_Matricula` = ?, `Med_Fec"& _ 
                "haNacimiento` = ?, `Med_Telefonos` = ?, `Med_Celular` = ?, `Med_Email` = ?, `Med"& _ 
                "_EstadoCivil` = ?, `Med_Sexo` = ?, `Med_FechaIngreso` = ?, `Med_Matricula1` = ? "& _ 
                "WHERE ((`Med_key` = ?) AND ((? = 1 AND `TDOC_Key` IS NULL) OR (`TDOC_Key` = ?)) "& _ 
                "AND ((? = 1 AND `Med_NumeroDoc` IS NULL) OR (`Med_NumeroDoc` = ?)) AND ((? = 1 A"& _ 
                "ND `Med_Nombres` IS NULL) OR (`Med_Nombres` = ?)) AND ((? = 1 AND `Med_Apellidos"& _ 
                "` IS NULL) OR (`Med_Apellidos` = ?)) AND ((? = 1 AND `Med_Calle` IS NULL) OR (`M"& _ 
                "ed_Calle` = ?)) AND ((? = 1 AND `Med_NumeroExt` IS NULL) OR (`Med_NumeroExt` = ?"& _ 
                ")) AND ((? = 1 AND `Med_NumeroInt` IS NULL) OR (`Med_NumeroInt` = ?)) AND ((? = "& _ 
                "1 AND `LOCA_Key` IS NULL) OR (`LOCA_Key` = ?)) AND ((? = 1 AND `Med_Especialidad"& _ 
                "` IS NULL) OR (`Med_Especialidad` = ?)) AND ((? = 1 AND `Med_Matricula` IS NULL)"& _ 
                " OR (`Med_Matricula` = ?)) AND ((? = 1 AND `Med_FechaNacimiento` IS NULL) OR (`M"& _ 
                "ed_FechaNacimiento` = ?)) AND ((? = 1 AND `Med_Telefonos` IS NULL) OR (`Med_Tele"& _ 
                "fonos` = ?)) AND ((? = 1 AND `Med_Celular` IS NULL) OR (`Med_Celular` = ?)) AND "& _ 
                "((? = 1 AND `Med_Email` IS NULL) OR (`Med_Email` = ?)) AND ((? = 1 AND `Med_Esta"& _ 
                "doCivil` IS NULL) OR (`Med_EstadoCivil` = ?)) AND ((? = 1 AND `Med_Sexo` IS NULL"& _ 
                ") OR (`Med_Sexo` = ?)) AND ((? = 1 AND `Med_FechaIngreso` IS NULL) OR (`Med_Fech"& _ 
                "aIngreso` = ?)) AND ((? = 1 AND `Med_Matricula1` IS NULL) OR (`Med_Matricula1` ="& _ 
                " ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_NumeroDoc", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroDoc", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Nombres", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Nombres", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Apellidos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Apellidos", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Calle", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Calle", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_NumeroExt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroExt", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_NumeroInt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroInt", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Especialidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Especialidad", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Matricula", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Matricula", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_FechaNacimiento", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_FechaNacimiento", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Telefonos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Telefonos", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Celular", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Celular", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Email", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Email", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_EstadoCivil", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_EstadoCivil", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Sexo", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Sexo", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_FechaIngreso", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_FechaIngreso", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Matricula1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Matricula1", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_NumeroDoc", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroDoc", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_NumeroDoc", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroDoc", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Nombres", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Nombres", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Nombres", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Nombres", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Apellidos", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Apellidos", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Apellidos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Apellidos", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Calle", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Calle", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Calle", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Calle", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_NumeroExt", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroExt", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_NumeroExt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroExt", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_NumeroInt", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroInt", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_NumeroInt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_NumeroInt", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Especialidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Especialidad", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Especialidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Especialidad", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Matricula", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Matricula", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Matricula", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Matricula", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_FechaNacimiento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_FechaNacimiento", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_FechaNacimiento", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_FechaNacimiento", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Telefonos", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Telefonos", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Telefonos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Telefonos", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Celular", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Celular", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Celular", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Celular", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Email", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Email", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Email", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Email", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_EstadoCivil", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_EstadoCivil", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_EstadoCivil", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_EstadoCivil", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Sexo", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Sexo", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Sexo", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Sexo", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_FechaIngreso", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_FechaIngreso", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_FechaIngreso", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_FechaIngreso", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Matricula1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Matricula1", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Matricula1", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Matricula1", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Med_key, TDOC_Key, Med_NumeroDoc, Med_Nombres, Med_Apellidos, Med_Calle, M"& _ 
                "ed_NumeroExt, Med_NumeroInt, LOCA_Key, Med_Especialidad, Med_Matricula, Med_Fech"& _ 
                "aNacimiento, Med_Telefonos, Med_Celular, Med_Email, Med_EstadoCivil, Med_Sexo, M"& _ 
                "ed_FechaIngreso, Med_Matricula1 FROM Medicos"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.MedicosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.MedicosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.MedicosDataTable = New Base2006DataSet3.MedicosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.MedicosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "Medicos")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_Med_key As System.Nullable(Of Integer),  _
                    ByVal Original_TDOC_Key As System.Nullable(Of Integer),  _
                    ByVal Original_Med_NumeroDoc As String,  _
                    ByVal Original_Med_Nombres As String,  _
                    ByVal Original_Med_Apellidos As String,  _
                    ByVal Original_Med_Calle As String,  _
                    ByVal Original_Med_NumeroExt As String,  _
                    ByVal Original_Med_NumeroInt As String,  _
                    ByVal Original_LOCA_Key As System.Nullable(Of Integer),  _
                    ByVal Original_Med_Especialidad As System.Nullable(Of Integer),  _
                    ByVal Original_Med_Matricula As String,  _
                    ByVal Original_Med_FechaNacimiento As System.Nullable(Of Date),  _
                    ByVal Original_Med_Telefonos As String,  _
                    ByVal Original_Med_Celular As String,  _
                    ByVal Original_Med_Email As String,  _
                    ByVal Original_Med_EstadoCivil As String,  _
                    ByVal Original_Med_Sexo As String,  _
                    ByVal Original_Med_FechaIngreso As String,  _
                    ByVal Original_Med_Matricula1 As System.Nullable(Of Integer)) As Integer
            If (Original_Med_key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Med_key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_TDOC_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TDOC_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_Med_NumeroDoc Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Med_NumeroDoc,String)
            End If
            If (Original_Med_Nombres Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Med_Nombres,String)
            End If
            If (Original_Med_Apellidos Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Med_Apellidos,String)
            End If
            If (Original_Med_Calle Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Med_Calle,String)
            End If
            If (Original_Med_NumeroExt Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Med_NumeroExt,String)
            End If
            If (Original_Med_NumeroInt Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Med_NumeroInt,String)
            End If
            If (Original_LOCA_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_LOCA_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (Original_Med_Especialidad.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Med_Especialidad.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (Original_Med_Matricula Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Med_Matricula,String)
            End If
            If (Original_Med_FechaNacimiento.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Med_FechaNacimiento.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
            End If
            If (Original_Med_Telefonos Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_Med_Telefonos,String)
            End If
            If (Original_Med_Celular Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_Med_Celular,String)
            End If
            If (Original_Med_Email Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_Med_Email,String)
            End If
            If (Original_Med_EstadoCivil Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Med_EstadoCivil,String)
            End If
            If (Original_Med_Sexo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Med_Sexo,String)
            End If
            If (Original_Med_FechaIngreso Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_Med_FechaIngreso,String)
            End If
            If (Original_Med_Matricula1.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_Med_Matricula1.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal Med_key As System.Nullable(Of Integer),  _
                    ByVal TDOC_Key As System.Nullable(Of Integer),  _
                    ByVal Med_NumeroDoc As String,  _
                    ByVal Med_Nombres As String,  _
                    ByVal Med_Apellidos As String,  _
                    ByVal Med_Calle As String,  _
                    ByVal Med_NumeroExt As String,  _
                    ByVal Med_NumeroInt As String,  _
                    ByVal LOCA_Key As System.Nullable(Of Integer),  _
                    ByVal Med_Especialidad As System.Nullable(Of Integer),  _
                    ByVal Med_Matricula As String,  _
                    ByVal Med_FechaNacimiento As System.Nullable(Of Date),  _
                    ByVal Med_Telefonos As String,  _
                    ByVal Med_Celular As String,  _
                    ByVal Med_Email As String,  _
                    ByVal Med_EstadoCivil As String,  _
                    ByVal Med_Sexo As String,  _
                    ByVal Med_FechaIngreso As String,  _
                    ByVal Med_Matricula1 As System.Nullable(Of Integer)) As Integer
            If (Med_key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Med_key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (TDOC_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TDOC_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Med_NumeroDoc Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Med_NumeroDoc,String)
            End If
            If (Med_Nombres Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Med_Nombres,String)
            End If
            If (Med_Apellidos Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Med_Apellidos,String)
            End If
            If (Med_Calle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Med_Calle,String)
            End If
            If (Med_NumeroExt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Med_NumeroExt,String)
            End If
            If (Med_NumeroInt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Med_NumeroInt,String)
            End If
            If (LOCA_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(LOCA_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (Med_Especialidad.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Med_Especialidad.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (Med_Matricula Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Med_Matricula,String)
            End If
            If (Med_FechaNacimiento.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Med_FechaNacimiento.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (Med_Telefonos Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Med_Telefonos,String)
            End If
            If (Med_Celular Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Med_Celular,String)
            End If
            If (Med_Email Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Med_Email,String)
            End If
            If (Med_EstadoCivil Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Med_EstadoCivil,String)
            End If
            If (Med_Sexo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Med_Sexo,String)
            End If
            If (Med_FechaIngreso Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Med_FechaIngreso,String)
            End If
            If (Med_Matricula1.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(Med_Matricula1.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Med_key As System.Nullable(Of Integer),  _
                    ByVal TDOC_Key As System.Nullable(Of Integer),  _
                    ByVal Med_NumeroDoc As String,  _
                    ByVal Med_Nombres As String,  _
                    ByVal Med_Apellidos As String,  _
                    ByVal Med_Calle As String,  _
                    ByVal Med_NumeroExt As String,  _
                    ByVal Med_NumeroInt As String,  _
                    ByVal LOCA_Key As System.Nullable(Of Integer),  _
                    ByVal Med_Especialidad As System.Nullable(Of Integer),  _
                    ByVal Med_Matricula As String,  _
                    ByVal Med_FechaNacimiento As System.Nullable(Of Date),  _
                    ByVal Med_Telefonos As String,  _
                    ByVal Med_Celular As String,  _
                    ByVal Med_Email As String,  _
                    ByVal Med_EstadoCivil As String,  _
                    ByVal Med_Sexo As String,  _
                    ByVal Med_FechaIngreso As String,  _
                    ByVal Med_Matricula1 As System.Nullable(Of Integer),  _
                    ByVal Original_Med_key As System.Nullable(Of Integer),  _
                    ByVal Original_TDOC_Key As System.Nullable(Of Integer),  _
                    ByVal Original_Med_NumeroDoc As String,  _
                    ByVal Original_Med_Nombres As String,  _
                    ByVal Original_Med_Apellidos As String,  _
                    ByVal Original_Med_Calle As String,  _
                    ByVal Original_Med_NumeroExt As String,  _
                    ByVal Original_Med_NumeroInt As String,  _
                    ByVal Original_LOCA_Key As System.Nullable(Of Integer),  _
                    ByVal Original_Med_Especialidad As System.Nullable(Of Integer),  _
                    ByVal Original_Med_Matricula As String,  _
                    ByVal Original_Med_FechaNacimiento As System.Nullable(Of Date),  _
                    ByVal Original_Med_Telefonos As String,  _
                    ByVal Original_Med_Celular As String,  _
                    ByVal Original_Med_Email As String,  _
                    ByVal Original_Med_EstadoCivil As String,  _
                    ByVal Original_Med_Sexo As String,  _
                    ByVal Original_Med_FechaIngreso As String,  _
                    ByVal Original_Med_Matricula1 As System.Nullable(Of Integer)) As Integer
            If (Med_key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Med_key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (TDOC_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TDOC_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Med_NumeroDoc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Med_NumeroDoc,String)
            End If
            If (Med_Nombres Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Med_Nombres,String)
            End If
            If (Med_Apellidos Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Med_Apellidos,String)
            End If
            If (Med_Calle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Med_Calle,String)
            End If
            If (Med_NumeroExt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Med_NumeroExt,String)
            End If
            If (Med_NumeroInt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Med_NumeroInt,String)
            End If
            If (LOCA_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(LOCA_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (Med_Especialidad.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Med_Especialidad.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (Med_Matricula Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Med_Matricula,String)
            End If
            If (Med_FechaNacimiento.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Med_FechaNacimiento.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (Med_Telefonos Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Med_Telefonos,String)
            End If
            If (Med_Celular Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Med_Celular,String)
            End If
            If (Med_Email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Med_Email,String)
            End If
            If (Med_EstadoCivil Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Med_EstadoCivil,String)
            End If
            If (Med_Sexo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Med_Sexo,String)
            End If
            If (Med_FechaIngreso Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Med_FechaIngreso,String)
            End If
            If (Med_Matricula1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Med_Matricula1.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (Original_Med_key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_Med_key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            End If
            If (Original_TDOC_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_TDOC_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            End If
            If (Original_Med_NumeroDoc Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_Med_NumeroDoc,String)
            End If
            If (Original_Med_Nombres Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_Med_Nombres,String)
            End If
            If (Original_Med_Apellidos Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_Med_Apellidos,String)
            End If
            If (Original_Med_Calle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_Med_Calle,String)
            End If
            If (Original_Med_NumeroExt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_Med_NumeroExt,String)
            End If
            If (Original_Med_NumeroInt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_Med_NumeroInt,String)
            End If
            If (Original_LOCA_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_LOCA_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = System.DBNull.Value
            End If
            If (Original_Med_Especialidad.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_Med_Especialidad.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = System.DBNull.Value
            End If
            If (Original_Med_Matricula Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_Med_Matricula,String)
            End If
            If (Original_Med_FechaNacimiento.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_Med_FechaNacimiento.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = System.DBNull.Value
            End If
            If (Original_Med_Telefonos Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_Med_Telefonos,String)
            End If
            If (Original_Med_Celular Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_Med_Celular,String)
            End If
            If (Original_Med_Email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_Med_Email,String)
            End If
            If (Original_Med_EstadoCivil Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_Med_EstadoCivil,String)
            End If
            If (Original_Med_Sexo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_Med_Sexo,String)
            End If
            If (Original_Med_FechaIngreso Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_Med_FechaIngreso,String)
            End If
            If (Original_Med_Matricula1.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_Med_Matricula1.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MotivoVisitaTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MotivoVisita"
            tableMapping.ColumnMappings.Add("MOVI_Key", "MOVI_Key")
            tableMapping.ColumnMappings.Add("MOVI_Motivo", "MOVI_Motivo")
            tableMapping.ColumnMappings.Add("MOVI_Descripcion", "MOVI_Descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `MotivoVisita` WHERE ((`MOVI_Key` = ?) AND ((? = 1 AND `MOVI_Motivo` "& _ 
                "IS NULL) OR (`MOVI_Motivo` = ?)) AND ((? = 1 AND `MOVI_Descripcion` IS NULL) OR "& _ 
                "(`MOVI_Descripcion` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_MOVI_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_MOVI_Motivo", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Motivo", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_MOVI_Motivo", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Motivo", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_MOVI_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_MOVI_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `MotivoVisita` (`MOVI_Key`, `MOVI_Motivo`, `MOVI_Descripcion`) VALUES"& _ 
                " (?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MOVI_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MOVI_Motivo", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Motivo", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MOVI_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `MotivoVisita` SET `MOVI_Key` = ?, `MOVI_Motivo` = ?, `MOVI_Descripcion` ="& _ 
                " ? WHERE ((`MOVI_Key` = ?) AND ((? = 1 AND `MOVI_Motivo` IS NULL) OR (`MOVI_Moti"& _ 
                "vo` = ?)) AND ((? = 1 AND `MOVI_Descripcion` IS NULL) OR (`MOVI_Descripcion` = ?"& _ 
                ")))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MOVI_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MOVI_Motivo", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Motivo", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MOVI_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_MOVI_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_MOVI_Motivo", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Motivo", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_MOVI_Motivo", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Motivo", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_MOVI_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_MOVI_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MOVI_Key, MOVI_Motivo, MOVI_Descripcion FROM MotivoVisita"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.MotivoVisitaDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.MotivoVisitaDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.MotivoVisitaDataTable = New Base2006DataSet3.MotivoVisitaDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.MotivoVisitaDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "MotivoVisita")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MOVI_Key As System.Nullable(Of Integer), ByVal Original_MOVI_Motivo As String, ByVal Original_MOVI_Descripcion As String) As Integer
            If (Original_MOVI_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MOVI_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_MOVI_Motivo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MOVI_Motivo,String)
            End If
            If (Original_MOVI_Descripcion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MOVI_Descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MOVI_Key As System.Nullable(Of Integer), ByVal MOVI_Motivo As String, ByVal MOVI_Descripcion As String) As Integer
            If (MOVI_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MOVI_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (MOVI_Motivo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MOVI_Motivo,String)
            End If
            If (MOVI_Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(MOVI_Descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MOVI_Key As System.Nullable(Of Integer), ByVal MOVI_Motivo As String, ByVal MOVI_Descripcion As String, ByVal Original_MOVI_Key As System.Nullable(Of Integer), ByVal Original_MOVI_Motivo As String, ByVal Original_MOVI_Descripcion As String) As Integer
            If (MOVI_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MOVI_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (MOVI_Motivo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MOVI_Motivo,String)
            End If
            If (MOVI_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(MOVI_Descripcion,String)
            End If
            If (Original_MOVI_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_MOVI_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (Original_MOVI_Motivo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_MOVI_Motivo,String)
            End If
            If (Original_MOVI_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_MOVI_Descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ObrasSocialesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ObrasSociales"
            tableMapping.ColumnMappings.Add("OS_Key", "OS_Key")
            tableMapping.ColumnMappings.Add("OS_Nombre", "OS_Nombre")
            tableMapping.ColumnMappings.Add("OS_Descripcion", "OS_Descripcion")
            tableMapping.ColumnMappings.Add("OS_Calle", "OS_Calle")
            tableMapping.ColumnMappings.Add("OS_NumeroExt", "OS_NumeroExt")
            tableMapping.ColumnMappings.Add("OS_NumeroInt", "OS_NumeroInt")
            tableMapping.ColumnMappings.Add("LOCA_Key", "LOCA_Key")
            tableMapping.ColumnMappings.Add("OS_Telefonos", "OS_Telefonos")
            tableMapping.ColumnMappings.Add("OS_FechaFinConvenio", "OS_FechaFinConvenio")
            tableMapping.ColumnMappings.Add("OS_FechaAlta", "OS_FechaAlta")
            tableMapping.ColumnMappings.Add("OS_FechaCancelacion", "OS_FechaCancelacion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `ObrasSociales` WHERE ((`OS_Key` = ?) AND ((? = 1 AND `OS_Nombre` IS "& _ 
                "NULL) OR (`OS_Nombre` = ?)) AND ((? = 1 AND `OS_Descripcion` IS NULL) OR (`OS_De"& _ 
                "scripcion` = ?)) AND ((? = 1 AND `OS_Calle` IS NULL) OR (`OS_Calle` = ?)) AND (("& _ 
                "? = 1 AND `OS_NumeroExt` IS NULL) OR (`OS_NumeroExt` = ?)) AND ((? = 1 AND `OS_N"& _ 
                "umeroInt` IS NULL) OR (`OS_NumeroInt` = ?)) AND ((? = 1 AND `LOCA_Key` IS NULL) "& _ 
                "OR (`LOCA_Key` = ?)) AND ((? = 1 AND `OS_Telefonos` IS NULL) OR (`OS_Telefonos` "& _ 
                "= ?)) AND ((? = 1 AND `OS_FechaFinConvenio` IS NULL) OR (`OS_FechaFinConvenio` ="& _ 
                " ?)) AND ((? = 1 AND `OS_FechaAlta` IS NULL) OR (`OS_FechaAlta` = ?)) AND ((? = "& _ 
                "1 AND `OS_FechaCancelacion` IS NULL) OR (`OS_FechaCancelacion` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_Nombre", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Nombre", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Nombre", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_Calle", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Calle", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_Calle", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Calle", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_NumeroExt", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_NumeroExt", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_NumeroExt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_NumeroExt", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_NumeroInt", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_NumeroInt", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_NumeroInt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_NumeroInt", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_Telefonos", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Telefonos", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_Telefonos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Telefonos", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_FechaFinConvenio", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaFinConvenio", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_FechaFinConvenio", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaFinConvenio", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_FechaAlta", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaAlta", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaAlta", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_FechaCancelacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaCancelacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaCancelacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `ObrasSociales` (`OS_Key`, `OS_Nombre`, `OS_Descripcion`, `OS_Calle`,"& _ 
                " `OS_NumeroExt`, `OS_NumeroInt`, `LOCA_Key`, `OS_Telefonos`, `OS_FechaFinConveni"& _ 
                "o`, `OS_FechaAlta`, `OS_FechaCancelacion`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?,"& _ 
                " ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Nombre", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_Calle", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Calle", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_NumeroExt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_NumeroExt", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_NumeroInt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_NumeroInt", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_Telefonos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Telefonos", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_FechaFinConvenio", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaFinConvenio", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaAlta", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaCancelacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `ObrasSociales` SET `OS_Key` = ?, `OS_Nombre` = ?, `OS_Descripcion` = ?, `"& _ 
                "OS_Calle` = ?, `OS_NumeroExt` = ?, `OS_NumeroInt` = ?, `LOCA_Key` = ?, `OS_Telef"& _ 
                "onos` = ?, `OS_FechaFinConvenio` = ?, `OS_FechaAlta` = ?, `OS_FechaCancelacion` "& _ 
                "= ? WHERE ((`OS_Key` = ?) AND ((? = 1 AND `OS_Nombre` IS NULL) OR (`OS_Nombre` ="& _ 
                " ?)) AND ((? = 1 AND `OS_Descripcion` IS NULL) OR (`OS_Descripcion` = ?)) AND (("& _ 
                "? = 1 AND `OS_Calle` IS NULL) OR (`OS_Calle` = ?)) AND ((? = 1 AND `OS_NumeroExt"& _ 
                "` IS NULL) OR (`OS_NumeroExt` = ?)) AND ((? = 1 AND `OS_NumeroInt` IS NULL) OR ("& _ 
                "`OS_NumeroInt` = ?)) AND ((? = 1 AND `LOCA_Key` IS NULL) OR (`LOCA_Key` = ?)) AN"& _ 
                "D ((? = 1 AND `OS_Telefonos` IS NULL) OR (`OS_Telefonos` = ?)) AND ((? = 1 AND `"& _ 
                "OS_FechaFinConvenio` IS NULL) OR (`OS_FechaFinConvenio` = ?)) AND ((? = 1 AND `O"& _ 
                "S_FechaAlta` IS NULL) OR (`OS_FechaAlta` = ?)) AND ((? = 1 AND `OS_FechaCancelac"& _ 
                "ion` IS NULL) OR (`OS_FechaCancelacion` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Nombre", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_Calle", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Calle", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_NumeroExt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_NumeroExt", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_NumeroInt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_NumeroInt", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_Telefonos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Telefonos", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_FechaFinConvenio", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaFinConvenio", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaAlta", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaCancelacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_Nombre", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Nombre", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Nombre", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_Calle", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Calle", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_Calle", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Calle", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_NumeroExt", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_NumeroExt", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_NumeroExt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_NumeroExt", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_NumeroInt", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_NumeroInt", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_NumeroInt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_NumeroInt", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_Telefonos", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Telefonos", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_Telefonos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Telefonos", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_FechaFinConvenio", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaFinConvenio", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_FechaFinConvenio", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaFinConvenio", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_FechaAlta", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaAlta", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaAlta", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_OS_FechaCancelacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaCancelacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_FechaCancelacion", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT OS_Key, OS_Nombre, OS_Descripcion, OS_Calle, OS_NumeroExt, OS_NumeroInt, L"& _ 
                "OCA_Key, OS_Telefonos, OS_FechaFinConvenio, OS_FechaAlta, OS_FechaCancelacion FR"& _ 
                "OM ObrasSociales"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.ObrasSocialesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.ObrasSocialesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.ObrasSocialesDataTable = New Base2006DataSet3.ObrasSocialesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.ObrasSocialesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "ObrasSociales")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_OS_Key As System.Nullable(Of Integer), ByVal Original_OS_Nombre As String, ByVal Original_OS_Descripcion As String, ByVal Original_OS_Calle As String, ByVal Original_OS_NumeroExt As String, ByVal Original_OS_NumeroInt As String, ByVal Original_LOCA_Key As System.Nullable(Of Integer), ByVal Original_OS_Telefonos As String, ByVal Original_OS_FechaFinConvenio As System.Nullable(Of Date), ByVal Original_OS_FechaAlta As System.Nullable(Of Date), ByVal Original_OS_FechaCancelacion As System.Nullable(Of Date)) As Integer
            If (Original_OS_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_OS_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_OS_Nombre Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_OS_Nombre,String)
            End If
            If (Original_OS_Descripcion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_OS_Descripcion,String)
            End If
            If (Original_OS_Calle Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_OS_Calle,String)
            End If
            If (Original_OS_NumeroExt Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_OS_NumeroExt,String)
            End If
            If (Original_OS_NumeroInt Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_OS_NumeroInt,String)
            End If
            If (Original_LOCA_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_LOCA_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (Original_OS_Telefonos Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_OS_Telefonos,String)
            End If
            If (Original_OS_FechaFinConvenio.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_OS_FechaFinConvenio.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (Original_OS_FechaAlta.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_OS_FechaAlta.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (Original_OS_FechaCancelacion.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_OS_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal OS_Key As System.Nullable(Of Integer), ByVal OS_Nombre As String, ByVal OS_Descripcion As String, ByVal OS_Calle As String, ByVal OS_NumeroExt As String, ByVal OS_NumeroInt As String, ByVal LOCA_Key As System.Nullable(Of Integer), ByVal OS_Telefonos As String, ByVal OS_FechaFinConvenio As System.Nullable(Of Date), ByVal OS_FechaAlta As System.Nullable(Of Date), ByVal OS_FechaCancelacion As System.Nullable(Of Date)) As Integer
            If (OS_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(OS_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (OS_Nombre Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(OS_Nombre,String)
            End If
            If (OS_Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(OS_Descripcion,String)
            End If
            If (OS_Calle Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(OS_Calle,String)
            End If
            If (OS_NumeroExt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(OS_NumeroExt,String)
            End If
            If (OS_NumeroInt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(OS_NumeroInt,String)
            End If
            If (LOCA_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(LOCA_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (OS_Telefonos Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(OS_Telefonos,String)
            End If
            If (OS_FechaFinConvenio.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(OS_FechaFinConvenio.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (OS_FechaAlta.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(OS_FechaAlta.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (OS_FechaCancelacion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(OS_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal OS_Key As System.Nullable(Of Integer),  _
                    ByVal OS_Nombre As String,  _
                    ByVal OS_Descripcion As String,  _
                    ByVal OS_Calle As String,  _
                    ByVal OS_NumeroExt As String,  _
                    ByVal OS_NumeroInt As String,  _
                    ByVal LOCA_Key As System.Nullable(Of Integer),  _
                    ByVal OS_Telefonos As String,  _
                    ByVal OS_FechaFinConvenio As System.Nullable(Of Date),  _
                    ByVal OS_FechaAlta As System.Nullable(Of Date),  _
                    ByVal OS_FechaCancelacion As System.Nullable(Of Date),  _
                    ByVal Original_OS_Key As System.Nullable(Of Integer),  _
                    ByVal Original_OS_Nombre As String,  _
                    ByVal Original_OS_Descripcion As String,  _
                    ByVal Original_OS_Calle As String,  _
                    ByVal Original_OS_NumeroExt As String,  _
                    ByVal Original_OS_NumeroInt As String,  _
                    ByVal Original_LOCA_Key As System.Nullable(Of Integer),  _
                    ByVal Original_OS_Telefonos As String,  _
                    ByVal Original_OS_FechaFinConvenio As System.Nullable(Of Date),  _
                    ByVal Original_OS_FechaAlta As System.Nullable(Of Date),  _
                    ByVal Original_OS_FechaCancelacion As System.Nullable(Of Date)) As Integer
            If (OS_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(OS_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (OS_Nombre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(OS_Nombre,String)
            End If
            If (OS_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(OS_Descripcion,String)
            End If
            If (OS_Calle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(OS_Calle,String)
            End If
            If (OS_NumeroExt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(OS_NumeroExt,String)
            End If
            If (OS_NumeroInt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(OS_NumeroInt,String)
            End If
            If (LOCA_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(LOCA_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (OS_Telefonos Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(OS_Telefonos,String)
            End If
            If (OS_FechaFinConvenio.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(OS_FechaFinConvenio.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (OS_FechaAlta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(OS_FechaAlta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (OS_FechaCancelacion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(OS_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (Original_OS_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_OS_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (Original_OS_Nombre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_OS_Nombre,String)
            End If
            If (Original_OS_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_OS_Descripcion,String)
            End If
            If (Original_OS_Calle Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_OS_Calle,String)
            End If
            If (Original_OS_NumeroExt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_OS_NumeroExt,String)
            End If
            If (Original_OS_NumeroInt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_OS_NumeroInt,String)
            End If
            If (Original_LOCA_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_LOCA_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(23).Value = System.DBNull.Value
            End If
            If (Original_OS_Telefonos Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_OS_Telefonos,String)
            End If
            If (Original_OS_FechaFinConvenio.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_OS_FechaFinConvenio.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = System.DBNull.Value
            End If
            If (Original_OS_FechaAlta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_OS_FechaAlta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(29).Value = System.DBNull.Value
            End If
            If (Original_OS_FechaCancelacion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_OS_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(31).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PacientesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Pacientes"
            tableMapping.ColumnMappings.Add("Pac_key", "Pac_key")
            tableMapping.ColumnMappings.Add("TDOC_Key", "TDOC_Key")
            tableMapping.ColumnMappings.Add("Pac_NumeroDoc", "Pac_NumeroDoc")
            tableMapping.ColumnMappings.Add("Pac_Nombres", "Pac_Nombres")
            tableMapping.ColumnMappings.Add("Pac_Apellidos", "Pac_Apellidos")
            tableMapping.ColumnMappings.Add("Pac_Calle", "Pac_Calle")
            tableMapping.ColumnMappings.Add("Pac_NumeroExt", "Pac_NumeroExt")
            tableMapping.ColumnMappings.Add("Pac_NumeroInt", "Pac_NumeroInt")
            tableMapping.ColumnMappings.Add("LOCA_Key", "LOCA_Key")
            tableMapping.ColumnMappings.Add("Pac_Telefonos", "Pac_Telefonos")
            tableMapping.ColumnMappings.Add("Pac_Celular", "Pac_Celular")
            tableMapping.ColumnMappings.Add("Pac_Email", "Pac_Email")
            tableMapping.ColumnMappings.Add("Pac_FechaNacimiento", "Pac_FechaNacimiento")
            tableMapping.ColumnMappings.Add("Pac_FechaAlta", "Pac_FechaAlta")
            tableMapping.ColumnMappings.Add("Pac_FechaCancelacion", "Pac_FechaCancelacion")
            tableMapping.ColumnMappings.Add("Pac_EstadoCivil", "Pac_EstadoCivil")
            tableMapping.ColumnMappings.Add("Pac_Sexo", "Pac_Sexo")
            tableMapping.ColumnMappings.Add("Pac_Ocupacion", "Pac_Ocupacion")
            tableMapping.ColumnMappings.Add("Pac_Nacionalidad", "Pac_Nacionalidad")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Pacientes` WHERE ((`Pac_key` = ?) AND ((? = 1 AND `TDOC_Key` IS NULL"& _ 
                ") OR (`TDOC_Key` = ?)) AND ((? = 1 AND `Pac_NumeroDoc` IS NULL) OR (`Pac_NumeroD"& _ 
                "oc` = ?)) AND ((? = 1 AND `Pac_Nombres` IS NULL) OR (`Pac_Nombres` = ?)) AND ((?"& _ 
                " = 1 AND `Pac_Apellidos` IS NULL) OR (`Pac_Apellidos` = ?)) AND ((? = 1 AND `Pac"& _ 
                "_Calle` IS NULL) OR (`Pac_Calle` = ?)) AND ((? = 1 AND `Pac_NumeroExt` IS NULL) "& _ 
                "OR (`Pac_NumeroExt` = ?)) AND ((? = 1 AND `Pac_NumeroInt` IS NULL) OR (`Pac_Nume"& _ 
                "roInt` = ?)) AND ((? = 1 AND `LOCA_Key` IS NULL) OR (`LOCA_Key` = ?)) AND ((? = "& _ 
                "1 AND `Pac_Telefonos` IS NULL) OR (`Pac_Telefonos` = ?)) AND ((? = 1 AND `Pac_Ce"& _ 
                "lular` IS NULL) OR (`Pac_Celular` = ?)) AND ((? = 1 AND `Pac_Email` IS NULL) OR "& _ 
                "(`Pac_Email` = ?)) AND ((? = 1 AND `Pac_FechaNacimiento` IS NULL) OR (`Pac_Fecha"& _ 
                "Nacimiento` = ?)) AND ((? = 1 AND `Pac_FechaAlta` IS NULL) OR (`Pac_FechaAlta` ="& _ 
                " ?)) AND ((? = 1 AND `Pac_FechaCancelacion` IS NULL) OR (`Pac_FechaCancelacion` "& _ 
                "= ?)) AND ((? = 1 AND `Pac_EstadoCivil` IS NULL) OR (`Pac_EstadoCivil` = ?)) AND"& _ 
                " ((? = 1 AND `Pac_Sexo` IS NULL) OR (`Pac_Sexo` = ?)) AND ((? = 1 AND `Pac_Ocupa"& _ 
                "cion` IS NULL) OR (`Pac_Ocupacion` = ?)) AND ((? = 1 AND `Pac_Nacionalidad` IS N"& _ 
                "ULL) OR (`Pac_Nacionalidad` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_NumeroDoc", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroDoc", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_NumeroDoc", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroDoc", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Nombres", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Nombres", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Nombres", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Nombres", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Apellidos", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Apellidos", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Apellidos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Apellidos", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Calle", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Calle", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Calle", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Calle", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_NumeroExt", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroExt", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_NumeroExt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroExt", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_NumeroInt", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroInt", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_NumeroInt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroInt", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Telefonos", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Telefonos", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Telefonos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Telefonos", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Celular", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Celular", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Celular", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Celular", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Email", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Email", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Email", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Email", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_FechaNacimiento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaNacimiento", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_FechaNacimiento", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaNacimiento", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_FechaAlta", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaAlta", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaAlta", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_FechaCancelacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaCancelacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaCancelacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_EstadoCivil", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_EstadoCivil", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_EstadoCivil", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_EstadoCivil", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Sexo", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Sexo", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Sexo", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Sexo", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Ocupacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Ocupacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Ocupacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Ocupacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Nacionalidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Nacionalidad", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Nacionalidad", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Nacionalidad", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Pacientes` (`TDOC_Key`, `Pac_NumeroDoc`, `Pac_Nombres`, `Pac_Apellid"& _ 
                "os`, `Pac_Calle`, `Pac_NumeroExt`, `Pac_NumeroInt`, `LOCA_Key`, `Pac_Telefonos`,"& _ 
                " `Pac_Celular`, `Pac_Email`, `Pac_FechaNacimiento`, `Pac_FechaAlta`, `Pac_FechaC"& _ 
                "ancelacion`, `Pac_EstadoCivil`, `Pac_Sexo`, `Pac_Ocupacion`, `Pac_Nacionalidad`)"& _ 
                " VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_NumeroDoc", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroDoc", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Nombres", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Nombres", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Apellidos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Apellidos", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Calle", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Calle", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_NumeroExt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroExt", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_NumeroInt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroInt", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Telefonos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Telefonos", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Celular", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Celular", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Email", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Email", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_FechaNacimiento", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaNacimiento", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaAlta", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaCancelacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_EstadoCivil", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_EstadoCivil", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Sexo", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Sexo", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Ocupacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Ocupacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Nacionalidad", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Nacionalidad", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Pacientes` SET `TDOC_Key` = ?, `Pac_NumeroDoc` = ?, `Pac_Nombres` = ?, `P"& _ 
                "ac_Apellidos` = ?, `Pac_Calle` = ?, `Pac_NumeroExt` = ?, `Pac_NumeroInt` = ?, `L"& _ 
                "OCA_Key` = ?, `Pac_Telefonos` = ?, `Pac_Celular` = ?, `Pac_Email` = ?, `Pac_Fech"& _ 
                "aNacimiento` = ?, `Pac_FechaAlta` = ?, `Pac_FechaCancelacion` = ?, `Pac_EstadoCi"& _ 
                "vil` = ?, `Pac_Sexo` = ?, `Pac_Ocupacion` = ?, `Pac_Nacionalidad` = ? WHERE ((`P"& _ 
                "ac_key` = ?) AND ((? = 1 AND `TDOC_Key` IS NULL) OR (`TDOC_Key` = ?)) AND ((? = "& _ 
                "1 AND `Pac_NumeroDoc` IS NULL) OR (`Pac_NumeroDoc` = ?)) AND ((? = 1 AND `Pac_No"& _ 
                "mbres` IS NULL) OR (`Pac_Nombres` = ?)) AND ((? = 1 AND `Pac_Apellidos` IS NULL)"& _ 
                " OR (`Pac_Apellidos` = ?)) AND ((? = 1 AND `Pac_Calle` IS NULL) OR (`Pac_Calle` "& _ 
                "= ?)) AND ((? = 1 AND `Pac_NumeroExt` IS NULL) OR (`Pac_NumeroExt` = ?)) AND ((?"& _ 
                " = 1 AND `Pac_NumeroInt` IS NULL) OR (`Pac_NumeroInt` = ?)) AND ((? = 1 AND `LOC"& _ 
                "A_Key` IS NULL) OR (`LOCA_Key` = ?)) AND ((? = 1 AND `Pac_Telefonos` IS NULL) OR"& _ 
                " (`Pac_Telefonos` = ?)) AND ((? = 1 AND `Pac_Celular` IS NULL) OR (`Pac_Celular`"& _ 
                " = ?)) AND ((? = 1 AND `Pac_Email` IS NULL) OR (`Pac_Email` = ?)) AND ((? = 1 AN"& _ 
                "D `Pac_FechaNacimiento` IS NULL) OR (`Pac_FechaNacimiento` = ?)) AND ((? = 1 AND"& _ 
                " `Pac_FechaAlta` IS NULL) OR (`Pac_FechaAlta` = ?)) AND ((? = 1 AND `Pac_FechaCa"& _ 
                "ncelacion` IS NULL) OR (`Pac_FechaCancelacion` = ?)) AND ((? = 1 AND `Pac_Estado"& _ 
                "Civil` IS NULL) OR (`Pac_EstadoCivil` = ?)) AND ((? = 1 AND `Pac_Sexo` IS NULL) "& _ 
                "OR (`Pac_Sexo` = ?)) AND ((? = 1 AND `Pac_Ocupacion` IS NULL) OR (`Pac_Ocupacion"& _ 
                "` = ?)) AND ((? = 1 AND `Pac_Nacionalidad` IS NULL) OR (`Pac_Nacionalidad` = ?))"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_NumeroDoc", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroDoc", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Nombres", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Nombres", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Apellidos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Apellidos", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Calle", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Calle", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_NumeroExt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroExt", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_NumeroInt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroInt", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Telefonos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Telefonos", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Celular", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Celular", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Email", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Email", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_FechaNacimiento", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaNacimiento", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaAlta", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaCancelacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_EstadoCivil", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_EstadoCivil", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Sexo", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Sexo", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Ocupacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Ocupacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Nacionalidad", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Nacionalidad", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_NumeroDoc", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroDoc", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_NumeroDoc", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroDoc", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Nombres", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Nombres", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Nombres", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Nombres", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Apellidos", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Apellidos", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Apellidos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Apellidos", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Calle", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Calle", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Calle", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Calle", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_NumeroExt", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroExt", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_NumeroExt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroExt", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_NumeroInt", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroInt", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_NumeroInt", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_NumeroInt", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_LOCA_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "LOCA_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Telefonos", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Telefonos", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Telefonos", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Telefonos", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Celular", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Celular", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Celular", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Celular", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Email", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Email", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Email", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Email", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_FechaNacimiento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaNacimiento", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_FechaNacimiento", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaNacimiento", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_FechaAlta", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaAlta", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaAlta", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_FechaCancelacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaCancelacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_FechaCancelacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_EstadoCivil", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_EstadoCivil", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_EstadoCivil", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_EstadoCivil", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Sexo", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Sexo", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Sexo", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Sexo", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Ocupacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Ocupacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Ocupacion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Ocupacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Nacionalidad", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Nacionalidad", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Nacionalidad", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Nacionalidad", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Pac_key, TDOC_Key, Pac_NumeroDoc, Pac_Nombres, Pac_Apellidos, Pac_Calle, P"& _ 
                "ac_NumeroExt, Pac_NumeroInt, LOCA_Key, Pac_Telefonos, Pac_Celular, Pac_Email, Pa"& _ 
                "c_FechaNacimiento, Pac_FechaAlta, Pac_FechaCancelacion, Pac_EstadoCivil, Pac_Sex"& _ 
                "o, Pac_Ocupacion, Pac_Nacionalidad FROM Pacientes"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.PacientesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.PacientesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.PacientesDataTable = New Base2006DataSet3.PacientesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.PacientesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "Pacientes")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_Pac_key As Integer,  _
                    ByVal Original_TDOC_Key As Integer,  _
                    ByVal Original_Pac_NumeroDoc As String,  _
                    ByVal Original_Pac_Nombres As String,  _
                    ByVal Original_Pac_Apellidos As String,  _
                    ByVal Original_Pac_Calle As String,  _
                    ByVal Original_Pac_NumeroExt As String,  _
                    ByVal Original_Pac_NumeroInt As String,  _
                    ByVal Original_LOCA_Key As Integer,  _
                    ByVal Original_Pac_Telefonos As String,  _
                    ByVal Original_Pac_Celular As String,  _
                    ByVal Original_Pac_Email As String,  _
                    ByVal Original_Pac_FechaNacimiento As System.Nullable(Of Date),  _
                    ByVal Original_Pac_FechaAlta As System.Nullable(Of Date),  _
                    ByVal Original_Pac_FechaCancelacion As System.Nullable(Of Date),  _
                    ByVal Original_Pac_EstadoCivil As String,  _
                    ByVal Original_Pac_Sexo As String,  _
                    ByVal Original_Pac_Ocupacion As String,  _
                    ByVal Original_Pac_Nacionalidad As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Pac_key,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TDOC_Key,Integer)
            If (Original_Pac_NumeroDoc Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Pac_NumeroDoc")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Pac_NumeroDoc,String)
            End If
            If (Original_Pac_Nombres Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Pac_Nombres")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Pac_Nombres,String)
            End If
            If (Original_Pac_Apellidos Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Pac_Apellidos")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Pac_Apellidos,String)
            End If
            If (Original_Pac_Calle Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Pac_Calle")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Pac_Calle,String)
            End If
            If (Original_Pac_NumeroExt Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Pac_NumeroExt")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Pac_NumeroExt,String)
            End If
            If (Original_Pac_NumeroInt Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Pac_NumeroInt,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_LOCA_Key,Integer)
            If (Original_Pac_Telefonos Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_Pac_Telefonos,String)
            End If
            If (Original_Pac_Celular Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_Pac_Celular,String)
            End If
            If (Original_Pac_Email Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_Pac_Email,String)
            End If
            If (Original_Pac_FechaNacimiento.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_Pac_FechaNacimiento.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = System.DBNull.Value
            End If
            If (Original_Pac_FechaAlta.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_Pac_FechaAlta.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = System.DBNull.Value
            End If
            If (Original_Pac_FechaCancelacion.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_Pac_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = System.DBNull.Value
            End If
            If (Original_Pac_EstadoCivil Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_Pac_EstadoCivil,String)
            End If
            If (Original_Pac_Sexo Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Pac_Sexo")
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_Pac_Sexo,String)
            End If
            If (Original_Pac_Ocupacion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_Pac_Ocupacion,String)
            End If
            If (Original_Pac_Nacionalidad Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_Pac_Nacionalidad,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal TDOC_Key As Integer,  _
                    ByVal Pac_NumeroDoc As String,  _
                    ByVal Pac_Nombres As String,  _
                    ByVal Pac_Apellidos As String,  _
                    ByVal Pac_Calle As String,  _
                    ByVal Pac_NumeroExt As String,  _
                    ByVal Pac_NumeroInt As String,  _
                    ByVal LOCA_Key As Integer,  _
                    ByVal Pac_Telefonos As String,  _
                    ByVal Pac_Celular As String,  _
                    ByVal Pac_Email As String,  _
                    ByVal Pac_FechaNacimiento As System.Nullable(Of Date),  _
                    ByVal Pac_FechaAlta As System.Nullable(Of Date),  _
                    ByVal Pac_FechaCancelacion As System.Nullable(Of Date),  _
                    ByVal Pac_EstadoCivil As String,  _
                    ByVal Pac_Sexo As String,  _
                    ByVal Pac_Ocupacion As String,  _
                    ByVal Pac_Nacionalidad As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(TDOC_Key,Integer)
            If (Pac_NumeroDoc Is Nothing) Then
                Throw New System.ArgumentNullException("Pac_NumeroDoc")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Pac_NumeroDoc,String)
            End If
            If (Pac_Nombres Is Nothing) Then
                Throw New System.ArgumentNullException("Pac_Nombres")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Pac_Nombres,String)
            End If
            If (Pac_Apellidos Is Nothing) Then
                Throw New System.ArgumentNullException("Pac_Apellidos")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Pac_Apellidos,String)
            End If
            If (Pac_Calle Is Nothing) Then
                Throw New System.ArgumentNullException("Pac_Calle")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Pac_Calle,String)
            End If
            If (Pac_NumeroExt Is Nothing) Then
                Throw New System.ArgumentNullException("Pac_NumeroExt")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Pac_NumeroExt,String)
            End If
            If (Pac_NumeroInt Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Pac_NumeroInt,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(LOCA_Key,Integer)
            If (Pac_Telefonos Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Pac_Telefonos,String)
            End If
            If (Pac_Celular Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Pac_Celular,String)
            End If
            If (Pac_Email Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Pac_Email,String)
            End If
            If (Pac_FechaNacimiento.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Pac_FechaNacimiento.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (Pac_FechaAlta.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Pac_FechaAlta.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (Pac_FechaCancelacion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Pac_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (Pac_EstadoCivil Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Pac_EstadoCivil,String)
            End If
            If (Pac_Sexo Is Nothing) Then
                Throw New System.ArgumentNullException("Pac_Sexo")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Pac_Sexo,String)
            End If
            If (Pac_Ocupacion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Pac_Ocupacion,String)
            End If
            If (Pac_Nacionalidad Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Pac_Nacionalidad,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal TDOC_Key As Integer,  _
                    ByVal Pac_NumeroDoc As String,  _
                    ByVal Pac_Nombres As String,  _
                    ByVal Pac_Apellidos As String,  _
                    ByVal Pac_Calle As String,  _
                    ByVal Pac_NumeroExt As String,  _
                    ByVal Pac_NumeroInt As String,  _
                    ByVal LOCA_Key As Integer,  _
                    ByVal Pac_Telefonos As String,  _
                    ByVal Pac_Celular As String,  _
                    ByVal Pac_Email As String,  _
                    ByVal Pac_FechaNacimiento As System.Nullable(Of Date),  _
                    ByVal Pac_FechaAlta As System.Nullable(Of Date),  _
                    ByVal Pac_FechaCancelacion As System.Nullable(Of Date),  _
                    ByVal Pac_EstadoCivil As String,  _
                    ByVal Pac_Sexo As String,  _
                    ByVal Pac_Ocupacion As String,  _
                    ByVal Pac_Nacionalidad As String,  _
                    ByVal Original_Pac_key As Integer,  _
                    ByVal Original_TDOC_Key As Integer,  _
                    ByVal Original_Pac_NumeroDoc As String,  _
                    ByVal Original_Pac_Nombres As String,  _
                    ByVal Original_Pac_Apellidos As String,  _
                    ByVal Original_Pac_Calle As String,  _
                    ByVal Original_Pac_NumeroExt As String,  _
                    ByVal Original_Pac_NumeroInt As String,  _
                    ByVal Original_LOCA_Key As Integer,  _
                    ByVal Original_Pac_Telefonos As String,  _
                    ByVal Original_Pac_Celular As String,  _
                    ByVal Original_Pac_Email As String,  _
                    ByVal Original_Pac_FechaNacimiento As System.Nullable(Of Date),  _
                    ByVal Original_Pac_FechaAlta As System.Nullable(Of Date),  _
                    ByVal Original_Pac_FechaCancelacion As System.Nullable(Of Date),  _
                    ByVal Original_Pac_EstadoCivil As String,  _
                    ByVal Original_Pac_Sexo As String,  _
                    ByVal Original_Pac_Ocupacion As String,  _
                    ByVal Original_Pac_Nacionalidad As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TDOC_Key,Integer)
            If (Pac_NumeroDoc Is Nothing) Then
                Throw New System.ArgumentNullException("Pac_NumeroDoc")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Pac_NumeroDoc,String)
            End If
            If (Pac_Nombres Is Nothing) Then
                Throw New System.ArgumentNullException("Pac_Nombres")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Pac_Nombres,String)
            End If
            If (Pac_Apellidos Is Nothing) Then
                Throw New System.ArgumentNullException("Pac_Apellidos")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Pac_Apellidos,String)
            End If
            If (Pac_Calle Is Nothing) Then
                Throw New System.ArgumentNullException("Pac_Calle")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Pac_Calle,String)
            End If
            If (Pac_NumeroExt Is Nothing) Then
                Throw New System.ArgumentNullException("Pac_NumeroExt")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Pac_NumeroExt,String)
            End If
            If (Pac_NumeroInt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Pac_NumeroInt,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(LOCA_Key,Integer)
            If (Pac_Telefonos Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Pac_Telefonos,String)
            End If
            If (Pac_Celular Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Pac_Celular,String)
            End If
            If (Pac_Email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Pac_Email,String)
            End If
            If (Pac_FechaNacimiento.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Pac_FechaNacimiento.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            If (Pac_FechaAlta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Pac_FechaAlta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (Pac_FechaCancelacion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Pac_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = System.DBNull.Value
            End If
            If (Pac_EstadoCivil Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Pac_EstadoCivil,String)
            End If
            If (Pac_Sexo Is Nothing) Then
                Throw New System.ArgumentNullException("Pac_Sexo")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Pac_Sexo,String)
            End If
            If (Pac_Ocupacion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Pac_Ocupacion,String)
            End If
            If (Pac_Nacionalidad Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Pac_Nacionalidad,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Pac_key,Integer)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_TDOC_Key,Integer)
            If (Original_Pac_NumeroDoc Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Pac_NumeroDoc")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Pac_NumeroDoc,String)
            End If
            If (Original_Pac_Nombres Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Pac_Nombres")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_Pac_Nombres,String)
            End If
            If (Original_Pac_Apellidos Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Pac_Apellidos")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Pac_Apellidos,String)
            End If
            If (Original_Pac_Calle Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Pac_Calle")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Pac_Calle,String)
            End If
            If (Original_Pac_NumeroExt Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Pac_NumeroExt")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_Pac_NumeroExt,String)
            End If
            If (Original_Pac_NumeroInt Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_Pac_NumeroInt,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_LOCA_Key,Integer)
            If (Original_Pac_Telefonos Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_Pac_Telefonos,String)
            End If
            If (Original_Pac_Celular Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_Pac_Celular,String)
            End If
            If (Original_Pac_Email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_Pac_Email,String)
            End If
            If (Original_Pac_FechaNacimiento.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_Pac_FechaNacimiento.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = System.DBNull.Value
            End If
            If (Original_Pac_FechaAlta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_Pac_FechaAlta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(44).Value = System.DBNull.Value
            End If
            If (Original_Pac_FechaCancelacion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_Pac_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(46).Value = System.DBNull.Value
            End If
            If (Original_Pac_EstadoCivil Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_Pac_EstadoCivil,String)
            End If
            If (Original_Pac_Sexo Is Nothing) Then
                Throw New System.ArgumentNullException("Original_Pac_Sexo")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_Pac_Sexo,String)
            End If
            If (Original_Pac_Ocupacion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_Pac_Ocupacion,String)
            End If
            If (Original_Pac_Nacionalidad Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_Pac_Nacionalidad,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PacientexPlanTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PacientexPlan"
            tableMapping.ColumnMappings.Add("PacxP_Key", "PacxP_Key")
            tableMapping.ColumnMappings.Add("Plan_Key", "Plan_Key")
            tableMapping.ColumnMappings.Add("OS_Key", "OS_Key")
            tableMapping.ColumnMappings.Add("PacxP_FechaInicio", "PacxP_FechaInicio")
            tableMapping.ColumnMappings.Add("PacxP_FechaFin", "PacxP_FechaFin")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `PacientexPlan` WHERE ((`PacxP_Key` = ?) AND (`Plan_Key` = ?) AND (`O"& _ 
                "S_Key` = ?) AND ((? = 1 AND `PacxP_FechaInicio` IS NULL) OR (`PacxP_FechaInicio`"& _ 
                " = ?)) AND ((? = 1 AND `PacxP_FechaFin` IS NULL) OR (`PacxP_FechaFin` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PacxP_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PacxP_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Plan_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PacxP_FechaInicio", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PacxP_FechaInicio", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PacxP_FechaInicio", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PacxP_FechaInicio", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PacxP_FechaFin", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PacxP_FechaFin", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PacxP_FechaFin", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PacxP_FechaFin", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `PacientexPlan` (`PacxP_Key`, `Plan_Key`, `OS_Key`, `PacxP_FechaInici"& _ 
                "o`, `PacxP_FechaFin`) VALUES (?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PacxP_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PacxP_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Plan_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PacxP_FechaInicio", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PacxP_FechaInicio", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PacxP_FechaFin", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PacxP_FechaFin", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `PacientexPlan` SET `PacxP_Key` = ?, `Plan_Key` = ?, `OS_Key` = ?, `PacxP_"& _ 
                "FechaInicio` = ?, `PacxP_FechaFin` = ? WHERE ((`PacxP_Key` = ?) AND (`Plan_Key` "& _ 
                "= ?) AND (`OS_Key` = ?) AND ((? = 1 AND `PacxP_FechaInicio` IS NULL) OR (`PacxP_"& _ 
                "FechaInicio` = ?)) AND ((? = 1 AND `PacxP_FechaFin` IS NULL) OR (`PacxP_FechaFin"& _ 
                "` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PacxP_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PacxP_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Plan_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PacxP_FechaInicio", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PacxP_FechaInicio", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PacxP_FechaFin", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PacxP_FechaFin", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PacxP_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PacxP_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Plan_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PacxP_FechaInicio", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PacxP_FechaInicio", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PacxP_FechaInicio", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PacxP_FechaInicio", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PacxP_FechaFin", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PacxP_FechaFin", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PacxP_FechaFin", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PacxP_FechaFin", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PacxP_Key, Plan_Key, OS_Key, PacxP_FechaInicio, PacxP_FechaFin FROM Pacien"& _ 
                "texPlan"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.PacientexPlanDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.PacientexPlanDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.PacientexPlanDataTable = New Base2006DataSet3.PacientexPlanDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.PacientexPlanDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "PacientexPlan")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PacxP_Key As System.Nullable(Of Integer), ByVal Original_Plan_Key As System.Nullable(Of Integer), ByVal Original_OS_Key As System.Nullable(Of Integer), ByVal Original_PacxP_FechaInicio As System.Nullable(Of Date), ByVal Original_PacxP_FechaFin As System.Nullable(Of Date)) As Integer
            If (Original_PacxP_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PacxP_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_Plan_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Plan_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Original_OS_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_OS_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_PacxP_FechaInicio.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PacxP_FechaInicio.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_PacxP_FechaFin.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PacxP_FechaFin.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PacxP_Key As System.Nullable(Of Integer), ByVal Plan_Key As System.Nullable(Of Integer), ByVal OS_Key As System.Nullable(Of Integer), ByVal PacxP_FechaInicio As System.Nullable(Of Date), ByVal PacxP_FechaFin As System.Nullable(Of Date)) As Integer
            If (PacxP_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PacxP_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Plan_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Plan_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (OS_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(OS_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (PacxP_FechaInicio.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PacxP_FechaInicio.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (PacxP_FechaFin.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(PacxP_FechaFin.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PacxP_Key As System.Nullable(Of Integer), ByVal Plan_Key As System.Nullable(Of Integer), ByVal OS_Key As System.Nullable(Of Integer), ByVal PacxP_FechaInicio As System.Nullable(Of Date), ByVal PacxP_FechaFin As System.Nullable(Of Date), ByVal Original_PacxP_Key As System.Nullable(Of Integer), ByVal Original_Plan_Key As System.Nullable(Of Integer), ByVal Original_OS_Key As System.Nullable(Of Integer), ByVal Original_PacxP_FechaInicio As System.Nullable(Of Date), ByVal Original_PacxP_FechaFin As System.Nullable(Of Date)) As Integer
            If (PacxP_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PacxP_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Plan_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Plan_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (OS_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(OS_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (PacxP_FechaInicio.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PacxP_FechaInicio.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (PacxP_FechaFin.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(PacxP_FechaFin.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_PacxP_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PacxP_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Original_Plan_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Plan_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Original_OS_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_OS_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (Original_PacxP_FechaInicio.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_PacxP_FechaInicio.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (Original_PacxP_FechaFin.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_PacxP_FechaFin.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PlanesTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Planes"
            tableMapping.ColumnMappings.Add("Plan_Key", "Plan_Key")
            tableMapping.ColumnMappings.Add("OS_Key", "OS_Key")
            tableMapping.ColumnMappings.Add("Plan_Nombre", "Plan_Nombre")
            tableMapping.ColumnMappings.Add("Plan_Descripcion", "Plan_Descripcion")
            tableMapping.ColumnMappings.Add("Plan_FechaFinConvenio", "Plan_FechaFinConvenio")
            tableMapping.ColumnMappings.Add("Plan_FechaAlta", "Plan_FechaAlta")
            tableMapping.ColumnMappings.Add("Plan_FechaCancelacion", "Plan_FechaCancelacion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Planes` WHERE ((`Plan_Key` = ?) AND (`OS_Key` = ?) AND ((? = 1 AND `"& _ 
                "Plan_Nombre` IS NULL) OR (`Plan_Nombre` = ?)) AND ((? = 1 AND `Plan_Descripcion`"& _ 
                " IS NULL) OR (`Plan_Descripcion` = ?)) AND ((? = 1 AND `Plan_FechaFinConvenio` I"& _ 
                "S NULL) OR (`Plan_FechaFinConvenio` = ?)) AND ((? = 1 AND `Plan_FechaAlta` IS NU"& _ 
                "LL) OR (`Plan_FechaAlta` = ?)) AND ((? = 1 AND `Plan_FechaCancelacion` IS NULL) "& _ 
                "OR (`Plan_FechaCancelacion` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Plan_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Plan_Nombre", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Nombre", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Plan_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Nombre", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Plan_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Plan_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Plan_FechaFinConvenio", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaFinConvenio", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Plan_FechaFinConvenio", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaFinConvenio", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Plan_FechaAlta", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaAlta", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Plan_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaAlta", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Plan_FechaCancelacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaCancelacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Plan_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaCancelacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Planes` (`Plan_Key`, `OS_Key`, `Plan_Nombre`, `Plan_Descripcion`, `P"& _ 
                "lan_FechaFinConvenio`, `Plan_FechaAlta`, `Plan_FechaCancelacion`) VALUES (?, ?, "& _ 
                "?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Plan_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Plan_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Nombre", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Plan_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Plan_FechaFinConvenio", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaFinConvenio", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Plan_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaAlta", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Plan_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaCancelacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Planes` SET `Plan_Key` = ?, `OS_Key` = ?, `Plan_Nombre` = ?, `Plan_Descri"& _ 
                "pcion` = ?, `Plan_FechaFinConvenio` = ?, `Plan_FechaAlta` = ?, `Plan_FechaCancel"& _ 
                "acion` = ? WHERE ((`Plan_Key` = ?) AND (`OS_Key` = ?) AND ((? = 1 AND `Plan_Nomb"& _ 
                "re` IS NULL) OR (`Plan_Nombre` = ?)) AND ((? = 1 AND `Plan_Descripcion` IS NULL)"& _ 
                " OR (`Plan_Descripcion` = ?)) AND ((? = 1 AND `Plan_FechaFinConvenio` IS NULL) O"& _ 
                "R (`Plan_FechaFinConvenio` = ?)) AND ((? = 1 AND `Plan_FechaAlta` IS NULL) OR (`"& _ 
                "Plan_FechaAlta` = ?)) AND ((? = 1 AND `Plan_FechaCancelacion` IS NULL) OR (`Plan"& _ 
                "_FechaCancelacion` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Plan_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Plan_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Nombre", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Plan_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Plan_FechaFinConvenio", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaFinConvenio", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Plan_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaAlta", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Plan_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaCancelacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Plan_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Plan_Nombre", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Nombre", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Plan_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Nombre", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Plan_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Plan_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Plan_FechaFinConvenio", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaFinConvenio", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Plan_FechaFinConvenio", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaFinConvenio", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Plan_FechaAlta", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaAlta", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Plan_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaAlta", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Plan_FechaCancelacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaCancelacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Plan_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_FechaCancelacion", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT Plan_Key, OS_Key, Plan_Nombre, Plan_Descripcion, Plan_FechaFinConvenio, Pl"& _ 
                "an_FechaAlta, Plan_FechaCancelacion FROM Planes"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.PlanesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.PlanesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.PlanesDataTable = New Base2006DataSet3.PlanesDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.PlanesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "Planes")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_Plan_Key As System.Nullable(Of Integer), ByVal Original_OS_Key As System.Nullable(Of Integer), ByVal Original_Plan_Nombre As String, ByVal Original_Plan_Descripcion As String, ByVal Original_Plan_FechaFinConvenio As System.Nullable(Of Date), ByVal Original_Plan_FechaAlta As System.Nullable(Of Date), ByVal Original_Plan_FechaCancelacion As System.Nullable(Of Date)) As Integer
            If (Original_Plan_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_Plan_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_OS_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_OS_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Original_Plan_Nombre Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Plan_Nombre,String)
            End If
            If (Original_Plan_Descripcion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_Plan_Descripcion,String)
            End If
            If (Original_Plan_FechaFinConvenio.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_Plan_FechaFinConvenio.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (Original_Plan_FechaAlta.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_Plan_FechaAlta.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = System.DBNull.Value
            End If
            If (Original_Plan_FechaCancelacion.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_Plan_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Plan_Key As System.Nullable(Of Integer), ByVal OS_Key As System.Nullable(Of Integer), ByVal Plan_Nombre As String, ByVal Plan_Descripcion As String, ByVal Plan_FechaFinConvenio As System.Nullable(Of Date), ByVal Plan_FechaAlta As System.Nullable(Of Date), ByVal Plan_FechaCancelacion As System.Nullable(Of Date)) As Integer
            If (Plan_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Plan_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (OS_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(OS_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Plan_Nombre Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Plan_Nombre,String)
            End If
            If (Plan_Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Plan_Descripcion,String)
            End If
            If (Plan_FechaFinConvenio.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Plan_FechaFinConvenio.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Plan_FechaAlta.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Plan_FechaAlta.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Plan_FechaCancelacion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Plan_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Plan_Key As System.Nullable(Of Integer), ByVal OS_Key As System.Nullable(Of Integer), ByVal Plan_Nombre As String, ByVal Plan_Descripcion As String, ByVal Plan_FechaFinConvenio As System.Nullable(Of Date), ByVal Plan_FechaAlta As System.Nullable(Of Date), ByVal Plan_FechaCancelacion As System.Nullable(Of Date), ByVal Original_Plan_Key As System.Nullable(Of Integer), ByVal Original_OS_Key As System.Nullable(Of Integer), ByVal Original_Plan_Nombre As String, ByVal Original_Plan_Descripcion As String, ByVal Original_Plan_FechaFinConvenio As System.Nullable(Of Date), ByVal Original_Plan_FechaAlta As System.Nullable(Of Date), ByVal Original_Plan_FechaCancelacion As System.Nullable(Of Date)) As Integer
            If (Plan_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Plan_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (OS_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(OS_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Plan_Nombre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Plan_Nombre,String)
            End If
            If (Plan_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Plan_Descripcion,String)
            End If
            If (Plan_FechaFinConvenio.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Plan_FechaFinConvenio.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Plan_FechaAlta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Plan_FechaAlta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Plan_FechaCancelacion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Plan_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Original_Plan_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_Plan_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            If (Original_OS_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_OS_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (Original_Plan_Nombre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Plan_Nombre,String)
            End If
            If (Original_Plan_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Plan_Descripcion,String)
            End If
            If (Original_Plan_FechaFinConvenio.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Plan_FechaFinConvenio.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (Original_Plan_FechaAlta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Plan_FechaAlta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (Original_Plan_FechaCancelacion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Plan_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PracticaMedicaxPlanTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PracticaMedicaxPlan"
            tableMapping.ColumnMappings.Add("PMxP_Key", "PMxP_Key")
            tableMapping.ColumnMappings.Add("Plan_Key", "Plan_Key")
            tableMapping.ColumnMappings.Add("OS_Key", "OS_Key")
            tableMapping.ColumnMappings.Add("PMxP_PorcentajeDescuento", "PMxP_PorcentajeDescuento")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `PracticaMedicaxPlan` WHERE ((`PMxP_Key` = ?) AND (`Plan_Key` = ?) AN"& _ 
                "D (`OS_Key` = ?) AND ((? = 1 AND `PMxP_PorcentajeDescuento` IS NULL) OR (`PMxP_P"& _ 
                "orcentajeDescuento` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PMxP_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PMxP_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Plan_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PMxP_PorcentajeDescuento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PMxP_PorcentajeDescuento", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PMxP_PorcentajeDescuento", System.Data.OleDb.OleDbType.[Single], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PMxP_PorcentajeDescuento", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `PracticaMedicaxPlan` (`PMxP_Key`, `Plan_Key`, `OS_Key`, `PMxP_Porcen"& _ 
                "tajeDescuento`) VALUES (?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PMxP_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PMxP_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Plan_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PMxP_PorcentajeDescuento", System.Data.OleDb.OleDbType.[Single], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PMxP_PorcentajeDescuento", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `PracticaMedicaxPlan` SET `PMxP_Key` = ?, `Plan_Key` = ?, `OS_Key` = ?, `P"& _ 
                "MxP_PorcentajeDescuento` = ? WHERE ((`PMxP_Key` = ?) AND (`Plan_Key` = ?) AND (`"& _ 
                "OS_Key` = ?) AND ((? = 1 AND `PMxP_PorcentajeDescuento` IS NULL) OR (`PMxP_Porce"& _ 
                "ntajeDescuento` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PMxP_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PMxP_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Plan_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("OS_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PMxP_PorcentajeDescuento", System.Data.OleDb.OleDbType.[Single], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PMxP_PorcentajeDescuento", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PMxP_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PMxP_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Plan_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Plan_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_OS_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "OS_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PMxP_PorcentajeDescuento", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PMxP_PorcentajeDescuento", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PMxP_PorcentajeDescuento", System.Data.OleDb.OleDbType.[Single], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PMxP_PorcentajeDescuento", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PMxP_Key, Plan_Key, OS_Key, PMxP_PorcentajeDescuento FROM PracticaMedicaxP"& _ 
                "lan"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.PracticaMedicaxPlanDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.PracticaMedicaxPlanDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.PracticaMedicaxPlanDataTable = New Base2006DataSet3.PracticaMedicaxPlanDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.PracticaMedicaxPlanDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "PracticaMedicaxPlan")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PMxP_Key As System.Nullable(Of Integer), ByVal Original_Plan_Key As System.Nullable(Of Integer), ByVal Original_OS_Key As System.Nullable(Of Integer), ByVal Original_PMxP_PorcentajeDescuento As System.Nullable(Of Single)) As Integer
            If (Original_PMxP_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PMxP_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_Plan_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Plan_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (Original_OS_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_OS_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_PMxP_PorcentajeDescuento.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PMxP_PorcentajeDescuento.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PMxP_Key As System.Nullable(Of Integer), ByVal Plan_Key As System.Nullable(Of Integer), ByVal OS_Key As System.Nullable(Of Integer), ByVal PMxP_PorcentajeDescuento As System.Nullable(Of Single)) As Integer
            If (PMxP_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PMxP_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Plan_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Plan_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (OS_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(OS_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (PMxP_PorcentajeDescuento.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PMxP_PorcentajeDescuento.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PMxP_Key As System.Nullable(Of Integer), ByVal Plan_Key As System.Nullable(Of Integer), ByVal OS_Key As System.Nullable(Of Integer), ByVal PMxP_PorcentajeDescuento As System.Nullable(Of Single), ByVal Original_PMxP_Key As System.Nullable(Of Integer), ByVal Original_Plan_Key As System.Nullable(Of Integer), ByVal Original_OS_Key As System.Nullable(Of Integer), ByVal Original_PMxP_PorcentajeDescuento As System.Nullable(Of Single)) As Integer
            If (PMxP_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PMxP_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Plan_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Plan_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (OS_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(OS_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (PMxP_PorcentajeDescuento.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PMxP_PorcentajeDescuento.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (Original_PMxP_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PMxP_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Original_Plan_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Plan_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Original_OS_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_OS_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Original_PMxP_PorcentajeDescuento.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_PMxP_PorcentajeDescuento.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class PracticasMedicasTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "PracticasMedicas"
            tableMapping.ColumnMappings.Add("PM_Key", "PM_Key")
            tableMapping.ColumnMappings.Add("PM_Descripcion", "PM_Descripcion")
            tableMapping.ColumnMappings.Add("PM_PrecioUnitario", "PM_PrecioUnitario")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `PracticasMedicas` WHERE ((`PM_Key` = ?) AND ((? = 1 AND `PM_Descripc"& _ 
                "ion` IS NULL) OR (`PM_Descripcion` = ?)) AND ((? = 1 AND `PM_PrecioUnitario` IS "& _ 
                "NULL) OR (`PM_PrecioUnitario` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PM_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PM_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PM_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PM_PrecioUnitario", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_PrecioUnitario", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PM_PrecioUnitario", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_PrecioUnitario", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `PracticasMedicas` (`PM_Key`, `PM_Descripcion`, `PM_PrecioUnitario`) "& _ 
                "VALUES (?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PM_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PM_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PM_PrecioUnitario", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_PrecioUnitario", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `PracticasMedicas` SET `PM_Key` = ?, `PM_Descripcion` = ?, `PM_PrecioUnita"& _ 
                "rio` = ? WHERE ((`PM_Key` = ?) AND ((? = 1 AND `PM_Descripcion` IS NULL) OR (`PM"& _ 
                "_Descripcion` = ?)) AND ((? = 1 AND `PM_PrecioUnitario` IS NULL) OR (`PM_PrecioU"& _ 
                "nitario` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PM_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PM_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PM_PrecioUnitario", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_PrecioUnitario", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PM_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PM_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PM_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PM_PrecioUnitario", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_PrecioUnitario", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PM_PrecioUnitario", System.Data.OleDb.OleDbType.Currency, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PM_PrecioUnitario", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PM_Key, PM_Descripcion, PM_PrecioUnitario FROM PracticasMedicas"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.PracticasMedicasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.PracticasMedicasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.PracticasMedicasDataTable = New Base2006DataSet3.PracticasMedicasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.PracticasMedicasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "PracticasMedicas")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PM_Key As System.Nullable(Of Integer), ByVal Original_PM_Descripcion As String, ByVal Original_PM_PrecioUnitario As System.Nullable(Of Decimal)) As Integer
            If (Original_PM_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PM_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_PM_Descripcion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PM_Descripcion,String)
            End If
            If (Original_PM_PrecioUnitario.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_PM_PrecioUnitario.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PM_Key As System.Nullable(Of Integer), ByVal PM_Descripcion As String, ByVal PM_PrecioUnitario As System.Nullable(Of Decimal)) As Integer
            If (PM_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PM_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (PM_Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PM_Descripcion,String)
            End If
            If (PM_PrecioUnitario.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PM_PrecioUnitario.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PM_Key As System.Nullable(Of Integer), ByVal PM_Descripcion As String, ByVal PM_PrecioUnitario As System.Nullable(Of Decimal), ByVal Original_PM_Key As System.Nullable(Of Integer), ByVal Original_PM_Descripcion As String, ByVal Original_PM_PrecioUnitario As System.Nullable(Of Decimal)) As Integer
            If (PM_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PM_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (PM_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PM_Descripcion,String)
            End If
            If (PM_PrecioUnitario.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PM_PrecioUnitario.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_PM_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_PM_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (Original_PM_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_PM_Descripcion,String)
            End If
            If (Original_PM_PrecioUnitario.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_PM_PrecioUnitario.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ProvinciasTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Provincias"
            tableMapping.ColumnMappings.Add("PROV_Key", "PROV_Key")
            tableMapping.ColumnMappings.Add("PROV_Nombre", "PROV_Nombre")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Provincias` WHERE ((`PROV_Key` = ?) AND ((? = 1 AND `PROV_Nombre` IS"& _ 
                " NULL) OR (`PROV_Nombre` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PROV_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROV_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PROV_Nombre", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROV_Nombre", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PROV_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROV_Nombre", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Provincias` (`PROV_Key`, `PROV_Nombre`) VALUES (?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PROV_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROV_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PROV_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROV_Nombre", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Provincias` SET `PROV_Key` = ?, `PROV_Nombre` = ? WHERE ((`PROV_Key` = ?)"& _ 
                " AND ((? = 1 AND `PROV_Nombre` IS NULL) OR (`PROV_Nombre` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PROV_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROV_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("PROV_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROV_Nombre", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PROV_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROV_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_PROV_Nombre", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROV_Nombre", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_PROV_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "PROV_Nombre", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT PROV_Key, PROV_Nombre FROM Provincias"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.ProvinciasDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.ProvinciasDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.ProvinciasDataTable = New Base2006DataSet3.ProvinciasDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.ProvinciasDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "Provincias")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_PROV_Key As System.Nullable(Of Integer), ByVal Original_PROV_Nombre As String) As Integer
            If (Original_PROV_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_PROV_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_PROV_Nombre Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_PROV_Nombre,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal PROV_Key As System.Nullable(Of Integer), ByVal PROV_Nombre As String) As Integer
            If (PROV_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(PROV_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (PROV_Nombre Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(PROV_Nombre,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal PROV_Key As System.Nullable(Of Integer), ByVal PROV_Nombre As String, ByVal Original_PROV_Key As System.Nullable(Of Integer), ByVal Original_PROV_Nombre As String) As Integer
            If (PROV_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(PROV_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (PROV_Nombre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(PROV_Nombre,String)
            End If
            If (Original_PROV_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_PROV_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_PROV_Nombre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_PROV_Nombre,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYS_ROLESTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYS_ROLES"
            tableMapping.ColumnMappings.Add("SYS_ROLE_KEY", "SYS_ROLE_KEY")
            tableMapping.ColumnMappings.Add("SYS_ROLE_Descripcion", "SYS_ROLE_Descripcion")
            tableMapping.ColumnMappings.Add("SYS_ROLE_Enabled", "SYS_ROLE_Enabled")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `SYS_ROLES` WHERE ((`SYS_ROLE_KEY` = ?) AND ((? = 1 AND `SYS_ROLE_Des"& _ 
                "cripcion` IS NULL) OR (`SYS_ROLE_Descripcion` = ?)) AND ((? = 1 AND `SYS_ROLE_En"& _ 
                "abled` IS NULL) OR (`SYS_ROLE_Enabled` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_ROLE_KEY", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_KEY", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_ROLE_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_ROLE_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_ROLE_Enabled", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_Enabled", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_ROLE_Enabled", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_Enabled", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `SYS_ROLES` (`SYS_ROLE_Descripcion`, `SYS_ROLE_Enabled`) VALUES (?, ?"& _ 
                ")"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_ROLE_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_ROLE_Enabled", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_Enabled", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `SYS_ROLES` SET `SYS_ROLE_Descripcion` = ?, `SYS_ROLE_Enabled` = ? WHERE ("& _ 
                "(`SYS_ROLE_KEY` = ?) AND ((? = 1 AND `SYS_ROLE_Descripcion` IS NULL) OR (`SYS_RO"& _ 
                "LE_Descripcion` = ?)) AND ((? = 1 AND `SYS_ROLE_Enabled` IS NULL) OR (`SYS_ROLE_"& _ 
                "Enabled` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_ROLE_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_ROLE_Enabled", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_Enabled", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_ROLE_KEY", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_KEY", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_ROLE_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_ROLE_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_ROLE_Enabled", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_Enabled", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_ROLE_Enabled", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_Enabled", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYS_ROLE_KEY, SYS_ROLE_Descripcion, SYS_ROLE_Enabled FROM SYS_ROLES"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.SYS_ROLESDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.SYS_ROLESDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.SYS_ROLESDataTable = New Base2006DataSet3.SYS_ROLESDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.SYS_ROLESDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "SYS_ROLES")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SYS_ROLE_KEY As Integer, ByVal Original_SYS_ROLE_Descripcion As String, ByVal Original_SYS_ROLE_Enabled As System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYS_ROLE_KEY,Integer)
            If (Original_SYS_ROLE_Descripcion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYS_ROLE_Descripcion,String)
            End If
            If (Original_SYS_ROLE_Enabled.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SYS_ROLE_Enabled.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SYS_ROLE_Descripcion As String, ByVal SYS_ROLE_Enabled As System.Nullable(Of Integer)) As Integer
            If (SYS_ROLE_Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYS_ROLE_Descripcion,String)
            End If
            If (SYS_ROLE_Enabled.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYS_ROLE_Enabled.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal SYS_ROLE_Descripcion As String, ByVal SYS_ROLE_Enabled As System.Nullable(Of Integer), ByVal Original_SYS_ROLE_KEY As Integer, ByVal Original_SYS_ROLE_Descripcion As String, ByVal Original_SYS_ROLE_Enabled As System.Nullable(Of Integer)) As Integer
            If (SYS_ROLE_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYS_ROLE_Descripcion,String)
            End If
            If (SYS_ROLE_Enabled.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYS_ROLE_Enabled.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_SYS_ROLE_KEY,Integer)
            If (Original_SYS_ROLE_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_SYS_ROLE_Descripcion,String)
            End If
            If (Original_SYS_ROLE_Enabled.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_SYS_ROLE_Enabled.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class SYS_UsuariosTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "SYS_Usuarios"
            tableMapping.ColumnMappings.Add("SYS_User_Login", "SYS_User_Login")
            tableMapping.ColumnMappings.Add("SYS_ROLE_KEY", "SYS_ROLE_KEY")
            tableMapping.ColumnMappings.Add("SYS_User_Pass", "SYS_User_Pass")
            tableMapping.ColumnMappings.Add("SYS_User_Autorizacion", "SYS_User_Autorizacion")
            tableMapping.ColumnMappings.Add("SYS_User_Nombre", "SYS_User_Nombre")
            tableMapping.ColumnMappings.Add("SYS_User_Apellido", "SYS_User_Apellido")
            tableMapping.ColumnMappings.Add("TDOC_Key", "TDOC_Key")
            tableMapping.ColumnMappings.Add("SYS_User_DNI", "SYS_User_DNI")
            tableMapping.ColumnMappings.Add("SYS_User_Telefono", "SYS_User_Telefono")
            tableMapping.ColumnMappings.Add("SYS_User_email", "SYS_User_email")
            tableMapping.ColumnMappings.Add("SYS_User_Direccion", "SYS_User_Direccion")
            tableMapping.ColumnMappings.Add("SYS_User_Celular", "SYS_User_Celular")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `SYS_Usuarios` WHERE ((`SYS_User_Login` = ?) AND ((? = 1 AND `SYS_ROL"& _ 
                "E_KEY` IS NULL) OR (`SYS_ROLE_KEY` = ?)) AND ((? = 1 AND `SYS_User_Pass` IS NULL"& _ 
                ") OR (`SYS_User_Pass` = ?)) AND ((? = 1 AND `SYS_User_Autorizacion` IS NULL) OR "& _ 
                "(`SYS_User_Autorizacion` = ?)) AND ((? = 1 AND `SYS_User_Nombre` IS NULL) OR (`S"& _ 
                "YS_User_Nombre` = ?)) AND ((? = 1 AND `SYS_User_Apellido` IS NULL) OR (`SYS_User"& _ 
                "_Apellido` = ?)) AND ((? = 1 AND `TDOC_Key` IS NULL) OR (`TDOC_Key` = ?)) AND (("& _ 
                "? = 1 AND `SYS_User_DNI` IS NULL) OR (`SYS_User_DNI` = ?)) AND ((? = 1 AND `SYS_"& _ 
                "User_Telefono` IS NULL) OR (`SYS_User_Telefono` = ?)) AND ((? = 1 AND `SYS_User_"& _ 
                "email` IS NULL) OR (`SYS_User_email` = ?)) AND ((? = 1 AND `SYS_User_Direccion` "& _ 
                "IS NULL) OR (`SYS_User_Direccion` = ?)) AND ((? = 1 AND `SYS_User_Celular` IS NU"& _ 
                "LL) OR (`SYS_User_Celular` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_Login", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Login", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_ROLE_KEY", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_KEY", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_ROLE_KEY", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_KEY", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_Pass", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Pass", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_Pass", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Pass", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_Autorizacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Autorizacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_Autorizacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Autorizacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_Nombre", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Nombre", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Nombre", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_Apellido", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Apellido", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_Apellido", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Apellido", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_DNI", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_DNI", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_DNI", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_DNI", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_Telefono", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Telefono", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_Telefono", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Telefono", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_email", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_email", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_email", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_email", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_Direccion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Direccion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_Direccion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Direccion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_Celular", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Celular", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_Celular", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Celular", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `SYS_Usuarios` (`SYS_User_Login`, `SYS_ROLE_KEY`, `SYS_User_Pass`, `S"& _ 
                "YS_User_Autorizacion`, `SYS_User_Nombre`, `SYS_User_Apellido`, `TDOC_Key`, `SYS_"& _ 
                "User_DNI`, `SYS_User_Telefono`, `SYS_User_email`, `SYS_User_Direccion`, `SYS_Use"& _ 
                "r_Celular`) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_Login", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Login", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_ROLE_KEY", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_KEY", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_Pass", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Pass", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_Autorizacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Autorizacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Nombre", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_Apellido", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Apellido", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_DNI", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_DNI", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_Telefono", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Telefono", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_email", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_email", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_Direccion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Direccion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_Celular", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Celular", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `SYS_Usuarios` SET `SYS_User_Login` = ?, `SYS_ROLE_KEY` = ?, `SYS_User_Pas"& _ 
                "s` = ?, `SYS_User_Autorizacion` = ?, `SYS_User_Nombre` = ?, `SYS_User_Apellido` "& _ 
                "= ?, `TDOC_Key` = ?, `SYS_User_DNI` = ?, `SYS_User_Telefono` = ?, `SYS_User_emai"& _ 
                "l` = ?, `SYS_User_Direccion` = ?, `SYS_User_Celular` = ? WHERE ((`SYS_User_Login"& _ 
                "` = ?) AND ((? = 1 AND `SYS_ROLE_KEY` IS NULL) OR (`SYS_ROLE_KEY` = ?)) AND ((? "& _ 
                "= 1 AND `SYS_User_Pass` IS NULL) OR (`SYS_User_Pass` = ?)) AND ((? = 1 AND `SYS_"& _ 
                "User_Autorizacion` IS NULL) OR (`SYS_User_Autorizacion` = ?)) AND ((? = 1 AND `S"& _ 
                "YS_User_Nombre` IS NULL) OR (`SYS_User_Nombre` = ?)) AND ((? = 1 AND `SYS_User_A"& _ 
                "pellido` IS NULL) OR (`SYS_User_Apellido` = ?)) AND ((? = 1 AND `TDOC_Key` IS NU"& _ 
                "LL) OR (`TDOC_Key` = ?)) AND ((? = 1 AND `SYS_User_DNI` IS NULL) OR (`SYS_User_D"& _ 
                "NI` = ?)) AND ((? = 1 AND `SYS_User_Telefono` IS NULL) OR (`SYS_User_Telefono` ="& _ 
                " ?)) AND ((? = 1 AND `SYS_User_email` IS NULL) OR (`SYS_User_email` = ?)) AND (("& _ 
                "? = 1 AND `SYS_User_Direccion` IS NULL) OR (`SYS_User_Direccion` = ?)) AND ((? ="& _ 
                " 1 AND `SYS_User_Celular` IS NULL) OR (`SYS_User_Celular` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_Login", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Login", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_ROLE_KEY", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_KEY", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_Pass", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Pass", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_Autorizacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Autorizacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Nombre", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_Apellido", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Apellido", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_DNI", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_DNI", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_Telefono", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Telefono", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_email", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_email", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_Direccion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Direccion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("SYS_User_Celular", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Celular", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_Login", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Login", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_ROLE_KEY", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_KEY", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_ROLE_KEY", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_ROLE_KEY", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_Pass", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Pass", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_Pass", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Pass", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_Autorizacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Autorizacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_Autorizacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Autorizacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_Nombre", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Nombre", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_Nombre", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Nombre", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_Apellido", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Apellido", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_Apellido", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Apellido", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_DNI", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_DNI", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_DNI", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_DNI", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_Telefono", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Telefono", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_Telefono", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Telefono", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_email", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_email", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_email", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_email", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_Direccion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Direccion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_Direccion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Direccion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_SYS_User_Celular", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Celular", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_SYS_User_Celular", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "SYS_User_Celular", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT SYS_User_Login, SYS_ROLE_KEY, SYS_User_Pass, SYS_User_Autorizacion, SYS_Us"& _ 
                "er_Nombre, SYS_User_Apellido, TDOC_Key, SYS_User_DNI, SYS_User_Telefono, SYS_Use"& _ 
                "r_email, SYS_User_Direccion, SYS_User_Celular FROM SYS_Usuarios"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.SYS_UsuariosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.SYS_UsuariosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.SYS_UsuariosDataTable = New Base2006DataSet3.SYS_UsuariosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.SYS_UsuariosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "SYS_Usuarios")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_SYS_User_Login As String, ByVal Original_SYS_ROLE_KEY As System.Nullable(Of Integer), ByVal Original_SYS_User_Pass As String, ByVal Original_SYS_User_Autorizacion As System.Nullable(Of Integer), ByVal Original_SYS_User_Nombre As String, ByVal Original_SYS_User_Apellido As String, ByVal Original_TDOC_Key As System.Nullable(Of Integer), ByVal Original_SYS_User_DNI As String, ByVal Original_SYS_User_Telefono As String, ByVal Original_SYS_User_email As String, ByVal Original_SYS_User_Direccion As String, ByVal Original_SYS_User_Celular As String) As Integer
            If (Original_SYS_User_Login Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_SYS_User_Login,String)
            End If
            If (Original_SYS_ROLE_KEY.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_SYS_ROLE_KEY.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_SYS_User_Pass Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_SYS_User_Pass,String)
            End If
            If (Original_SYS_User_Autorizacion.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SYS_User_Autorizacion.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Original_SYS_User_Nombre Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_SYS_User_Nombre,String)
            End If
            If (Original_SYS_User_Apellido Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_SYS_User_Apellido,String)
            End If
            If (Original_TDOC_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_TDOC_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (Original_SYS_User_DNI Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_SYS_User_DNI,String)
            End If
            If (Original_SYS_User_Telefono Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_SYS_User_Telefono,String)
            End If
            If (Original_SYS_User_email Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_SYS_User_email,String)
            End If
            If (Original_SYS_User_Direccion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_SYS_User_Direccion,String)
            End If
            If (Original_SYS_User_Celular Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_SYS_User_Celular,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal SYS_User_Login As String, ByVal SYS_ROLE_KEY As System.Nullable(Of Integer), ByVal SYS_User_Pass As String, ByVal SYS_User_Autorizacion As System.Nullable(Of Integer), ByVal SYS_User_Nombre As String, ByVal SYS_User_Apellido As String, ByVal TDOC_Key As System.Nullable(Of Integer), ByVal SYS_User_DNI As String, ByVal SYS_User_Telefono As String, ByVal SYS_User_email As String, ByVal SYS_User_Direccion As String, ByVal SYS_User_Celular As String) As Integer
            If (SYS_User_Login Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(SYS_User_Login,String)
            End If
            If (SYS_ROLE_KEY.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(SYS_ROLE_KEY.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (SYS_User_Pass Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SYS_User_Pass,String)
            End If
            If (SYS_User_Autorizacion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SYS_User_Autorizacion.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (SYS_User_Nombre Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SYS_User_Nombre,String)
            End If
            If (SYS_User_Apellido Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SYS_User_Apellido,String)
            End If
            If (TDOC_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TDOC_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (SYS_User_DNI Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(SYS_User_DNI,String)
            End If
            If (SYS_User_Telefono Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SYS_User_Telefono,String)
            End If
            If (SYS_User_email Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(SYS_User_email,String)
            End If
            If (SYS_User_Direccion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(SYS_User_Direccion,String)
            End If
            If (SYS_User_Celular Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(SYS_User_Celular,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal SYS_User_Login As String,  _
                    ByVal SYS_ROLE_KEY As System.Nullable(Of Integer),  _
                    ByVal SYS_User_Pass As String,  _
                    ByVal SYS_User_Autorizacion As System.Nullable(Of Integer),  _
                    ByVal SYS_User_Nombre As String,  _
                    ByVal SYS_User_Apellido As String,  _
                    ByVal TDOC_Key As System.Nullable(Of Integer),  _
                    ByVal SYS_User_DNI As String,  _
                    ByVal SYS_User_Telefono As String,  _
                    ByVal SYS_User_email As String,  _
                    ByVal SYS_User_Direccion As String,  _
                    ByVal SYS_User_Celular As String,  _
                    ByVal Original_SYS_User_Login As String,  _
                    ByVal Original_SYS_ROLE_KEY As System.Nullable(Of Integer),  _
                    ByVal Original_SYS_User_Pass As String,  _
                    ByVal Original_SYS_User_Autorizacion As System.Nullable(Of Integer),  _
                    ByVal Original_SYS_User_Nombre As String,  _
                    ByVal Original_SYS_User_Apellido As String,  _
                    ByVal Original_TDOC_Key As System.Nullable(Of Integer),  _
                    ByVal Original_SYS_User_DNI As String,  _
                    ByVal Original_SYS_User_Telefono As String,  _
                    ByVal Original_SYS_User_email As String,  _
                    ByVal Original_SYS_User_Direccion As String,  _
                    ByVal Original_SYS_User_Celular As String) As Integer
            If (SYS_User_Login Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(SYS_User_Login,String)
            End If
            If (SYS_ROLE_KEY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(SYS_ROLE_KEY.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            End If
            If (SYS_User_Pass Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(SYS_User_Pass,String)
            End If
            If (SYS_User_Autorizacion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SYS_User_Autorizacion.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (SYS_User_Nombre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SYS_User_Nombre,String)
            End If
            If (SYS_User_Apellido Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SYS_User_Apellido,String)
            End If
            If (TDOC_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TDOC_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (SYS_User_DNI Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(SYS_User_DNI,String)
            End If
            If (SYS_User_Telefono Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SYS_User_Telefono,String)
            End If
            If (SYS_User_email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(SYS_User_email,String)
            End If
            If (SYS_User_Direccion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(SYS_User_Direccion,String)
            End If
            If (SYS_User_Celular Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(SYS_User_Celular,String)
            End If
            If (Original_SYS_User_Login Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_SYS_User_Login,String)
            End If
            If (Original_SYS_ROLE_KEY.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_SYS_ROLE_KEY.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (Original_SYS_User_Pass Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_SYS_User_Pass,String)
            End If
            If (Original_SYS_User_Autorizacion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_SYS_User_Autorizacion.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (Original_SYS_User_Nombre Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_SYS_User_Nombre,String)
            End If
            If (Original_SYS_User_Apellido Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_SYS_User_Apellido,String)
            End If
            If (Original_TDOC_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_TDOC_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = System.DBNull.Value
            End If
            If (Original_SYS_User_DNI Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_SYS_User_DNI,String)
            End If
            If (Original_SYS_User_Telefono Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_SYS_User_Telefono,String)
            End If
            If (Original_SYS_User_email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_SYS_User_email,String)
            End If
            If (Original_SYS_User_Direccion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_SYS_User_Direccion,String)
            End If
            If (Original_SYS_User_Celular Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_SYS_User_Celular,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TiposDocumentoTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TiposDocumento"
            tableMapping.ColumnMappings.Add("TDOC_Key", "TDOC_Key")
            tableMapping.ColumnMappings.Add("TDOC_Descripcion", "TDOC_Descripcion")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `TiposDocumento` WHERE ((`TDOC_Key` = ?) AND ((? = 1 AND `TDOC_Descri"& _ 
                "pcion` IS NULL) OR (`TDOC_Descripcion` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_TDOC_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_TDOC_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `TiposDocumento` (`TDOC_Key`, `TDOC_Descripcion`) VALUES (?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("TDOC_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `TiposDocumento` SET `TDOC_Key` = ?, `TDOC_Descripcion` = ? WHERE ((`TDOC_"& _ 
                "Key` = ?) AND ((? = 1 AND `TDOC_Descripcion` IS NULL) OR (`TDOC_Descripcion` = ?"& _ 
                ")))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("TDOC_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Descripcion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_TDOC_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_TDOC_Descripcion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Descripcion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_TDOC_Descripcion", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "TDOC_Descripcion", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT TDOC_Key, TDOC_Descripcion FROM TiposDocumento"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.TiposDocumentoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.TiposDocumentoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.TiposDocumentoDataTable = New Base2006DataSet3.TiposDocumentoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.TiposDocumentoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "TiposDocumento")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_TDOC_Key As System.Nullable(Of Integer), ByVal Original_TDOC_Descripcion As String) As Integer
            If (Original_TDOC_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TDOC_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Original_TDOC_Descripcion Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_TDOC_Descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal TDOC_Key As System.Nullable(Of Integer), ByVal TDOC_Descripcion As String) As Integer
            If (TDOC_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(TDOC_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (TDOC_Descripcion Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(TDOC_Descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal TDOC_Key As System.Nullable(Of Integer), ByVal TDOC_Descripcion As String, ByVal Original_TDOC_Key As System.Nullable(Of Integer), ByVal Original_TDOC_Descripcion As String) As Integer
            If (TDOC_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(TDOC_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (TDOC_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TDOC_Descripcion,String)
            End If
            If (Original_TDOC_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_TDOC_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_TDOC_Descripcion Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_TDOC_Descripcion,String)
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.ComponentModel.ToolboxItem(true),  _
     System.ComponentModel.DataObjectAttribute(true),  _
     System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TurnosTableAdapter
        Inherits System.ComponentModel.Component
        
        Private WithEvents _adapter As System.Data.OleDb.OleDbDataAdapter
        
        Private _connection As System.Data.OleDb.OleDbConnection
        
        Private _commandCollection() As System.Data.OleDb.OleDbCommand
        
        Private _clearBeforeFill As Boolean
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As System.Data.OleDb.OleDbDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As System.Data.OleDb.OleDbConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),System.Data.OleDb.OleDbCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As System.Data.OleDb.OleDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New System.Data.OleDb.OleDbDataAdapter
            Dim tableMapping As System.Data.Common.DataTableMapping = New System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Turnos"
            tableMapping.ColumnMappings.Add("turno_key", "turno_key")
            tableMapping.ColumnMappings.Add("Turno_Fecha", "Turno_Fecha")
            tableMapping.ColumnMappings.Add("Turno_Hora", "Turno_Hora")
            tableMapping.ColumnMappings.Add("Pac_Key", "Pac_Key")
            tableMapping.ColumnMappings.Add("Med_Key", "Med_Key")
            tableMapping.ColumnMappings.Add("Turno_Estado", "Turno_Estado")
            tableMapping.ColumnMappings.Add("Turno_FechaAlta", "Turno_FechaAlta")
            tableMapping.ColumnMappings.Add("Turno_FechaCancelacion", "Turno_FechaCancelacion")
            tableMapping.ColumnMappings.Add("MOVI_Key", "MOVI_Key")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `Turnos` WHERE ((`turno_key` = ?) AND ((? = 1 AND `Turno_Fecha` IS NU"& _ 
                "LL) OR (`Turno_Fecha` = ?)) AND ((? = 1 AND `Turno_Hora` IS NULL) OR (`Turno_Hor"& _ 
                "a` = ?)) AND ((? = 1 AND `Pac_Key` IS NULL) OR (`Pac_Key` = ?)) AND ((? = 1 AND "& _ 
                "`Med_Key` IS NULL) OR (`Med_Key` = ?)) AND ((? = 1 AND `Turno_Estado` IS NULL) O"& _ 
                "R (`Turno_Estado` = ?)) AND ((? = 1 AND `Turno_FechaAlta` IS NULL) OR (`Turno_Fe"& _ 
                "chaAlta` = ?)) AND ((? = 1 AND `Turno_FechaCancelacion` IS NULL) OR (`Turno_Fech"& _ 
                "aCancelacion` = ?)) AND ((? = 1 AND `MOVI_Key` IS NULL) OR (`MOVI_Key` = ?)))"
            Me._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_turno_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "turno_key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Turno_Fecha", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Fecha", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Turno_Fecha", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Fecha", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Turno_Hora", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Hora", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Turno_Hora", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Hora", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Turno_Estado", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Estado", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Turno_Estado", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Estado", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Turno_FechaAlta", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_FechaAlta", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Turno_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_FechaAlta", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Turno_FechaCancelacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_FechaCancelacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Turno_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_FechaCancelacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_MOVI_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.DeleteCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_MOVI_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.InsertCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `Turnos` (`Turno_Fecha`, `Turno_Hora`, `Pac_Key`, `Med_Key`, `Turno_E"& _ 
                "stado`, `Turno_FechaAlta`, `Turno_FechaCancelacion`, `MOVI_Key`) VALUES (?, ?, ?"& _ 
                ", ?, ?, ?, ?, ?)"
            Me._adapter.InsertCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Turno_Fecha", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Fecha", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Turno_Hora", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Hora", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Turno_Estado", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Estado", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Turno_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_FechaAlta", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Turno_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_FechaCancelacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.InsertCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MOVI_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand = New System.Data.OleDb.OleDbCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `Turnos` SET `Turno_Fecha` = ?, `Turno_Hora` = ?, `Pac_Key` = ?, `Med_Key`"& _ 
                " = ?, `Turno_Estado` = ?, `Turno_FechaAlta` = ?, `Turno_FechaCancelacion` = ?, `"& _ 
                "MOVI_Key` = ? WHERE ((`turno_key` = ?) AND ((? = 1 AND `Turno_Fecha` IS NULL) OR"& _ 
                " (`Turno_Fecha` = ?)) AND ((? = 1 AND `Turno_Hora` IS NULL) OR (`Turno_Hora` = ?"& _ 
                ")) AND ((? = 1 AND `Pac_Key` IS NULL) OR (`Pac_Key` = ?)) AND ((? = 1 AND `Med_K"& _ 
                "ey` IS NULL) OR (`Med_Key` = ?)) AND ((? = 1 AND `Turno_Estado` IS NULL) OR (`Tu"& _ 
                "rno_Estado` = ?)) AND ((? = 1 AND `Turno_FechaAlta` IS NULL) OR (`Turno_FechaAlt"& _ 
                "a` = ?)) AND ((? = 1 AND `Turno_FechaCancelacion` IS NULL) OR (`Turno_FechaCance"& _ 
                "lacion` = ?)) AND ((? = 1 AND `MOVI_Key` IS NULL) OR (`MOVI_Key` = ?)))"
            Me._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Turno_Fecha", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Fecha", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Turno_Hora", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Hora", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Pac_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Med_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Turno_Estado", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Estado", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Turno_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_FechaAlta", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Turno_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_FechaCancelacion", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("MOVI_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Key", System.Data.DataRowVersion.Current, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_turno_key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "turno_key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Turno_Fecha", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Fecha", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Turno_Fecha", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Fecha", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Turno_Hora", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Hora", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Turno_Hora", System.Data.OleDb.OleDbType.VarWChar, 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Hora", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Pac_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Pac_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Pac_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Med_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Med_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Med_Key", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Turno_Estado", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Estado", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Turno_Estado", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_Estado", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Turno_FechaAlta", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_FechaAlta", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Turno_FechaAlta", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_FechaAlta", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_Turno_FechaCancelacion", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_FechaCancelacion", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_Turno_FechaCancelacion", System.Data.OleDb.OleDbType.[Date], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "Turno_FechaCancelacion", System.Data.DataRowVersion.Original, false, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("IsNull_MOVI_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Key", System.Data.DataRowVersion.Original, true, Nothing))
            Me._adapter.UpdateCommand.Parameters.Add(New System.Data.OleDb.OleDbParameter("Original_MOVI_Key", System.Data.OleDb.OleDbType.[Integer], 0, System.Data.ParameterDirection.Input, CType(0,Byte), CType(0,Byte), "MOVI_Key", System.Data.DataRowVersion.Original, false, Nothing))
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New System.Data.OleDb.OleDbConnection
            Me._connection.ConnectionString = Global.ConceptTestForm.My.MySettings.Default.Base2006ConnectionString1
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New System.Data.OleDb.OleDbCommand(0) {}
            Me._commandCollection(0) = New System.Data.OleDb.OleDbCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT turno_key, Turno_Fecha, Turno_Hora, Pac_Key, Med_Key, Turno_Estado, Turno_"& _ 
                "FechaAlta, Turno_FechaCancelacion, MOVI_Key FROM Turnos"
            Me._commandCollection(0).CommandType = System.Data.CommandType.Text
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As Base2006DataSet3.TurnosDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As Base2006DataSet3.TurnosDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Base2006DataSet3.TurnosDataTable = New Base2006DataSet3.TurnosDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As Base2006DataSet3.TurnosDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As Base2006DataSet3) As Integer
            Return Me.Adapter.Update(dataSet, "Turnos")
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New System.Data.DataRow() {dataRow})
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_turno_key As Integer, ByVal Original_Turno_Fecha As System.Nullable(Of Date), ByVal Original_Turno_Hora As String, ByVal Original_Pac_Key As System.Nullable(Of Integer), ByVal Original_Med_Key As System.Nullable(Of Integer), ByVal Original_Turno_Estado As System.Nullable(Of Integer), ByVal Original_Turno_FechaAlta As System.Nullable(Of Date), ByVal Original_Turno_FechaCancelacion As System.Nullable(Of Date), ByVal Original_MOVI_Key As System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_turno_key,Integer)
            If (Original_Turno_Fecha.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Turno_Fecha.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Original_Turno_Hora Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Turno_Hora,String)
            End If
            If (Original_Pac_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_Pac_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (Original_Med_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Med_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = System.DBNull.Value
            End If
            If (Original_Turno_Estado.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Turno_Estado.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (Original_Turno_FechaAlta.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_Turno_FechaAlta.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = System.DBNull.Value
            End If
            If (Original_Turno_FechaCancelacion.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_Turno_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (Original_MOVI_Key.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_MOVI_Key.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal Turno_Fecha As System.Nullable(Of Date), ByVal Turno_Hora As String, ByVal Pac_Key As System.Nullable(Of Integer), ByVal Med_Key As System.Nullable(Of Integer), ByVal Turno_Estado As System.Nullable(Of Integer), ByVal Turno_FechaAlta As System.Nullable(Of Date), ByVal Turno_FechaCancelacion As System.Nullable(Of Date), ByVal MOVI_Key As System.Nullable(Of Integer)) As Integer
            If (Turno_Fecha.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(Turno_Fecha.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Turno_Hora Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Turno_Hora,String)
            End If
            If (Pac_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Pac_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Med_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Med_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (Turno_Estado.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Turno_Estado.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Turno_FechaAlta.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Turno_FechaAlta.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Turno_FechaCancelacion.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Turno_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (MOVI_Key.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MOVI_Key.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Turno_Fecha As System.Nullable(Of Date),  _
                    ByVal Turno_Hora As String,  _
                    ByVal Pac_Key As System.Nullable(Of Integer),  _
                    ByVal Med_Key As System.Nullable(Of Integer),  _
                    ByVal Turno_Estado As System.Nullable(Of Integer),  _
                    ByVal Turno_FechaAlta As System.Nullable(Of Date),  _
                    ByVal Turno_FechaCancelacion As System.Nullable(Of Date),  _
                    ByVal MOVI_Key As System.Nullable(Of Integer),  _
                    ByVal Original_turno_key As Integer,  _
                    ByVal Original_Turno_Fecha As System.Nullable(Of Date),  _
                    ByVal Original_Turno_Hora As String,  _
                    ByVal Original_Pac_Key As System.Nullable(Of Integer),  _
                    ByVal Original_Med_Key As System.Nullable(Of Integer),  _
                    ByVal Original_Turno_Estado As System.Nullable(Of Integer),  _
                    ByVal Original_Turno_FechaAlta As System.Nullable(Of Date),  _
                    ByVal Original_Turno_FechaCancelacion As System.Nullable(Of Date),  _
                    ByVal Original_MOVI_Key As System.Nullable(Of Integer)) As Integer
            If (Turno_Fecha.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Turno_Fecha.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = System.DBNull.Value
            End If
            If (Turno_Hora Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Turno_Hora,String)
            End If
            If (Pac_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Pac_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = System.DBNull.Value
            End If
            If (Med_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Med_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = System.DBNull.Value
            End If
            If (Turno_Estado.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Turno_Estado.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = System.DBNull.Value
            End If
            If (Turno_FechaAlta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Turno_FechaAlta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = System.DBNull.Value
            End If
            If (Turno_FechaCancelacion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Turno_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = System.DBNull.Value
            End If
            If (MOVI_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MOVI_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_turno_key,Integer)
            If (Original_Turno_Fecha.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_Turno_Fecha.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = System.DBNull.Value
            End If
            If (Original_Turno_Hora Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_Turno_Hora,String)
            End If
            If (Original_Pac_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Pac_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = System.DBNull.Value
            End If
            If (Original_Med_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_Med_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = System.DBNull.Value
            End If
            If (Original_Turno_Estado.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_Turno_Estado.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = System.DBNull.Value
            End If
            If (Original_Turno_FechaAlta.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_Turno_FechaAlta.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = System.DBNull.Value
            End If
            If (Original_Turno_FechaCancelacion.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_Turno_FechaCancelacion.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = System.DBNull.Value
            End If
            If (Original_MOVI_Key.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_MOVI_Key.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = System.DBNull.Value
            End If
            Dim previousConnectionState As System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And System.Data.ConnectionState.Open)  _
                        <> System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
End Namespace
