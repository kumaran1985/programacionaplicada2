Imports System.Web.UI

Namespace JavaScript
    Public Class JavaScriptUtils

        Shared Sub JS_Calendar(ByVal objPagina As Page, ByVal st As System.Type)
            Dim sb As New System.Text.StringBuilder
            sb.AppendLine("/*  Copyright Mihai Bazon, 2002-2005  |  www.bazon.net/mishoo")
            sb.AppendLine(" * -----------------------------------------------------------")
            sb.AppendLine(" *")
            sb.AppendLine(" * The DHTML Calendar, version 1.0 'It is happening again'")
            sb.AppendLine(" *")
            sb.AppendLine(" * Details and latest version at:")
            sb.AppendLine(" * www.dynarch.com/projects/calendar")
            sb.AppendLine(" *")
            sb.AppendLine(" * This script is developed by Dynarch.com.  Visit us at www.dynarch.com.")
            sb.AppendLine(" *")
            sb.AppendLine(" * This script is distributed under the GNU Lesser General Public License.")
            sb.AppendLine(" * Read the entire license text here: http://www.gnu.org/licenses/lgpl.html")
            sb.AppendLine(" */")
            sb.AppendLine("// $Id: calendar.js,v 1.51 2005/03/07 16:44:31 mishoo Exp $")
            sb.AppendLine("/** The Calendar object constructor. */")
            sb.AppendLine("Calendar = function (firstDayOfWeek, dateStr, onSelected, onClose) {")
            sb.AppendLine("	// member variables")
            sb.AppendLine("	this.activeDiv = null;")
            sb.AppendLine("	this.currentDateEl = null;")
            sb.AppendLine("	this.getDateStatus = null;")
            sb.AppendLine("	this.getDateToolTip = null;")
            sb.AppendLine("	this.getDateText = null;")
            sb.AppendLine("	this.timeout = null;")
            sb.AppendLine("	this.onSelected = onSelected || null;")
            sb.AppendLine("	this.onClose = onClose || null;")
            sb.AppendLine("	this.dragging = false;")
            sb.AppendLine("	this.hidden = false;")
            sb.AppendLine("	this.minYear = 1970;")
            sb.AppendLine("	this.maxYear = 2050;")
            sb.AppendLine("	this.dateFormat = Calendar._TT['DEF_DATE_FORMAT'];")
            sb.AppendLine("	this.ttDateFormat = Calendar._TT['TT_DATE_FORMAT'];")
            sb.AppendLine("	this.isPopup = true;")
            sb.AppendLine("	this.weekNumbers = true;")
            sb.AppendLine("	this.firstDayOfWeek = typeof firstDayOfWeek == 'number' ? firstDayOfWeek : Calendar._FD; // 0 for Sunday, 1 for Monday, etc.")
            sb.AppendLine("	this.showsOtherMonths = false;")
            sb.AppendLine("	this.dateStr = dateStr;")
            sb.AppendLine("	this.ar_days = null;")
            sb.AppendLine("	this.showsTime = false;")
            sb.AppendLine("	this.time24 = true;")
            sb.AppendLine("	this.yearStep = 2;")
            sb.AppendLine("	this.hiliteToday = true;")
            sb.AppendLine("	this.multiple = null;")
            sb.AppendLine("	// HTML elements")
            sb.AppendLine("	this.table = null;")
            sb.AppendLine("	this.element = null;")
            sb.AppendLine("	this.tbody = null;")
            sb.AppendLine("	this.firstdayname = null;")
            sb.AppendLine("	// Combo boxes")
            sb.AppendLine("	this.monthsCombo = null;")
            sb.AppendLine("	this.yearsCombo = null;")
            sb.AppendLine("	this.hilitedMonth = null;")
            sb.AppendLine("	this.activeMonth = null;")
            sb.AppendLine("	this.hilitedYear = null;")
            sb.AppendLine("	this.activeYear = null;")
            sb.AppendLine("	// Information")
            sb.AppendLine("	this.dateClicked = false;")
            sb.AppendLine("	// one-time initializations")
            sb.AppendLine("	if (typeof Calendar._SDN == 'undefined') {")
            sb.AppendLine("		// table of short day names")
            sb.AppendLine("		if (typeof Calendar._SDN_len == 'undefined')")
            sb.AppendLine("			Calendar._SDN_len = 3;")
            sb.AppendLine("		var ar = new Array();")
            sb.AppendLine("		for (var i = 8; i > 0;) {")
            sb.AppendLine("			ar[--i] = Calendar._DN[i].substr(0, Calendar._SDN_len);")
            sb.AppendLine("		}")
            sb.AppendLine("		Calendar._SDN = ar;")
            sb.AppendLine("		// table of short month names")
            sb.AppendLine("		if (typeof Calendar._SMN_len == 'undefined')")
            sb.AppendLine("			Calendar._SMN_len = 3;")
            sb.AppendLine("		ar = new Array();")
            sb.AppendLine("		for (var i = 12; i > 0;) {")
            sb.AppendLine("			ar[--i] = Calendar._MN[i].substr(0, Calendar._SMN_len);")
            sb.AppendLine("		}")
            sb.AppendLine("		Calendar._SMN = ar;")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("// ** constants")
            sb.AppendLine("/// 'static', needed for event handlers.")
            sb.AppendLine("Calendar._C = null;")
            sb.AppendLine("/// detect a special case of 'web browser'")
            sb.AppendLine("Calendar.is_ie = ( /msie/i.test(navigator.userAgent) &&")
            sb.AppendLine("		   !/opera/i.test(navigator.userAgent) );")
            sb.AppendLine("Calendar.is_ie5 = ( Calendar.is_ie && /msie 5\.0/i.test(navigator.userAgent) );")
            sb.AppendLine("/// detect Opera browser")
            sb.AppendLine("Calendar.is_opera = /opera/i.test(navigator.userAgent);")
            sb.AppendLine("/// detect KHTML-based browsers")
            sb.AppendLine("Calendar.is_khtml = /Konqueror|Safari|KHTML/i.test(navigator.userAgent);")
            sb.AppendLine("// BEGIN: UTILITY FUNCTIONS; beware that these might be moved into a separate")
            sb.AppendLine("//        library, at some point.")
            sb.AppendLine("Calendar.getAbsolutePos = function(el) {")
            sb.AppendLine("	var SL = 0, ST = 0;")
            sb.AppendLine("	var is_div = /^div$/i.test(el.tagName);")
            sb.AppendLine("	if (is_div && el.scrollLeft)")
            sb.AppendLine("		SL = el.scrollLeft;")
            sb.AppendLine("	if (is_div && el.scrollTop)")
            sb.AppendLine("		ST = el.scrollTop;")
            sb.AppendLine("	var r = { x: el.offsetLeft - SL, y: el.offsetTop - ST };")
            sb.AppendLine("	if (el.offsetParent) {")
            sb.AppendLine("		var tmp = this.getAbsolutePos(el.offsetParent);")
            sb.AppendLine("		r.x += tmp.x;")
            sb.AppendLine("		r.y += tmp.y;")
            sb.AppendLine("	}")
            sb.AppendLine("	return r;")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.isRelated = function (el, evt) {")
            sb.AppendLine("	var related = evt.relatedTarget;")
            sb.AppendLine("	if (!related) {")
            sb.AppendLine("		var type = evt.type;")
            sb.AppendLine("		if (type == 'mouseover') {")
            sb.AppendLine("			related = evt.fromElement;")
            sb.AppendLine("		} else if (type == 'mouseout') {")
            sb.AppendLine("			related = evt.toElement;")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("	while (related) {")
            sb.AppendLine("		if (related == el) {")
            sb.AppendLine("			return true;")
            sb.AppendLine("		}")
            sb.AppendLine("		related = related.parentNode;")
            sb.AppendLine("	}")
            sb.AppendLine("	return false;")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.removeClass = function(el, className) {")
            sb.AppendLine("	if (!(el && el.className)) {")
            sb.AppendLine("		return;")
            sb.AppendLine("	}")
            sb.AppendLine("	var cls = el.className.split(' ');")
            sb.AppendLine("	var ar = new Array();")
            sb.AppendLine("	for (var i = cls.length; i > 0;) {")
            sb.AppendLine("		if (cls[--i] != className) {")
            sb.AppendLine("			ar[ar.length] = cls[i];")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("	el.className = ar.join(' ');")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.addClass = function(el, className) {")
            sb.AppendLine("	Calendar.removeClass(el, className);")
            sb.AppendLine("	el.className += ' ' + className;")
            sb.AppendLine("};")
            sb.AppendLine("// FIXME: the following 2 functions totally suck, are useless and should be replaced immediately.")
            sb.AppendLine("Calendar.getElement = function(ev) {")
            sb.AppendLine("	var f = Calendar.is_ie ? window.event.srcElement : ev.currentTarget;")
            sb.AppendLine("	while (f.nodeType != 1 || /^div$/i.test(f.tagName))")
            sb.AppendLine("		f = f.parentNode;")
            sb.AppendLine("	return f;")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.getTargetElement = function(ev) {")
            sb.AppendLine("	var f = Calendar.is_ie ? window.event.srcElement : ev.target;")
            sb.AppendLine("	while (f.nodeType != 1)")
            sb.AppendLine("		f = f.parentNode;")
            sb.AppendLine("	return f;")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.stopEvent = function(ev) {")
            sb.AppendLine("	ev || (ev = window.event);")
            sb.AppendLine("	if (Calendar.is_ie) {")
            sb.AppendLine("		ev.cancelBubble = true;")
            sb.AppendLine("		ev.returnValue = false;")
            sb.AppendLine("	} else {")
            sb.AppendLine("		ev.preventDefault();")
            sb.AppendLine("		ev.stopPropagation();")
            sb.AppendLine("	}")
            sb.AppendLine("	return false;")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.addEvent = function(el, evname, func) {")
            sb.AppendLine("	if (el.attachEvent) { // IE")
            sb.AppendLine("		el.attachEvent('on' + evname, func);")
            sb.AppendLine("	} else if (el.addEventListener) { // Gecko / W3C")
            sb.AppendLine("		el.addEventListener(evname, func, true);")
            sb.AppendLine("	} else {")
            sb.AppendLine("		el['on' + evname] = func;")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.removeEvent = function(el, evname, func) {")
            sb.AppendLine("	if (el.detachEvent) { // IE")
            sb.AppendLine("		el.detachEvent('on' + evname, func);")
            sb.AppendLine("	} else if (el.removeEventListener) { // Gecko / W3C")
            sb.AppendLine("		el.removeEventListener(evname, func, true);")
            sb.AppendLine("	} else {")
            sb.AppendLine("		el['on' + evname] = null;")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.createElement = function(type, parent) {")
            sb.AppendLine("	var el = null;")
            sb.AppendLine("	if (document.createElementNS) {")
            sb.AppendLine("		// use the XHTML namespace; IE won't normally get here unless")
            sb.AppendLine("		// _they_ 'fix' the DOM2 implementation.")
            sb.AppendLine("		el = document.createElementNS('http://www.w3.org/1999/xhtml', type);")
            sb.AppendLine("	} else {")
            sb.AppendLine("		el = document.createElement(type);")
            sb.AppendLine("	}")
            sb.AppendLine("	if (typeof parent != 'undefined') {")
            sb.AppendLine("		parent.appendChild(el);")
            sb.AppendLine("	}")
            sb.AppendLine("	return el;")
            sb.AppendLine("};")
            sb.AppendLine("// END: UTILITY FUNCTIONS")
            sb.AppendLine("// BEGIN: CALENDAR STATIC FUNCTIONS")
            sb.AppendLine("/** Internal -- adds a set of events to make some element behave like a button. */")
            sb.AppendLine("Calendar._add_evs = function(el) {")
            sb.AppendLine("	with (Calendar) {")
            sb.AppendLine("		addEvent(el, 'mouseover', dayMouseOver);")
            sb.AppendLine("		addEvent(el, 'mousedown', dayMouseDown);")
            sb.AppendLine("		addEvent(el, 'mouseout', dayMouseOut);")
            sb.AppendLine("		if (is_ie) {")
            sb.AppendLine("			addEvent(el, 'dblclick', dayMouseDblClick);")
            sb.AppendLine("			el.setAttribute('unselectable', true);")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.findMonth = function(el) {")
            sb.AppendLine("	if (typeof el.month != 'undefined') {")
            sb.AppendLine("		return el;")
            sb.AppendLine("	} else if (typeof el.parentNode.month != 'undefined') {")
            sb.AppendLine("		return el.parentNode;")
            sb.AppendLine("	}")
            sb.AppendLine("	return null;")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.findYear = function(el) {")
            sb.AppendLine("	if (typeof el.year != 'undefined') {")
            sb.AppendLine("		return el;")
            sb.AppendLine("	} else if (typeof el.parentNode.year != 'undefined') {")
            sb.AppendLine("		return el.parentNode;")
            sb.AppendLine("	}")
            sb.AppendLine("	return null;")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.showMonthsCombo = function () {")
            sb.AppendLine("	var cal = Calendar._C;")
            sb.AppendLine("	if (!cal) {")
            sb.AppendLine("		return false;")
            sb.AppendLine("	}")
            sb.AppendLine("	var cal = cal;")
            sb.AppendLine("	var cd = cal.activeDiv;")
            sb.AppendLine("	var mc = cal.monthsCombo;")
            sb.AppendLine("	if (cal.hilitedMonth) {")
            sb.AppendLine("		Calendar.removeClass(cal.hilitedMonth, 'hilite');")
            sb.AppendLine("	}")
            sb.AppendLine("	if (cal.activeMonth) {")
            sb.AppendLine("		Calendar.removeClass(cal.activeMonth, 'active');")
            sb.AppendLine("	}")
            sb.AppendLine("	var mon = cal.monthsCombo.getElementsByTagName('div')[cal.date.getMonth()];")
            sb.AppendLine("	Calendar.addClass(mon, 'active');")
            sb.AppendLine("	cal.activeMonth = mon;")
            sb.AppendLine("	var s = mc.style;")
            sb.AppendLine("	s.display = 'block';")
            sb.AppendLine("	if (cd.navtype < 0)")
            sb.AppendLine("		s.left = cd.offsetLeft + 'px';")
            sb.AppendLine("	else {")
            sb.AppendLine("		var mcw = mc.offsetWidth;")
            sb.AppendLine("		if (typeof mcw == 'undefined')")
            sb.AppendLine("			// Konqueror brain-dead techniques")
            sb.AppendLine("			mcw = 50;")
            sb.AppendLine("		s.left = (cd.offsetLeft + cd.offsetWidth - mcw) + 'px';")
            sb.AppendLine("	}")
            sb.AppendLine("	s.top = (cd.offsetTop + cd.offsetHeight) + 'px';")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.showYearsCombo = function (fwd) {")
            sb.AppendLine("	var cal = Calendar._C;")
            sb.AppendLine("	if (!cal) {")
            sb.AppendLine("		return false;")
            sb.AppendLine("	}")
            sb.AppendLine("	var cal = cal;")
            sb.AppendLine("	var cd = cal.activeDiv;")
            sb.AppendLine("	var yc = cal.yearsCombo;")
            sb.AppendLine("	if (cal.hilitedYear) {")
            sb.AppendLine("		Calendar.removeClass(cal.hilitedYear, 'hilite');")
            sb.AppendLine("	}")
            sb.AppendLine("	if (cal.activeYear) {")
            sb.AppendLine("		Calendar.removeClass(cal.activeYear, 'active');")
            sb.AppendLine("	}")
            sb.AppendLine("	cal.activeYear = null;")
            sb.AppendLine("	var Y = cal.date.getFullYear() + (fwd ? 1 : -1);")
            sb.AppendLine("	var yr = yc.firstChild;")
            sb.AppendLine("	var show = false;")
            sb.AppendLine("	for (var i = 12; i > 0; --i) {")
            sb.AppendLine("		if (Y >= cal.minYear && Y <= cal.maxYear) {")
            sb.AppendLine("			yr.innerHTML = Y;")
            sb.AppendLine("			yr.year = Y;")
            sb.AppendLine("			yr.style.display = 'block';")
            sb.AppendLine("			show = true;")
            sb.AppendLine("		} else {")
            sb.AppendLine("			yr.style.display = 'none';")
            sb.AppendLine("		}")
            sb.AppendLine("		yr = yr.nextSibling;")
            sb.AppendLine("		Y += fwd ? cal.yearStep : -cal.yearStep;")
            sb.AppendLine("	}")
            sb.AppendLine("	if (show) {")
            sb.AppendLine("		var s = yc.style;")
            sb.AppendLine("		s.display = 'block';")
            sb.AppendLine("		if (cd.navtype < 0)")
            sb.AppendLine("			s.left = cd.offsetLeft + 'px';")
            sb.AppendLine("		else {")
            sb.AppendLine("			var ycw = yc.offsetWidth;")
            sb.AppendLine("			if (typeof ycw == 'undefined')")
            sb.AppendLine("				// Konqueror brain-dead techniques")
            sb.AppendLine("				ycw = 50;")
            sb.AppendLine("			s.left = (cd.offsetLeft + cd.offsetWidth - ycw) + 'px';")
            sb.AppendLine("		}")
            sb.AppendLine("		s.top = (cd.offsetTop + cd.offsetHeight) + 'px';")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("// event handlers")
            sb.AppendLine("Calendar.tableMouseUp = function(ev) {")
            sb.AppendLine("	var cal = Calendar._C;")
            sb.AppendLine("	if (!cal) {")
            sb.AppendLine("		return false;")
            sb.AppendLine("	}")
            sb.AppendLine("	if (cal.timeout) {")
            sb.AppendLine("		clearTimeout(cal.timeout);")
            sb.AppendLine("	}")
            sb.AppendLine("	var el = cal.activeDiv;")
            sb.AppendLine("	if (!el) {")
            sb.AppendLine("		return false;")
            sb.AppendLine("	}")
            sb.AppendLine("	var target = Calendar.getTargetElement(ev);")
            sb.AppendLine("	ev || (ev = window.event);")
            sb.AppendLine("	Calendar.removeClass(el, 'active');")
            sb.AppendLine("	if (target == el || target.parentNode == el) {")
            sb.AppendLine("		Calendar.cellClick(el, ev);")
            sb.AppendLine("	}")
            sb.AppendLine("	var mon = Calendar.findMonth(target);")
            sb.AppendLine("	var date = null;")
            sb.AppendLine("	if (mon) {")
            sb.AppendLine("		date = new Date(cal.date);")
            sb.AppendLine("		if (mon.month != date.getMonth()) {")
            sb.AppendLine("			date.setMonth(mon.month);")
            sb.AppendLine("			cal.setDate(date);")
            sb.AppendLine("			cal.dateClicked = false;")
            sb.AppendLine("			cal.callHandler();")
            sb.AppendLine("		}")
            sb.AppendLine("	} else {")
            sb.AppendLine("		var year = Calendar.findYear(target);")
            sb.AppendLine("		if (year) {")
            sb.AppendLine("			date = new Date(cal.date);")
            sb.AppendLine("			if (year.year != date.getFullYear()) {")
            sb.AppendLine("				date.setFullYear(year.year);")
            sb.AppendLine("				cal.setDate(date);")
            sb.AppendLine("				cal.dateClicked = false;")
            sb.AppendLine("				cal.callHandler();")
            sb.AppendLine("			}")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("	with (Calendar) {")
            sb.AppendLine("		removeEvent(document, 'mouseup', tableMouseUp);")
            sb.AppendLine("		removeEvent(document, 'mouseover', tableMouseOver);")
            sb.AppendLine("		removeEvent(document, 'mousemove', tableMouseOver);")
            sb.AppendLine("		cal._hideCombos();")
            sb.AppendLine("		_C = null;")
            sb.AppendLine("		return stopEvent(ev);")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.tableMouseOver = function (ev) {")
            sb.AppendLine("	var cal = Calendar._C;")
            sb.AppendLine("	if (!cal) {")
            sb.AppendLine("		return;")
            sb.AppendLine("	}")
            sb.AppendLine("	var el = cal.activeDiv;")
            sb.AppendLine("	var target = Calendar.getTargetElement(ev);")
            sb.AppendLine("	if (target == el || target.parentNode == el) {")
            sb.AppendLine("		Calendar.addClass(el, 'hilite active');")
            sb.AppendLine("		Calendar.addClass(el.parentNode, 'rowhilite');")
            sb.AppendLine("	} else {")
            sb.AppendLine("		if (typeof el.navtype == 'undefined' || (el.navtype != 50 && (el.navtype == 0 || Math.abs(el.navtype) > 2)))")
            sb.AppendLine("			Calendar.removeClass(el, 'active');")
            sb.AppendLine("		Calendar.removeClass(el, 'hilite');")
            sb.AppendLine("		Calendar.removeClass(el.parentNode, 'rowhilite');")
            sb.AppendLine("	}")
            sb.AppendLine("	ev || (ev = window.event);")
            sb.AppendLine("	if (el.navtype == 50 && target != el) {")
            sb.AppendLine("		var pos = Calendar.getAbsolutePos(el);")
            sb.AppendLine("		var w = el.offsetWidth;")
            sb.AppendLine("		var x = ev.clientX;")
            sb.AppendLine("		var dx;")
            sb.AppendLine("		var decrease = true;")
            sb.AppendLine("		if (x > pos.x + w) {")
            sb.AppendLine("			dx = x - pos.x - w;")
            sb.AppendLine("			decrease = false;")
            sb.AppendLine("		} else")
            sb.AppendLine("			dx = pos.x - x;")
            sb.AppendLine("		if (dx < 0) dx = 0;")
            sb.AppendLine("		var range = el._range;")
            sb.AppendLine("		var current = el._current;")
            sb.AppendLine("		var count = Math.floor(dx / 10) % range.length;")
            sb.AppendLine("		for (var i = range.length; --i >= 0;)")
            sb.AppendLine("			if (range[i] == current)")
            sb.AppendLine("				break;")
            sb.AppendLine("		while (count-- > 0)")
            sb.AppendLine("			if (decrease) {")
            sb.AppendLine("				if (--i < 0)")
            sb.AppendLine("					i = range.length - 1;")
            sb.AppendLine("			} else if ( ++i >= range.length )")
            sb.AppendLine("				i = 0;")
            sb.AppendLine("		var newval = range[i];")
            sb.AppendLine("		el.innerHTML = newval;")
            sb.AppendLine("		cal.onUpdateTime();")
            sb.AppendLine("	}")
            sb.AppendLine("	var mon = Calendar.findMonth(target);")
            sb.AppendLine("	if (mon) {")
            sb.AppendLine("		if (mon.month != cal.date.getMonth()) {")
            sb.AppendLine("			if (cal.hilitedMonth) {")
            sb.AppendLine("				Calendar.removeClass(cal.hilitedMonth, 'hilite');")
            sb.AppendLine("			}")
            sb.AppendLine("			Calendar.addClass(mon, 'hilite');")
            sb.AppendLine("			cal.hilitedMonth = mon;")
            sb.AppendLine("		} else if (cal.hilitedMonth) {")
            sb.AppendLine("			Calendar.removeClass(cal.hilitedMonth, 'hilite');")
            sb.AppendLine("		}")
            sb.AppendLine("	} else {")
            sb.AppendLine("		if (cal.hilitedMonth) {")
            sb.AppendLine("			Calendar.removeClass(cal.hilitedMonth, 'hilite');")
            sb.AppendLine("		}")
            sb.AppendLine("		var year = Calendar.findYear(target);")
            sb.AppendLine("		if (year) {")
            sb.AppendLine("			if (year.year != cal.date.getFullYear()) {")
            sb.AppendLine("				if (cal.hilitedYear) {")
            sb.AppendLine("					Calendar.removeClass(cal.hilitedYear, 'hilite');")
            sb.AppendLine("				}")
            sb.AppendLine("				Calendar.addClass(year, 'hilite');")
            sb.AppendLine("				cal.hilitedYear = year;")
            sb.AppendLine("			} else if (cal.hilitedYear) {")
            sb.AppendLine("				Calendar.removeClass(cal.hilitedYear, 'hilite');")
            sb.AppendLine("			}")
            sb.AppendLine("		} else if (cal.hilitedYear) {")
            sb.AppendLine("			Calendar.removeClass(cal.hilitedYear, 'hilite');")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("	return Calendar.stopEvent(ev);")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.tableMouseDown = function (ev) {")
            sb.AppendLine("	if (Calendar.getTargetElement(ev) == Calendar.getElement(ev)) {")
            sb.AppendLine("		return Calendar.stopEvent(ev);")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.calDragIt = function (ev) {")
            sb.AppendLine("	var cal = Calendar._C;")
            sb.AppendLine("	if (!(cal && cal.dragging)) {")
            sb.AppendLine("		return false;")
            sb.AppendLine("	}")
            sb.AppendLine("	var posX;")
            sb.AppendLine("	var posY;")
            sb.AppendLine("	if (Calendar.is_ie) {")
            sb.AppendLine("		posY = window.event.clientY + document.body.scrollTop;")
            sb.AppendLine("		posX = window.event.clientX + document.body.scrollLeft;")
            sb.AppendLine("	} else {")
            sb.AppendLine("		posX = ev.pageX;")
            sb.AppendLine("		posY = ev.pageY;")
            sb.AppendLine("	}")
            sb.AppendLine("	cal.hideShowCovered();")
            sb.AppendLine("	var st = cal.element.style;")
            sb.AppendLine("	st.left = (posX - cal.xOffs) + 'px';")
            sb.AppendLine("	st.top = (posY - cal.yOffs) + 'px';")
            sb.AppendLine("	return Calendar.stopEvent(ev);")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.calDragEnd = function (ev) {")
            sb.AppendLine("	var cal = Calendar._C;")
            sb.AppendLine("	if (!cal) {")
            sb.AppendLine("		return false;")
            sb.AppendLine("	}")
            sb.AppendLine("	cal.dragging = false;")
            sb.AppendLine("	with (Calendar) {")
            sb.AppendLine("		removeEvent(document, 'mousemove', calDragIt);")
            sb.AppendLine("		removeEvent(document, 'mouseup', calDragEnd);")
            sb.AppendLine("		tableMouseUp(ev);")
            sb.AppendLine("	}")
            sb.AppendLine("	cal.hideShowCovered();")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.dayMouseDown = function(ev) {")
            sb.AppendLine("	var el = Calendar.getElement(ev);")
            sb.AppendLine("	if (el.disabled) {")
            sb.AppendLine("		return false;")
            sb.AppendLine("	}")
            sb.AppendLine("	var cal = el.calendar;")
            sb.AppendLine("	cal.activeDiv = el;")
            sb.AppendLine("	Calendar._C = cal;")
            sb.AppendLine("	if (el.navtype != 300) with (Calendar) {")
            sb.AppendLine("		if (el.navtype == 50) {")
            sb.AppendLine("			el._current = el.innerHTML;")
            sb.AppendLine("			addEvent(document, 'mousemove', tableMouseOver);")
            sb.AppendLine("		} else")
            sb.AppendLine("			addEvent(document, Calendar.is_ie5 ? 'mousemove' : 'mouseover', tableMouseOver);")
            sb.AppendLine("		addClass(el, 'hilite active');")
            sb.AppendLine("		addEvent(document, 'mouseup', tableMouseUp);")
            sb.AppendLine("	} else if (cal.isPopup) {")
            sb.AppendLine("		cal._dragStart(ev);")
            sb.AppendLine("	}")
            sb.AppendLine("	if (el.navtype == -1 || el.navtype == 1) {")
            sb.AppendLine("		if (cal.timeout) clearTimeout(cal.timeout);")
            sb.AppendLine("		cal.timeout = setTimeout('Calendar.showMonthsCombo()', 250);")
            sb.AppendLine("	} else if (el.navtype == -2 || el.navtype == 2) {")
            sb.AppendLine("		if (cal.timeout) clearTimeout(cal.timeout);")
            sb.AppendLine("		cal.timeout = setTimeout((el.navtype > 0) ? 'Calendar.showYearsCombo(true)' : 'Calendar.showYearsCombo(false)', 250);")
            sb.AppendLine("	} else {")
            sb.AppendLine("		cal.timeout = null;")
            sb.AppendLine("	}")
            sb.AppendLine("	return Calendar.stopEvent(ev);")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.dayMouseDblClick = function(ev) {")
            sb.AppendLine("	Calendar.cellClick(Calendar.getElement(ev), ev || window.event);")
            sb.AppendLine("	if (Calendar.is_ie) {")
            sb.AppendLine("		document.selection.empty();")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.dayMouseOver = function(ev) {")
            sb.AppendLine("	var el = Calendar.getElement(ev);")
            sb.AppendLine("	if (Calendar.isRelated(el, ev) || Calendar._C || el.disabled) {")
            sb.AppendLine("		return false;")
            sb.AppendLine("	}")
            sb.AppendLine("	if (el.ttip) {")
            sb.AppendLine("		if (el.ttip.substr(0, 1) == '_') {")
            sb.AppendLine("			el.ttip = el.caldate.print(el.calendar.ttDateFormat) + el.ttip.substr(1);")
            sb.AppendLine("		}")
            sb.AppendLine("		el.calendar.tooltips.innerHTML = el.ttip;")
            sb.AppendLine("	}")
            sb.AppendLine("	if (el.navtype != 300) {")
            sb.AppendLine("		Calendar.addClass(el, 'hilite');")
            sb.AppendLine("		if (el.caldate) {")
            sb.AppendLine("			Calendar.addClass(el.parentNode, 'rowhilite');")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("	return Calendar.stopEvent(ev);")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.dayMouseOut = function(ev) {")
            sb.AppendLine("	with (Calendar) {")
            sb.AppendLine("		var el = getElement(ev);")
            sb.AppendLine("		if (isRelated(el, ev) || _C || el.disabled)")
            sb.AppendLine("			return false;")
            sb.AppendLine("		removeClass(el, 'hilite');")
            sb.AppendLine("		if (el.caldate)")
            sb.AppendLine("			removeClass(el.parentNode, 'rowhilite');")
            sb.AppendLine("		if (el.calendar)")
            sb.AppendLine("			el.calendar.tooltips.innerHTML = _TT['SEL_DATE'];")
            sb.AppendLine("		return stopEvent(ev);")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("/**")
            sb.AppendLine(" *  A generic 'click' handler :) handles all types of buttons defined in this")
            sb.AppendLine(" *  calendar.")
            sb.AppendLine(" */")
            sb.AppendLine("Calendar.cellClick = function(el, ev) {")
            sb.AppendLine("	var cal = el.calendar;")
            sb.AppendLine("	var closing = false;")
            sb.AppendLine("	var newdate = false;")
            sb.AppendLine("	var date = null;")
            sb.AppendLine("	if (typeof el.navtype == 'undefined') {")
            sb.AppendLine("		if (cal.currentDateEl) {")
            sb.AppendLine("			Calendar.removeClass(cal.currentDateEl, 'selected');")
            sb.AppendLine("			Calendar.addClass(el, 'selected');")
            sb.AppendLine("			closing = (cal.currentDateEl == el);")
            sb.AppendLine("			if (!closing) {")
            sb.AppendLine("				cal.currentDateEl = el;")
            sb.AppendLine("			}")
            sb.AppendLine("		}")
            sb.AppendLine("		cal.date.setDateOnly(el.caldate);")
            sb.AppendLine("		date = cal.date;")
            sb.AppendLine("		var other_month = !(cal.dateClicked = !el.otherMonth);")
            sb.AppendLine("		if (!other_month && !cal.currentDateEl)")
            sb.AppendLine("			cal._toggleMultipleDate(new Date(date));")
            sb.AppendLine("		else")
            sb.AppendLine("			newdate = !el.disabled;")
            sb.AppendLine("		// a date was clicked")
            sb.AppendLine("		if (other_month)")
            sb.AppendLine("			cal._init(cal.firstDayOfWeek, date);")
            sb.AppendLine("	} else {")
            sb.AppendLine("		if (el.navtype == 200) {")
            sb.AppendLine("			Calendar.removeClass(el, 'hilite');")
            sb.AppendLine("			cal.callCloseHandler();")
            sb.AppendLine("			return;")
            sb.AppendLine("		}")
            sb.AppendLine("		date = new Date(cal.date);")
            sb.AppendLine("		if (el.navtype == 0)")
            sb.AppendLine("			date.setDateOnly(new Date()); // TODAY")
            sb.AppendLine("		// unless 'today' was clicked, we assume no date was clicked so")
            sb.AppendLine("		// the selected handler will know not to close the calenar when")
            sb.AppendLine("		// in single-click mode.")
            sb.AppendLine("		// cal.dateClicked = (el.navtype == 0);")
            sb.AppendLine("		cal.dateClicked = false;")
            sb.AppendLine("		var year = date.getFullYear();")
            sb.AppendLine("		var mon = date.getMonth();")
            sb.AppendLine("		function setMonth(m) {")
            sb.AppendLine("			var day = date.getDate();")
            sb.AppendLine("			var max = date.getMonthDays(m);")
            sb.AppendLine("			if (day > max) {")
            sb.AppendLine("				date.setDate(max);")
            sb.AppendLine("			}")
            sb.AppendLine("			date.setMonth(m);")
            sb.AppendLine("		};")
            sb.AppendLine("		switch (el.navtype) {")
            sb.AppendLine("		    case 400:")
            sb.AppendLine("			Calendar.removeClass(el, 'hilite');")
            sb.AppendLine("			var text = Calendar._TT['ABOUT'];")
            sb.AppendLine("			if (typeof text != 'undefined') {")
            sb.AppendLine("				text += cal.showsTime ? Calendar._TT['ABOUT_TIME'] : '';")
            sb.AppendLine("			} else {")
            sb.AppendLine("				// FIXME: this should be removed as soon as lang files get updated!")
            sb.AppendLine("				text = 'Help and about box text is not translated into this language.\n' +")
            sb.AppendLine("					'If you know this language and you feel generous please update\n' +")
            sb.AppendLine("					'the corresponding file in \'lang\' subdir to match calendar-en.js\n' +")
            sb.AppendLine("					'and send it back to <mihai_bazon@yahoo.com> to get it into the distribution  ;-)\n\n' +")
            sb.AppendLine("					'Thank you!\n' +")
            sb.AppendLine("					'http://dynarch.com/mishoo/calendar.epl\n';")
            sb.AppendLine("			}")
            sb.AppendLine("			alert(text);")
            sb.AppendLine("			return;")
            sb.AppendLine("		    case -2:")
            sb.AppendLine("			if (year > cal.minYear) {")
            sb.AppendLine("				date.setFullYear(year - 1);")
            sb.AppendLine("			}")
            sb.AppendLine("			break;")
            sb.AppendLine("		    case -1:")
            sb.AppendLine("			if (mon > 0) {")
            sb.AppendLine("				setMonth(mon - 1);")
            sb.AppendLine("			} else if (year-- > cal.minYear) {")
            sb.AppendLine("				date.setFullYear(year);")
            sb.AppendLine("				setMonth(11);")
            sb.AppendLine("			}")
            sb.AppendLine("			break;")
            sb.AppendLine("		    case 1:")
            sb.AppendLine("			if (mon < 11) {")
            sb.AppendLine("				setMonth(mon + 1);")
            sb.AppendLine("			} else if (year < cal.maxYear) {")
            sb.AppendLine("				date.setFullYear(year + 1);")
            sb.AppendLine("				setMonth(0);")
            sb.AppendLine("			}")
            sb.AppendLine("			break;")
            sb.AppendLine("		    case 2:")
            sb.AppendLine("			if (year < cal.maxYear) {")
            sb.AppendLine("				date.setFullYear(year + 1);")
            sb.AppendLine("			}")
            sb.AppendLine("			break;")
            sb.AppendLine("		    case 100:")
            sb.AppendLine("			cal.setFirstDayOfWeek(el.fdow);")
            sb.AppendLine("			return;")
            sb.AppendLine("		    case 50:")
            sb.AppendLine("			var range = el._range;")
            sb.AppendLine("			var current = el.innerHTML;")
            sb.AppendLine("			for (var i = range.length; --i >= 0;)")
            sb.AppendLine("				if (range[i] == current)")
            sb.AppendLine("					break;")
            sb.AppendLine("			if (ev && ev.shiftKey) {")
            sb.AppendLine("				if (--i < 0)")
            sb.AppendLine("					i = range.length - 1;")
            sb.AppendLine("			} else if ( ++i >= range.length )")
            sb.AppendLine("				i = 0;")
            sb.AppendLine("			var newval = range[i];")
            sb.AppendLine("			el.innerHTML = newval;")
            sb.AppendLine("			cal.onUpdateTime();")
            sb.AppendLine("			return;")
            sb.AppendLine("		    case 0:")
            sb.AppendLine("			// TODAY will bring us here")
            sb.AppendLine("			if ((typeof cal.getDateStatus == 'function') &&")
            sb.AppendLine("			    cal.getDateStatus(date, date.getFullYear(), date.getMonth(), date.getDate())) {")
            sb.AppendLine("				return false;")
            sb.AppendLine("			}")
            sb.AppendLine("			break;")
            sb.AppendLine("		}")
            sb.AppendLine("		if (!date.equalsTo(cal.date)) {")
            sb.AppendLine("			cal.setDate(date);")
            sb.AppendLine("			newdate = true;")
            sb.AppendLine("		} else if (el.navtype == 0)")
            sb.AppendLine("			newdate = closing = true;")
            sb.AppendLine("	}")
            sb.AppendLine("	if (newdate) {")
            sb.AppendLine("		ev && cal.callHandler();")
            sb.AppendLine("	}")
            sb.AppendLine("	if (closing) {")
            sb.AppendLine("		Calendar.removeClass(el, 'hilite');")
            sb.AppendLine("		ev && cal.callCloseHandler();")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("// END: CALENDAR STATIC FUNCTIONS")
            sb.AppendLine("// BEGIN: CALENDAR OBJECT FUNCTIONS")
            sb.AppendLine("/**")
            sb.AppendLine(" *  This function creates the calendar inside the given parent.  If _par is")
            sb.AppendLine(" *  null than it creates a popup calendar inside the BODY element.  If _par is")
            sb.AppendLine(" *  an element, be it BODY, then it creates a non-popup calendar (still")
            sb.AppendLine(" *  hidden).  Some properties need to be set before calling this function.")
            sb.AppendLine(" */")
            sb.AppendLine("Calendar.prototype.create = function (_par) {")
            sb.AppendLine("	var parent = null;")
            sb.AppendLine("	if (! _par) {")
            sb.AppendLine("		// default parent is the document body, in which case we create")
            sb.AppendLine("		// a popup calendar.")
            sb.AppendLine("		parent = document.getElementsByTagName('body')[0];")
            sb.AppendLine("		this.isPopup = true;")
            sb.AppendLine("	} else {")
            sb.AppendLine("		parent = _par;")
            sb.AppendLine("		this.isPopup = false;")
            sb.AppendLine("	}")
            sb.AppendLine("	this.date = this.dateStr ? new Date(this.dateStr) : new Date();")
            sb.AppendLine("	var table = Calendar.createElement('table');")
            sb.AppendLine("	this.table = table;")
            sb.AppendLine("	table.cellSpacing = 0;")
            sb.AppendLine("	table.cellPadding = 0;")
            sb.AppendLine("	table.calendar = this;")
            sb.AppendLine("	Calendar.addEvent(table, 'mousedown', Calendar.tableMouseDown);")
            sb.AppendLine("	var div = Calendar.createElement('div');")
            sb.AppendLine("	this.element = div;")
            sb.AppendLine("	div.className = 'calendar';")
            sb.AppendLine("	if (this.isPopup) {")
            sb.AppendLine("		div.style.position = 'absolute';")
            sb.AppendLine("		div.style.display = 'none';")
            sb.AppendLine("	}")
            sb.AppendLine("	div.appendChild(table);")
            sb.AppendLine("	var thead = Calendar.createElement('thead', table);")
            sb.AppendLine("	var cell = null;")
            sb.AppendLine("	var row = null;")
            sb.AppendLine("	var cal = this;")
            sb.AppendLine("	var hh = function (text, cs, navtype) {")
            sb.AppendLine("		cell = Calendar.createElement('td', row);")
            sb.AppendLine("		cell.colSpan = cs;")
            sb.AppendLine("		cell.className = 'button';")
            sb.AppendLine("		if (navtype != 0 && Math.abs(navtype) <= 2)")
            sb.AppendLine("			cell.className += ' nav';")
            sb.AppendLine("		Calendar._add_evs(cell);")
            sb.AppendLine("		cell.calendar = cal;")
            sb.AppendLine("		cell.navtype = navtype;")
            sb.AppendLine("		cell.innerHTML = '<div unselectable=""on"">' + text + '</div>';")
            sb.AppendLine("		return cell;")
            sb.AppendLine("	};")
            sb.AppendLine("	row = Calendar.createElement('tr', thead);")
            sb.AppendLine("	var title_length = 6;")
            sb.AppendLine("	(this.isPopup) && --title_length;")
            sb.AppendLine("	(this.weekNumbers) && ++title_length;")
            sb.AppendLine("	hh('?', 1, 400).ttip = Calendar._TT['INFO'];")
            sb.AppendLine("	this.title = hh('', title_length, 300);")
            sb.AppendLine("	this.title.className = 'title';")
            sb.AppendLine("	if (this.isPopup) {")
            sb.AppendLine("		this.title.ttip = Calendar._TT['DRAG_TO_MOVE'];")
            sb.AppendLine("		this.title.style.cursor = 'move';")
            sb.AppendLine("		hh('&#x00d7;', 1, 200).ttip = Calendar._TT['CLOSE'];")
            sb.AppendLine("	}")
            sb.AppendLine("	row = Calendar.createElement('tr', thead);")
            sb.AppendLine("	row.className = 'headrow';")
            sb.AppendLine("	this._nav_py = hh('&#x00ab;', 1, -2);")
            sb.AppendLine("	this._nav_py.ttip = Calendar._TT['PREV_YEAR'];")
            sb.AppendLine("	this._nav_pm = hh('&#x2039;', 1, -1);")
            sb.AppendLine("	this._nav_pm.ttip = Calendar._TT['PREV_MONTH'];")
            sb.AppendLine("	this._nav_now = hh(Calendar._TT['TODAY'], this.weekNumbers ? 4 : 3, 0);")
            sb.AppendLine("	this._nav_now.ttip = Calendar._TT['GO_TODAY'];")
            sb.AppendLine("	this._nav_nm = hh('&#x203a;', 1, 1);")
            sb.AppendLine("	this._nav_nm.ttip = Calendar._TT['NEXT_MONTH'];")
            sb.AppendLine("	this._nav_ny = hh('&#x00bb;', 1, 2);")
            sb.AppendLine("	this._nav_ny.ttip = Calendar._TT['NEXT_YEAR'];")
            sb.AppendLine("	// day names")
            sb.AppendLine("	row = Calendar.createElement('tr', thead);")
            sb.AppendLine("	row.className = 'daynames';")
            sb.AppendLine("	if (this.weekNumbers) {")
            sb.AppendLine("		cell = Calendar.createElement('td', row);")
            sb.AppendLine("		cell.className = 'name wn';")
            sb.AppendLine("		cell.innerHTML = Calendar._TT['WK'];")
            sb.AppendLine("	}")
            sb.AppendLine("	for (var i = 7; i > 0; --i) {")
            sb.AppendLine("		cell = Calendar.createElement('td', row);")
            sb.AppendLine("		if (!i) {")
            sb.AppendLine("			cell.navtype = 100;")
            sb.AppendLine("			cell.calendar = this;")
            sb.AppendLine("			Calendar._add_evs(cell);")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("	this.firstdayname = (this.weekNumbers) ? row.firstChild.nextSibling : row.firstChild;")
            sb.AppendLine("	this._displayWeekdays();")
            sb.AppendLine("	var tbody = Calendar.createElement('tbody', table);")
            sb.AppendLine("	this.tbody = tbody;")
            sb.AppendLine("	for (i = 6; i > 0; --i) {")
            sb.AppendLine("		row = Calendar.createElement('tr', tbody);")
            sb.AppendLine("		if (this.weekNumbers) {")
            sb.AppendLine("			cell = Calendar.createElement('td', row);")
            sb.AppendLine("		}")
            sb.AppendLine("		for (var j = 7; j > 0; --j) {")
            sb.AppendLine("			cell = Calendar.createElement('td', row);")
            sb.AppendLine("			cell.calendar = this;")
            sb.AppendLine("			Calendar._add_evs(cell);")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("	if (this.showsTime) {")
            sb.AppendLine("		row = Calendar.createElement('tr', tbody);")
            sb.AppendLine("		row.className = 'time';")
            sb.AppendLine("		cell = Calendar.createElement('td', row);")
            sb.AppendLine("		cell.className = 'time';")
            sb.AppendLine("		cell.colSpan = 2;")
            sb.AppendLine("		cell.innerHTML = Calendar._TT['TIME'] || '&nbsp;';")
            sb.AppendLine("		cell = Calendar.createElement('td', row);")
            sb.AppendLine("		cell.className = 'time';")
            sb.AppendLine("		cell.colSpan = this.weekNumbers ? 4 : 3;")
            sb.AppendLine("		(function(){")
            sb.AppendLine("			function makeTimePart(className, init, range_start, range_end) {")
            sb.AppendLine("				var part = Calendar.createElement('span', cell);")
            sb.AppendLine("				part.className = className;")
            sb.AppendLine("				part.innerHTML = init;")
            sb.AppendLine("				part.calendar = cal;")
            sb.AppendLine("				part.ttip = Calendar._TT['TIME_PART'];")
            sb.AppendLine("				part.navtype = 50;")
            sb.AppendLine("				part._range = [];")
            sb.AppendLine("				if (typeof range_start != 'number')")
            sb.AppendLine("					part._range = range_start;")
            sb.AppendLine("				else {")
            sb.AppendLine("					for (var i = range_start; i <= range_end; ++i) {")
            sb.AppendLine("						var txt;")
            sb.AppendLine("						if (i < 10 && range_end >= 10) txt = '0' + i;")
            sb.AppendLine("						else txt = '' + i;")
            sb.AppendLine("						part._range[part._range.length] = txt;")
            sb.AppendLine("					}")
            sb.AppendLine("				}")
            sb.AppendLine("				Calendar._add_evs(part);")
            sb.AppendLine("				return part;")
            sb.AppendLine("			};")
            sb.AppendLine("			var hrs = cal.date.getHours();")
            sb.AppendLine("			var mins = cal.date.getMinutes();")
            sb.AppendLine("			var t12 = !cal.time24;")
            sb.AppendLine("			var pm = (hrs > 12);")
            sb.AppendLine("			if (t12 && pm) hrs -= 12;")
            sb.AppendLine("			var H = makeTimePart('hour', hrs, t12 ? 1 : 0, t12 ? 12 : 23);")
            sb.AppendLine("			var span = Calendar.createElement('span', cell);")
            sb.AppendLine("			span.innerHTML = ':';")
            sb.AppendLine("			span.className = 'colon';")
            sb.AppendLine("			var M = makeTimePart('minute', mins, 0, 59);")
            sb.AppendLine("			var AP = null;")
            sb.AppendLine("			cell = Calendar.createElement('td', row);")
            sb.AppendLine("			cell.className = 'time';")
            sb.AppendLine("			cell.colSpan = 2;")
            sb.AppendLine("			if (t12)")
            sb.AppendLine("				AP = makeTimePart('ampm', pm ? 'pm' : 'am', ['am', 'pm']);")
            sb.AppendLine("			else")
            sb.AppendLine("				cell.innerHTML = '&nbsp;';")
            sb.AppendLine("			cal.onSetTime = function() {")
            sb.AppendLine("				var pm, hrs = this.date.getHours(),")
            sb.AppendLine("					mins = this.date.getMinutes();")
            sb.AppendLine("				if (t12) {")
            sb.AppendLine("					pm = (hrs >= 12);")
            sb.AppendLine("					if (pm) hrs -= 12;")
            sb.AppendLine("					if (hrs == 0) hrs = 12;")
            sb.AppendLine("					AP.innerHTML = pm ? 'pm' : 'am';")
            sb.AppendLine("				}")
            sb.AppendLine("				H.innerHTML = (hrs < 10) ? ('0' + hrs) : hrs;")
            sb.AppendLine("				M.innerHTML = (mins < 10) ? ('0' + mins) : mins;")
            sb.AppendLine("			};")
            sb.AppendLine("			cal.onUpdateTime = function() {")
            sb.AppendLine("				var date = this.date;")
            sb.AppendLine("				var h = parseInt(H.innerHTML, 10);")
            sb.AppendLine("				if (t12) {")
            sb.AppendLine("					if (/pm/i.test(AP.innerHTML) && h < 12)")
            sb.AppendLine("						h += 12;")
            sb.AppendLine("					else if (/am/i.test(AP.innerHTML) && h == 12)")
            sb.AppendLine("						h = 0;")
            sb.AppendLine("				}")
            sb.AppendLine("				var d = date.getDate();")
            sb.AppendLine("				var m = date.getMonth();")
            sb.AppendLine("				var y = date.getFullYear();")
            sb.AppendLine("				date.setHours(h);")
            sb.AppendLine("				date.setMinutes(parseInt(M.innerHTML, 10));")
            sb.AppendLine("				date.setFullYear(y);")
            sb.AppendLine("				date.setMonth(m);")
            sb.AppendLine("				date.setDate(d);")
            sb.AppendLine("				this.dateClicked = false;")
            sb.AppendLine("				this.callHandler();")
            sb.AppendLine("			};")
            sb.AppendLine("		})();")
            sb.AppendLine("	} else {")
            sb.AppendLine("		this.onSetTime = this.onUpdateTime = function() {};")
            sb.AppendLine("	}")
            sb.AppendLine("	var tfoot = Calendar.createElement('tfoot', table);")
            sb.AppendLine("	row = Calendar.createElement('tr', tfoot);")
            sb.AppendLine("	row.className = 'footrow';")
            sb.AppendLine("	cell = hh(Calendar._TT['SEL_DATE'], this.weekNumbers ? 8 : 7, 300);")
            sb.AppendLine("	cell.className = 'ttip';")
            sb.AppendLine("	if (this.isPopup) {")
            sb.AppendLine("		cell.ttip = Calendar._TT['DRAG_TO_MOVE'];")
            sb.AppendLine("		cell.style.cursor = 'move';")
            sb.AppendLine("	}")
            sb.AppendLine("	this.tooltips = cell;")
            sb.AppendLine("	div = Calendar.createElement('div', this.element);")
            sb.AppendLine("	this.monthsCombo = div;")
            sb.AppendLine("	div.className = 'combo';")
            sb.AppendLine("	for (i = 0; i < Calendar._MN.length; ++i) {")
            sb.AppendLine("		var mn = Calendar.createElement('div');")
            sb.AppendLine("		mn.className = Calendar.is_ie ? 'label-IEfix' : 'label';")
            sb.AppendLine("		mn.month = i;")
            sb.AppendLine("		mn.innerHTML = Calendar._SMN[i];")
            sb.AppendLine("		div.appendChild(mn);")
            sb.AppendLine("	}")
            sb.AppendLine("	div = Calendar.createElement('div', this.element);")
            sb.AppendLine("	this.yearsCombo = div;")
            sb.AppendLine("	div.className = 'combo';")
            sb.AppendLine("	for (i = 12; i > 0; --i) {")
            sb.AppendLine("		var yr = Calendar.createElement('div');")
            sb.AppendLine("		yr.className = Calendar.is_ie ? 'label-IEfix' : 'label';")
            sb.AppendLine("		div.appendChild(yr);")
            sb.AppendLine("	}")
            sb.AppendLine("	this._init(this.firstDayOfWeek, this.date);")
            sb.AppendLine("	parent.appendChild(this.element);")
            sb.AppendLine("};")
            sb.AppendLine("/** keyboard navigation, only for popup calendars */")
            sb.AppendLine("Calendar._keyEvent = function(ev) {")
            sb.AppendLine("	var cal = window._dynarch_popupCalendar;")
            sb.AppendLine("	if (!cal || cal.multiple)")
            sb.AppendLine("		return false;")
            sb.AppendLine("	(Calendar.is_ie) && (ev = window.event);")
            sb.AppendLine("	var act = (Calendar.is_ie || ev.type == 'keypress'),")
            sb.AppendLine("		K = ev.keyCode;")
            sb.AppendLine("	if (ev.ctrlKey) {")
            sb.AppendLine("		switch (K) {")
            sb.AppendLine("		    case 37: // KEY left")
            sb.AppendLine("			act && Calendar.cellClick(cal._nav_pm);")
            sb.AppendLine("			break;")
            sb.AppendLine("		    case 38: // KEY up")
            sb.AppendLine("			act && Calendar.cellClick(cal._nav_py);")
            sb.AppendLine("			break;")
            sb.AppendLine("		    case 39: // KEY right")
            sb.AppendLine("			act && Calendar.cellClick(cal._nav_nm);")
            sb.AppendLine("			break;")
            sb.AppendLine("		    case 40: // KEY down")
            sb.AppendLine("			act && Calendar.cellClick(cal._nav_ny);")
            sb.AppendLine("			break;")
            sb.AppendLine("		    default:")
            sb.AppendLine("			return false;")
            sb.AppendLine("		}")
            sb.AppendLine("	} else switch (K) {")
            sb.AppendLine("	    case 32: // KEY space (now)")
            sb.AppendLine("		Calendar.cellClick(cal._nav_now);")
            sb.AppendLine("		break;")
            sb.AppendLine("	    case 27: // KEY esc")
            sb.AppendLine("		act && cal.callCloseHandler();")
            sb.AppendLine("		break;")
            sb.AppendLine("	    case 37: // KEY left")
            sb.AppendLine("	    case 38: // KEY up")
            sb.AppendLine("	    case 39: // KEY right")
            sb.AppendLine("	    case 40: // KEY down")
            sb.AppendLine("		if (act) {")
            sb.AppendLine("			var prev, x, y, ne, el, step;")
            sb.AppendLine("			prev = K == 37 || K == 38;")
            sb.AppendLine("			step = (K == 37 || K == 39) ? 1 : 7;")
            sb.AppendLine("			function setVars() {")
            sb.AppendLine("				el = cal.currentDateEl;")
            sb.AppendLine("				var p = el.pos;")
            sb.AppendLine("				x = p & 15;")
            sb.AppendLine("				y = p >> 4;")
            sb.AppendLine("				ne = cal.ar_days[y][x];")
            sb.AppendLine("			};setVars();")
            sb.AppendLine("			function prevMonth() {")
            sb.AppendLine("				var date = new Date(cal.date);")
            sb.AppendLine("				date.setDate(date.getDate() - step);")
            sb.AppendLine("				cal.setDate(date);")
            sb.AppendLine("			};")
            sb.AppendLine("			function nextMonth() {")
            sb.AppendLine("				var date = new Date(cal.date);")
            sb.AppendLine("				date.setDate(date.getDate() + step);")
            sb.AppendLine("				cal.setDate(date);")
            sb.AppendLine("			};")
            sb.AppendLine("			while (1) {")
            sb.AppendLine("				switch (K) {")
            sb.AppendLine("				    case 37: // KEY left")
            sb.AppendLine("					if (--x >= 0)")
            sb.AppendLine("						ne = cal.ar_days[y][x];")
            sb.AppendLine("					else {")
            sb.AppendLine("						x = 6;")
            sb.AppendLine("						K = 38;")
            sb.AppendLine("						continue;")
            sb.AppendLine("					}")
            sb.AppendLine("					break;")
            sb.AppendLine("				    case 38: // KEY up")
            sb.AppendLine("					if (--y >= 0)")
            sb.AppendLine("						ne = cal.ar_days[y][x];")
            sb.AppendLine("					else {")
            sb.AppendLine("						prevMonth();")
            sb.AppendLine("						setVars();")
            sb.AppendLine("					}")
            sb.AppendLine("					break;")
            sb.AppendLine("				    case 39: // KEY right")
            sb.AppendLine("					if (++x < 7)")
            sb.AppendLine("						ne = cal.ar_days[y][x];")
            sb.AppendLine("					else {")
            sb.AppendLine("						x = 0;")
            sb.AppendLine("						K = 40;")
            sb.AppendLine("						continue;")
            sb.AppendLine("					}")
            sb.AppendLine("					break;")
            sb.AppendLine("				    case 40: // KEY down")
            sb.AppendLine("					if (++y < cal.ar_days.length)")
            sb.AppendLine("						ne = cal.ar_days[y][x];")
            sb.AppendLine("					else {")
            sb.AppendLine("						nextMonth();")
            sb.AppendLine("						setVars();")
            sb.AppendLine("					}")
            sb.AppendLine("					break;")
            sb.AppendLine("				}")
            sb.AppendLine("				break;")
            sb.AppendLine("			}")
            sb.AppendLine("			if (ne) {")
            sb.AppendLine("				if (!ne.disabled)")
            sb.AppendLine("					Calendar.cellClick(ne);")
            sb.AppendLine("				else if (prev)")
            sb.AppendLine("					prevMonth();")
            sb.AppendLine("				else")
            sb.AppendLine("					nextMonth();")
            sb.AppendLine("			}")
            sb.AppendLine("		}")
            sb.AppendLine("		break;")
            sb.AppendLine("	    case 13: // KEY enter")
            sb.AppendLine("		if (act)")
            sb.AppendLine("			Calendar.cellClick(cal.currentDateEl, ev);")
            sb.AppendLine("		break;")
            sb.AppendLine("	    default:")
            sb.AppendLine("		return false;")
            sb.AppendLine("	}")
            sb.AppendLine("	return Calendar.stopEvent(ev);")
            sb.AppendLine("};")
            sb.AppendLine("/**")
            sb.AppendLine(" *  (RE)Initializes the calendar to the given date and firstDayOfWeek")
            sb.AppendLine(" */")
            sb.AppendLine("Calendar.prototype._init = function (firstDayOfWeek, date) {")
            sb.AppendLine("	var today = new Date(),")
            sb.AppendLine("		TY = today.getFullYear(),")
            sb.AppendLine("		TM = today.getMonth(),")
            sb.AppendLine("		TD = today.getDate();")
            sb.AppendLine("	this.table.style.visibility = 'hidden';")
            sb.AppendLine("	var year = date.getFullYear();")
            sb.AppendLine("	if (year < this.minYear) {")
            sb.AppendLine("		year = this.minYear;")
            sb.AppendLine("		date.setFullYear(year);")
            sb.AppendLine("	} else if (year > this.maxYear) {")
            sb.AppendLine("		year = this.maxYear;")
            sb.AppendLine("		date.setFullYear(year);")
            sb.AppendLine("	}")
            sb.AppendLine("	this.firstDayOfWeek = firstDayOfWeek;")
            sb.AppendLine("	this.date = new Date(date);")
            sb.AppendLine("	var month = date.getMonth();")
            sb.AppendLine("	var mday = date.getDate();")
            sb.AppendLine("	var no_days = date.getMonthDays();")
            sb.AppendLine("	// calendar voodoo for computing the first day that would actually be")
            sb.AppendLine("	// displayed in the calendar, even if it's from the previous month.")
            sb.AppendLine("	// WARNING: this is magic. ;-)")
            sb.AppendLine("	date.setDate(1);")
            sb.AppendLine("	var day1 = (date.getDay() - this.firstDayOfWeek) % 7;")
            sb.AppendLine("	if (day1 < 0)")
            sb.AppendLine("		day1 += 7;")
            sb.AppendLine("	date.setDate(-day1);")
            sb.AppendLine("	date.setDate(date.getDate() + 1);")
            sb.AppendLine("	var row = this.tbody.firstChild;")
            sb.AppendLine("	var MN = Calendar._SMN[month];")
            sb.AppendLine("	var ar_days = this.ar_days = new Array();")
            sb.AppendLine("	var weekend = Calendar._TT['WEEKEND'];")
            sb.AppendLine("	var dates = this.multiple ? (this.datesCells = {}) : null;")
            sb.AppendLine("	for (var i = 0; i < 6; ++i, row = row.nextSibling) {")
            sb.AppendLine("		var cell = row.firstChild;")
            sb.AppendLine("		if (this.weekNumbers) {")
            sb.AppendLine("			cell.className = 'day wn';")
            sb.AppendLine("			cell.innerHTML = date.getWeekNumber();")
            sb.AppendLine("			cell = cell.nextSibling;")
            sb.AppendLine("		}")
            sb.AppendLine("		row.className = 'daysrow';")
            sb.AppendLine("		var hasdays = false, iday, dpos = ar_days[i] = [];")
            sb.AppendLine("		for (var j = 0; j < 7; ++j, cell = cell.nextSibling, date.setDate(iday + 1)) {")
            sb.AppendLine("			iday = date.getDate();")
            sb.AppendLine("			var wday = date.getDay();")
            sb.AppendLine("			cell.className = 'day';")
            sb.AppendLine("			cell.pos = i << 4 | j;")
            sb.AppendLine("			dpos[j] = cell;")
            sb.AppendLine("			var current_month = (date.getMonth() == month);")
            sb.AppendLine("			if (!current_month) {")
            sb.AppendLine("				if (this.showsOtherMonths) {")
            sb.AppendLine("					cell.className += ' othermonth';")
            sb.AppendLine("					cell.otherMonth = true;")
            sb.AppendLine("				} else {")
            sb.AppendLine("					cell.className = 'emptycell';")
            sb.AppendLine("					cell.innerHTML = '&nbsp;';")
            sb.AppendLine("					cell.disabled = true;")
            sb.AppendLine("					continue;")
            sb.AppendLine("				}")
            sb.AppendLine("			} else {")
            sb.AppendLine("				cell.otherMonth = false;")
            sb.AppendLine("				hasdays = true;")
            sb.AppendLine("			}")
            sb.AppendLine("			cell.disabled = false;")
            sb.AppendLine("			cell.innerHTML = this.getDateText ? this.getDateText(date, iday) : iday;")
            sb.AppendLine("			if (dates)")
            sb.AppendLine("				dates[date.print('%Y%m%d')] = cell;")
            sb.AppendLine("			if (this.getDateStatus) {")
            sb.AppendLine("				var status = this.getDateStatus(date, year, month, iday);")
            sb.AppendLine("				if (this.getDateToolTip) {")
            sb.AppendLine("					var toolTip = this.getDateToolTip(date, year, month, iday);")
            sb.AppendLine("					if (toolTip)")
            sb.AppendLine("						cell.title = toolTip;")
            sb.AppendLine("				}")
            sb.AppendLine("				if (status === true) {")
            sb.AppendLine("					cell.className += ' disabled';")
            sb.AppendLine("					cell.disabled = true;")
            sb.AppendLine("				} else {")
            sb.AppendLine("					if (/disabled/i.test(status))")
            sb.AppendLine("						cell.disabled = true;")
            sb.AppendLine("					cell.className += ' ' + status;")
            sb.AppendLine("				}")
            sb.AppendLine("			}")
            sb.AppendLine("			if (!cell.disabled) {")
            sb.AppendLine("				cell.caldate = new Date(date);")
            sb.AppendLine("				cell.ttip = '_';")
            sb.AppendLine("				if (!this.multiple && current_month")
            sb.AppendLine("				    && iday == mday && this.hiliteToday) {")
            sb.AppendLine("					cell.className += ' selected';")
            sb.AppendLine("					this.currentDateEl = cell;")
            sb.AppendLine("				}")
            sb.AppendLine("				if (date.getFullYear() == TY &&")
            sb.AppendLine("				    date.getMonth() == TM &&")
            sb.AppendLine("				    iday == TD) {")
            sb.AppendLine("					cell.className += ' today';")
            sb.AppendLine("					cell.ttip += Calendar._TT['PART_TODAY'];")
            sb.AppendLine("				}")
            sb.AppendLine("				if (weekend.indexOf(wday.toString()) != -1)")
            sb.AppendLine("					cell.className += cell.otherMonth ? ' oweekend' : ' weekend';")
            sb.AppendLine("			}")
            sb.AppendLine("		}")
            sb.AppendLine("		if (!(hasdays || this.showsOtherMonths))")
            sb.AppendLine("			row.className = 'emptyrow';")
            sb.AppendLine("	}")
            sb.AppendLine("	this.title.innerHTML = Calendar._MN[month] + ', ' + year;")
            sb.AppendLine("	this.onSetTime();")
            sb.AppendLine("	this.table.style.visibility = 'visible';")
            sb.AppendLine("	this._initMultipleDates();")
            sb.AppendLine("	// PROFILE")
            sb.AppendLine("	// this.tooltips.innerHTML = 'Generated in ' + ((new Date()) - today) + ' ms';")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.prototype._initMultipleDates = function() {")
            sb.AppendLine("	if (this.multiple) {")
            sb.AppendLine("		for (var i in this.multiple) {")
            sb.AppendLine("			var cell = this.datesCells[i];")
            sb.AppendLine("			var d = this.multiple[i];")
            sb.AppendLine("			if (!d)")
            sb.AppendLine("				continue;")
            sb.AppendLine("			if (cell)")
            sb.AppendLine("				cell.className += ' selected';")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.prototype._toggleMultipleDate = function(date) {")
            sb.AppendLine("	if (this.multiple) {")
            sb.AppendLine("		var ds = date.print('%Y%m%d');")
            sb.AppendLine("		var cell = this.datesCells[ds];")
            sb.AppendLine("		if (cell) {")
            sb.AppendLine("			var d = this.multiple[ds];")
            sb.AppendLine("			if (!d) {")
            sb.AppendLine("				Calendar.addClass(cell, 'selected');")
            sb.AppendLine("				this.multiple[ds] = date;")
            sb.AppendLine("			} else {")
            sb.AppendLine("				Calendar.removeClass(cell, 'selected');")
            sb.AppendLine("				delete this.multiple[ds];")
            sb.AppendLine("			}")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.prototype.setDateToolTipHandler = function (unaryFunction) {")
            sb.AppendLine("	this.getDateToolTip = unaryFunction;")
            sb.AppendLine("};")
            sb.AppendLine("/**")
            sb.AppendLine(" *  Calls _init function above for going to a certain date (but only if the")
            sb.AppendLine(" *  date is different than the currently selected one).")
            sb.AppendLine(" */")
            sb.AppendLine("Calendar.prototype.setDate = function (date) {")
            sb.AppendLine("	if (!date.equalsTo(this.date)) {")
            sb.AppendLine("		this._init(this.firstDayOfWeek, date);")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("/**")
            sb.AppendLine(" *  Refreshes the calendar.  Useful if the 'disabledHandler' function is")
            sb.AppendLine(" *  dynamic, meaning that the list of disabled date can change at runtime.")
            sb.AppendLine(" *  Just * call this function if you think that the list of disabled dates")
            sb.AppendLine(" *  should * change.")
            sb.AppendLine(" */")
            sb.AppendLine("Calendar.prototype.refresh = function () {")
            sb.AppendLine("	this._init(this.firstDayOfWeek, this.date);")
            sb.AppendLine("};")
            sb.AppendLine("/** Modifies the 'firstDayOfWeek' parameter (pass 0 for Synday, 1 for Monday, etc.). */")
            sb.AppendLine("Calendar.prototype.setFirstDayOfWeek = function (firstDayOfWeek) {")
            sb.AppendLine("	this._init(firstDayOfWeek, this.date);")
            sb.AppendLine("	this._displayWeekdays();")
            sb.AppendLine("};")
            sb.AppendLine("/**")
            sb.AppendLine(" *  Allows customization of what dates are enabled.  The 'unaryFunction'")
            sb.AppendLine(" *  parameter must be a function object that receives the date (as a JS Date")
            sb.AppendLine(" *  object) and returns a boolean value.  If the returned value is true then")
            sb.AppendLine(" *  the passed date will be marked as disabled.")
            sb.AppendLine(" */")
            sb.AppendLine("Calendar.prototype.setDateStatusHandler = Calendar.prototype.setDisabledHandler = function (unaryFunction) {")
            sb.AppendLine("	this.getDateStatus = unaryFunction;")
            sb.AppendLine("};")
            sb.AppendLine("/** Customization of allowed year range for the calendar. */")
            sb.AppendLine("Calendar.prototype.setRange = function (a, z) {")
            sb.AppendLine("	this.minYear = a;")
            sb.AppendLine("	this.maxYear = z;")
            sb.AppendLine("};")
            sb.AppendLine("/** Calls the first user handler (selectedHandler). */")
            sb.AppendLine("Calendar.prototype.callHandler = function () {")
            sb.AppendLine("	if (this.onSelected) {")
            sb.AppendLine("		this.onSelected(this, this.date.print(this.dateFormat));")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("/** Calls the second user handler (closeHandler). */")
            sb.AppendLine("Calendar.prototype.callCloseHandler = function () {")
            sb.AppendLine("	if (this.onClose) {")
            sb.AppendLine("		this.onClose(this);")
            sb.AppendLine("	}")
            sb.AppendLine("	this.hideShowCovered();")
            sb.AppendLine("};")
            sb.AppendLine("/** Removes the calendar object from the DOM tree and destroys it. */")
            sb.AppendLine("Calendar.prototype.destroy = function () {")
            sb.AppendLine("	var el = this.element.parentNode;")
            sb.AppendLine("	el.removeChild(this.element);")
            sb.AppendLine("	Calendar._C = null;")
            sb.AppendLine("	window._dynarch_popupCalendar = null;")
            sb.AppendLine("};")
            sb.AppendLine("/**")
            sb.AppendLine(" *  Moves the calendar element to a different section in the DOM tree (changes")
            sb.AppendLine(" *  its parent).")
            sb.AppendLine(" */")
            sb.AppendLine("Calendar.prototype.reparent = function (new_parent) {")
            sb.AppendLine("	var el = this.element;")
            sb.AppendLine("	el.parentNode.removeChild(el);")
            sb.AppendLine("	new_parent.appendChild(el);")
            sb.AppendLine("};")
            sb.AppendLine("// This gets called when the user presses a mouse button anywhere in the")
            sb.AppendLine("// document, if the calendar is shown.  If the click was outside the open")
            sb.AppendLine("// calendar this function closes it.")
            sb.AppendLine("Calendar._checkCalendar = function(ev) {")
            sb.AppendLine("	var calendar = window._dynarch_popupCalendar;")
            sb.AppendLine("	if (!calendar) {")
            sb.AppendLine("		return false;")
            sb.AppendLine("	}")
            sb.AppendLine("	var el = Calendar.is_ie ? Calendar.getElement(ev) : Calendar.getTargetElement(ev);")
            sb.AppendLine("	for (; el != null && el != calendar.element; el = el.parentNode);")
            sb.AppendLine("	if (el == null) {")
            sb.AppendLine("		// calls closeHandler which should hide the calendar.")
            sb.AppendLine("		window._dynarch_popupCalendar.callCloseHandler();")
            sb.AppendLine("		return Calendar.stopEvent(ev);")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("/** Shows the calendar. */")
            sb.AppendLine("Calendar.prototype.show = function () {")
            sb.AppendLine("	var rows = this.table.getElementsByTagName('tr');")
            sb.AppendLine("	for (var i = rows.length; i > 0;) {")
            sb.AppendLine("		var row = rows[--i];")
            sb.AppendLine("		Calendar.removeClass(row, 'rowhilite');")
            sb.AppendLine("		var cells = row.getElementsByTagName('td');")
            sb.AppendLine("		for (var j = cells.length; j > 0;) {")
            sb.AppendLine("			var cell = cells[--j];")
            sb.AppendLine("			Calendar.removeClass(cell, 'hilite');")
            sb.AppendLine("			Calendar.removeClass(cell, 'active');")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("	this.element.style.display = 'block';")
            sb.AppendLine("	this.hidden = false;")
            sb.AppendLine("	if (this.isPopup) {")
            sb.AppendLine("		window._dynarch_popupCalendar = this;")
            sb.AppendLine("		Calendar.addEvent(document, 'keydown', Calendar._keyEvent);")
            sb.AppendLine("		Calendar.addEvent(document, 'keypress', Calendar._keyEvent);")
            sb.AppendLine("		Calendar.addEvent(document, 'mousedown', Calendar._checkCalendar);")
            sb.AppendLine("	}")
            sb.AppendLine("	this.hideShowCovered();")
            sb.AppendLine("};")
            sb.AppendLine("/**")
            sb.AppendLine(" *  Hides the calendar.  Also removes any 'hilite' from the class of any TD")
            sb.AppendLine(" *  element.")
            sb.AppendLine(" */")
            sb.AppendLine("Calendar.prototype.hide = function () {")
            sb.AppendLine("	if (this.isPopup) {")
            sb.AppendLine("		Calendar.removeEvent(document, 'keydown', Calendar._keyEvent);")
            sb.AppendLine("		Calendar.removeEvent(document, 'keypress', Calendar._keyEvent);")
            sb.AppendLine("		Calendar.removeEvent(document, 'mousedown', Calendar._checkCalendar);")
            sb.AppendLine("	}")
            sb.AppendLine("	this.element.style.display = 'none';")
            sb.AppendLine("	this.hidden = true;")
            sb.AppendLine("	this.hideShowCovered();")
            sb.AppendLine("};")
            sb.AppendLine("/**")
            sb.AppendLine(" *  Shows the calendar at a given absolute position (beware that, depending on")
            sb.AppendLine(" *  the calendar element style -- position property -- this might be relative")
            sb.AppendLine(" *  to the parent's containing rectangle).")
            sb.AppendLine(" */")
            sb.AppendLine("Calendar.prototype.showAt = function (x, y) {")
            sb.AppendLine("	var s = this.element.style;")
            sb.AppendLine("	s.left = x + 'px';")
            sb.AppendLine("	s.top = y + 'px';")
            sb.AppendLine("	this.show();")
            sb.AppendLine("};")
            sb.AppendLine("/** Shows the calendar near a given element. */")
            sb.AppendLine("Calendar.prototype.showAtElement = function (el, opts) {")
            sb.AppendLine("	var self = this;")
            sb.AppendLine("	var p = Calendar.getAbsolutePos(el);")
            sb.AppendLine("	if (!opts || typeof opts != 'string') {")
            sb.AppendLine("		this.showAt(p.x, p.y + el.offsetHeight);")
            sb.AppendLine("		return true;")
            sb.AppendLine("	}")
            sb.AppendLine("	function fixPosition(box) {")
            sb.AppendLine("		if (box.x < 0)")
            sb.AppendLine("			box.x = 0;")
            sb.AppendLine("		if (box.y < 0)")
            sb.AppendLine("			box.y = 0;")
            sb.AppendLine("		var cp = document.createElement('div');")
            sb.AppendLine("		var s = cp.style;")
            sb.AppendLine("		s.position = 'absolute';")
            sb.AppendLine("		s.right = s.bottom = s.width = s.height = '0px';")
            sb.AppendLine("		document.body.appendChild(cp);")
            sb.AppendLine("		var br = Calendar.getAbsolutePos(cp);")
            sb.AppendLine("		document.body.removeChild(cp);")
            sb.AppendLine("		if (Calendar.is_ie) {")
            sb.AppendLine("			br.y += document.body.scrollTop;")
            sb.AppendLine("			br.x += document.body.scrollLeft;")
            sb.AppendLine("		} else {")
            sb.AppendLine("			br.y += window.scrollY;")
            sb.AppendLine("			br.x += window.scrollX;")
            sb.AppendLine("		}")
            sb.AppendLine("		var tmp = box.x + box.width - br.x;")
            sb.AppendLine("		if (tmp > 0) box.x -= tmp;")
            sb.AppendLine("		tmp = box.y + box.height - br.y;")
            sb.AppendLine("		if (tmp > 0) box.y -= tmp;")
            sb.AppendLine("	};")
            sb.AppendLine("	this.element.style.display = 'block';")
            sb.AppendLine("	Calendar.continuation_for_the_fucking_khtml_browser = function() {")
            sb.AppendLine("		var w = self.element.offsetWidth;")
            sb.AppendLine("		var h = self.element.offsetHeight;")
            sb.AppendLine("		self.element.style.display = 'none';")
            sb.AppendLine("		var valign = opts.substr(0, 1);")
            sb.AppendLine("		var halign = 'l';")
            sb.AppendLine("		if (opts.length > 1) {")
            sb.AppendLine("			halign = opts.substr(1, 1);")
            sb.AppendLine("		}")
            sb.AppendLine("		// vertical alignment")
            sb.AppendLine("		switch (valign) {")
            sb.AppendLine("		    case 'T': p.y -= h; break;")
            sb.AppendLine("		    case 'B': p.y += el.offsetHeight; break;")
            sb.AppendLine("		    case 'C': p.y += (el.offsetHeight - h) / 2; break;")
            sb.AppendLine("		    case 't': p.y += el.offsetHeight - h; break;")
            sb.AppendLine("		    case 'b': break; // already there")
            sb.AppendLine("		}")
            sb.AppendLine("		// horizontal alignment")
            sb.AppendLine("		switch (halign) {")
            sb.AppendLine("		    case 'L': p.x -= w; break;")
            sb.AppendLine("		    case 'R': p.x += el.offsetWidth; break;")
            sb.AppendLine("		    case 'C': p.x += (el.offsetWidth - w) / 2; break;")
            sb.AppendLine("		    case 'l': p.x += el.offsetWidth - w; break;")
            sb.AppendLine("		    case 'r': break; // already there")
            sb.AppendLine("		}")
            sb.AppendLine("		p.width = w;")
            sb.AppendLine("		p.height = h + 40;")
            sb.AppendLine("		self.monthsCombo.style.display = 'none';")
            sb.AppendLine("		fixPosition(p);")
            sb.AppendLine("		self.showAt(p.x, p.y);")
            sb.AppendLine("	};")
            sb.AppendLine("	if (Calendar.is_khtml)")
            sb.AppendLine("		setTimeout('Calendar.continuation_for_the_fucking_khtml_browser()', 10);")
            sb.AppendLine("	else")
            sb.AppendLine("		Calendar.continuation_for_the_fucking_khtml_browser();")
            sb.AppendLine("};")
            sb.AppendLine("/** Customizes the date format. */")
            sb.AppendLine("Calendar.prototype.setDateFormat = function (str) {")
            sb.AppendLine("	this.dateFormat = str;")
            sb.AppendLine("};")
            sb.AppendLine("/** Customizes the tooltip date format. */")
            sb.AppendLine("Calendar.prototype.setTtDateFormat = function (str) {")
            sb.AppendLine("	this.ttDateFormat = str;")
            sb.AppendLine("};")
            sb.AppendLine("/**")
            sb.AppendLine(" *  Tries to identify the date represented in a string.  If successful it also")
            sb.AppendLine(" *  calls this.setDate which moves the calendar to the given date.")
            sb.AppendLine(" */")
            sb.AppendLine("Calendar.prototype.parseDate = function(str, fmt) {")
            sb.AppendLine("	if (!fmt)")
            sb.AppendLine("		fmt = this.dateFormat;")
            sb.AppendLine("	this.setDate(Date.parseDate(str, fmt));")
            sb.AppendLine("};")
            sb.AppendLine("Calendar.prototype.hideShowCovered = function () {")
            sb.AppendLine("	if (!Calendar.is_ie && !Calendar.is_opera)")
            sb.AppendLine("		return;")
            sb.AppendLine("	function getVisib(obj){")
            sb.AppendLine("		var value = obj.style.visibility;")
            sb.AppendLine("		if (!value) {")
            sb.AppendLine("			if (document.defaultView && typeof (document.defaultView.getComputedStyle) == 'function') { // Gecko, W3C")
            sb.AppendLine("				if (!Calendar.is_khtml)")
            sb.AppendLine("					value = document.defaultView.")
            sb.AppendLine("						getComputedStyle(obj, '').getPropertyValue('visibility');")
            sb.AppendLine("				else")
            sb.AppendLine("					value = '';")
            sb.AppendLine("			} else if (obj.currentStyle) { // IE")
            sb.AppendLine("				value = obj.currentStyle.visibility;")
            sb.AppendLine("			} else")
            sb.AppendLine("				value = '';")
            sb.AppendLine("		}")
            sb.AppendLine("		return value;")
            sb.AppendLine("	};")
            sb.AppendLine("	var tags = new Array('applet', 'iframe', 'select');")
            sb.AppendLine("	var el = this.element;")
            sb.AppendLine("	var p = Calendar.getAbsolutePos(el);")
            sb.AppendLine("	var EX1 = p.x;")
            sb.AppendLine("	var EX2 = el.offsetWidth + EX1;")
            sb.AppendLine("	var EY1 = p.y;")
            sb.AppendLine("	var EY2 = el.offsetHeight + EY1;")
            sb.AppendLine("	for (var k = tags.length; k > 0; ) {")
            sb.AppendLine("		var ar = document.getElementsByTagName(tags[--k]);")
            sb.AppendLine("		var cc = null;")
            sb.AppendLine("		for (var i = ar.length; i > 0;) {")
            sb.AppendLine("			cc = ar[--i];")
            sb.AppendLine("			p = Calendar.getAbsolutePos(cc);")
            sb.AppendLine("			var CX1 = p.x;")
            sb.AppendLine("			var CX2 = cc.offsetWidth + CX1;")
            sb.AppendLine("			var CY1 = p.y;")
            sb.AppendLine("			var CY2 = cc.offsetHeight + CY1;")
            sb.AppendLine("			if (this.hidden || (CX1 > EX2) || (CX2 < EX1) || (CY1 > EY2) || (CY2 < EY1)) {")
            sb.AppendLine("				if (!cc.__msh_save_visibility) {")
            sb.AppendLine("					cc.__msh_save_visibility = getVisib(cc);")
            sb.AppendLine("				}")
            sb.AppendLine("				cc.style.visibility = cc.__msh_save_visibility;")
            sb.AppendLine("			} else {")
            sb.AppendLine("				if (!cc.__msh_save_visibility) {")
            sb.AppendLine("					cc.__msh_save_visibility = getVisib(cc);")
            sb.AppendLine("				}")
            sb.AppendLine("				cc.style.visibility = 'hidden';")
            sb.AppendLine("			}")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("/** Internal function; it displays the bar with the names of the weekday. */")
            sb.AppendLine("Calendar.prototype._displayWeekdays = function () {")
            sb.AppendLine("	var fdow = this.firstDayOfWeek;")
            sb.AppendLine("	var cell = this.firstdayname;")
            sb.AppendLine("	var weekend = Calendar._TT['WEEKEND'];")
            sb.AppendLine("	for (var i = 0; i < 7; ++i) {")
            sb.AppendLine("		cell.className = 'day name';")
            sb.AppendLine("		var realday = (i + fdow) % 7;")
            sb.AppendLine("		if (i) {")
            sb.AppendLine("			cell.ttip = Calendar._TT['DAY_FIRST'].replace('%s', Calendar._DN[realday]);")
            sb.AppendLine("			cell.navtype = 100;")
            sb.AppendLine("			cell.calendar = this;")
            sb.AppendLine("			cell.fdow = realday;")
            sb.AppendLine("			Calendar._add_evs(cell);")
            sb.AppendLine("		}")
            sb.AppendLine("		if (weekend.indexOf(realday.toString()) != -1) {")
            sb.AppendLine("			Calendar.addClass(cell, 'weekend');")
            sb.AppendLine("		}")
            sb.AppendLine("		cell.innerHTML = Calendar._SDN[(i + fdow) % 7];")
            sb.AppendLine("		cell = cell.nextSibling;")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("/** Internal function.  Hides all combo boxes that might be displayed. */")
            sb.AppendLine("Calendar.prototype._hideCombos = function () {")
            sb.AppendLine("	this.monthsCombo.style.display = 'none';")
            sb.AppendLine("	this.yearsCombo.style.display = 'none';")
            sb.AppendLine("};")
            sb.AppendLine("/** Internal function.  Starts dragging the element. */")
            sb.AppendLine("Calendar.prototype._dragStart = function (ev) {")
            sb.AppendLine("	if (this.dragging) {")
            sb.AppendLine("		return;")
            sb.AppendLine("	}")
            sb.AppendLine("	this.dragging = true;")
            sb.AppendLine("	var posX;")
            sb.AppendLine("	var posY;")
            sb.AppendLine("	if (Calendar.is_ie) {")
            sb.AppendLine("		posY = window.event.clientY + document.body.scrollTop;")
            sb.AppendLine("		posX = window.event.clientX + document.body.scrollLeft;")
            sb.AppendLine("	} else {")
            sb.AppendLine("		posY = ev.clientY + window.scrollY;")
            sb.AppendLine("		posX = ev.clientX + window.scrollX;")
            sb.AppendLine("	}")
            sb.AppendLine("	var st = this.element.style;")
            sb.AppendLine("	this.xOffs = posX - parseInt(st.left);")
            sb.AppendLine("	this.yOffs = posY - parseInt(st.top);")
            sb.AppendLine("	with (Calendar) {")
            sb.AppendLine("		addEvent(document, 'mousemove', calDragIt);")
            sb.AppendLine("		addEvent(document, 'mouseup', calDragEnd);")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("// BEGIN: DATE OBJECT PATCHES")
            sb.AppendLine("/** Adds the number of days array to the Date object. */")
            sb.AppendLine("Date._MD = new Array(31,28,31,30,31,30,31,31,30,31,30,31);")
            sb.AppendLine("/** Constants used for time computations */")
            sb.AppendLine("Date.SECOND = 1000 /* milliseconds */;")
            sb.AppendLine("Date.MINUTE = 60 * Date.SECOND;")
            sb.AppendLine("Date.HOUR   = 60 * Date.MINUTE;")
            sb.AppendLine("Date.DAY    = 24 * Date.HOUR;")
            sb.AppendLine("Date.WEEK   =  7 * Date.DAY;")
            sb.AppendLine("Date.parseDate = function(str, fmt) {")
            sb.AppendLine("	var today = new Date();")
            sb.AppendLine("	var y = 0;")
            sb.AppendLine("	var m = -1;")
            sb.AppendLine("	var d = 0;")
            sb.AppendLine("	var a = str.split(/\W+/);")
            sb.AppendLine("	var b = fmt.match(/%./g);")
            sb.AppendLine("	var i = 0, j = 0;")
            sb.AppendLine("	var hr = 0;")
            sb.AppendLine("	var min = 0;")
            sb.AppendLine("	for (i = 0; i < a.length; ++i) {")
            sb.AppendLine("		if (!a[i])")
            sb.AppendLine("			continue;")
            sb.AppendLine("		switch (b[i]) {")
            sb.AppendLine("		    case '%d':")
            sb.AppendLine("		    case '%e':")
            sb.AppendLine("			d = parseInt(a[i], 10);")
            sb.AppendLine("			break;")
            sb.AppendLine("		    case '%m':")
            sb.AppendLine("			m = parseInt(a[i], 10) - 1;")
            sb.AppendLine("			break;")
            sb.AppendLine("		    case '%Y':")
            sb.AppendLine("		    case '%y':")
            sb.AppendLine("			y = parseInt(a[i], 10);")
            sb.AppendLine("			(y < 100) && (y += (y > 29) ? 1900 : 2000);")
            sb.AppendLine("			break;")
            sb.AppendLine("		    case '%b':")
            sb.AppendLine("		    case '%B':")
            sb.AppendLine("			for (j = 0; j < 12; ++j) {")
            sb.AppendLine("				if (Calendar._MN[j].substr(0, a[i].length).toLowerCase() == a[i].toLowerCase()) { m = j; break; }")
            sb.AppendLine("			}")
            sb.AppendLine("			break;")
            sb.AppendLine("		    case '%H':")
            sb.AppendLine("		    case '%I':")
            sb.AppendLine("		    case '%k':")
            sb.AppendLine("		    case '%l':")
            sb.AppendLine("			hr = parseInt(a[i], 10);")
            sb.AppendLine("			break;")
            sb.AppendLine("		    case '%P':")
            sb.AppendLine("		    case '%p':")
            sb.AppendLine("			if (/pm/i.test(a[i]) && hr < 12)")
            sb.AppendLine("				hr += 12;")
            sb.AppendLine("			else if (/am/i.test(a[i]) && hr >= 12)")
            sb.AppendLine("				hr -= 12;")
            sb.AppendLine("			break;")
            sb.AppendLine("		    case '%M':")
            sb.AppendLine("			min = parseInt(a[i], 10);")
            sb.AppendLine("			break;")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("	if (isNaN(y)) y = today.getFullYear();")
            sb.AppendLine("	if (isNaN(m)) m = today.getMonth();")
            sb.AppendLine("	if (isNaN(d)) d = today.getDate();")
            sb.AppendLine("	if (isNaN(hr)) hr = today.getHours();")
            sb.AppendLine("	if (isNaN(min)) min = today.getMinutes();")
            sb.AppendLine("	if (y != 0 && m != -1 && d != 0)")
            sb.AppendLine("		return new Date(y, m, d, hr, min, 0);")
            sb.AppendLine("	y = 0; m = -1; d = 0;")
            sb.AppendLine("	for (i = 0; i < a.length; ++i) {")
            sb.AppendLine("		if (a[i].search(/[a-zA-Z]+/) != -1) {")
            sb.AppendLine("			var t = -1;")
            sb.AppendLine("			for (j = 0; j < 12; ++j) {")
            sb.AppendLine("				if (Calendar._MN[j].substr(0, a[i].length).toLowerCase() == a[i].toLowerCase()) { t = j; break; }")
            sb.AppendLine("			}")
            sb.AppendLine("			if (t != -1) {")
            sb.AppendLine("				if (m != -1) {")
            sb.AppendLine("					d = m+1;")
            sb.AppendLine("				}")
            sb.AppendLine("				m = t;")
            sb.AppendLine("			}")
            sb.AppendLine("		} else if (parseInt(a[i], 10) <= 12 && m == -1) {")
            sb.AppendLine("			m = a[i]-1;")
            sb.AppendLine("		} else if (parseInt(a[i], 10) > 31 && y == 0) {")
            sb.AppendLine("			y = parseInt(a[i], 10);")
            sb.AppendLine("			(y < 100) && (y += (y > 29) ? 1900 : 2000);")
            sb.AppendLine("		} else if (d == 0) {")
            sb.AppendLine("			d = a[i];")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("	if (y == 0)")
            sb.AppendLine("		y = today.getFullYear();")
            sb.AppendLine("	if (m != -1 && d != 0)")
            sb.AppendLine("		return new Date(y, m, d, hr, min, 0);")
            sb.AppendLine("	return today;")
            sb.AppendLine("};")
            sb.AppendLine("/** Returns the number of days in the current month */")
            sb.AppendLine("Date.prototype.getMonthDays = function(month) {")
            sb.AppendLine("	var year = this.getFullYear();")
            sb.AppendLine("	if (typeof month == 'undefined') {")
            sb.AppendLine("		month = this.getMonth();")
            sb.AppendLine("	}")
            sb.AppendLine("	if (((0 == (year%4)) && ( (0 != (year%100)) || (0 == (year%400)))) && month == 1) {")
            sb.AppendLine("		return 29;")
            sb.AppendLine("	} else {")
            sb.AppendLine("		return Date._MD[month];")
            sb.AppendLine("	}")
            sb.AppendLine("};")
            sb.AppendLine("/** Returns the number of day in the year. */")
            sb.AppendLine("Date.prototype.getDayOfYear = function() {")
            sb.AppendLine("	var now = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);")
            sb.AppendLine("	var then = new Date(this.getFullYear(), 0, 0, 0, 0, 0);")
            sb.AppendLine("	var time = now - then;")
            sb.AppendLine("	return Math.floor(time / Date.DAY);")
            sb.AppendLine("};")
            sb.AppendLine("/** Returns the number of the week in year, as defined in ISO 8601. */")
            sb.AppendLine("Date.prototype.getWeekNumber = function() {")
            sb.AppendLine("	var d = new Date(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0);")
            sb.AppendLine("	var DoW = d.getDay();")
            sb.AppendLine("	d.setDate(d.getDate() - (DoW + 6) % 7 + 3); // Nearest Thu")
            sb.AppendLine("	var ms = d.valueOf(); // GMT")
            sb.AppendLine("	d.setMonth(0);")
            sb.AppendLine("	d.setDate(4); // Thu in Week 1")
            sb.AppendLine("	return Math.round((ms - d.valueOf()) / (7 * 864e5)) + 1;")
            sb.AppendLine("};")
            sb.AppendLine("/** Checks date and time equality */")
            sb.AppendLine("Date.prototype.equalsTo = function(date) {")
            sb.AppendLine("	return ((this.getFullYear() == date.getFullYear()) &&")
            sb.AppendLine("		(this.getMonth() == date.getMonth()) &&")
            sb.AppendLine("		(this.getDate() == date.getDate()) &&")
            sb.AppendLine("		(this.getHours() == date.getHours()) &&")
            sb.AppendLine("		(this.getMinutes() == date.getMinutes()));")
            sb.AppendLine("};")
            sb.AppendLine("/** Set only the year, month, date parts (keep existing time) */")
            sb.AppendLine("Date.prototype.setDateOnly = function(date) {")
            sb.AppendLine("	var tmp = new Date(date);")
            sb.AppendLine("	this.setDate(1);")
            sb.AppendLine("	this.setFullYear(tmp.getFullYear());")
            sb.AppendLine("	this.setMonth(tmp.getMonth());")
            sb.AppendLine("	this.setDate(tmp.getDate());")
            sb.AppendLine("};")
            sb.AppendLine("/** Prints the date in a string according to the given format. */")
            sb.AppendLine("Date.prototype.print = function (str) {")
            sb.AppendLine("	var m = this.getMonth();")
            sb.AppendLine("	var d = this.getDate();")
            sb.AppendLine("	var y = this.getFullYear();")
            sb.AppendLine("	var wn = this.getWeekNumber();")
            sb.AppendLine("	var w = this.getDay();")
            sb.AppendLine("	var s = {};")
            sb.AppendLine("	var hr = this.getHours();")
            sb.AppendLine("	var pm = (hr >= 12);")
            sb.AppendLine("	var ir = (pm) ? (hr - 12) : hr;")
            sb.AppendLine("	var dy = this.getDayOfYear();")
            sb.AppendLine("	if (ir == 0)")
            sb.AppendLine("		ir = 12;")
            sb.AppendLine("	var min = this.getMinutes();")
            sb.AppendLine("	var sec = this.getSeconds();")
            sb.AppendLine("	s['%a'] = Calendar._SDN[w]; // abbreviated weekday name [FIXME: I18N]")
            sb.AppendLine("	s['%A'] = Calendar._DN[w]; // full weekday name")
            sb.AppendLine("	s['%b'] = Calendar._SMN[m]; // abbreviated month name [FIXME: I18N]")
            sb.AppendLine("	s['%B'] = Calendar._MN[m]; // full month name")
            sb.AppendLine("	// FIXME: %c : preferred date and time representation for the current locale")
            sb.AppendLine("	s['%C'] = 1 + Math.floor(y / 100); // the century number")
            sb.AppendLine("	s['%d'] = (d < 10) ? ('0' + d) : d; // the day of the month (range 01 to 31)")
            sb.AppendLine("	s['%e'] = d; // the day of the month (range 1 to 31)")
            sb.AppendLine("	// FIXME: %D : american date style: %m/%d/%y")
            sb.AppendLine("	// FIXME: %E, %F, %G, %g, %h (man strftime)")
            sb.AppendLine("	s['%H'] = (hr < 10) ? ('0' + hr) : hr; // hour, range 00 to 23 (24h format)")
            sb.AppendLine("	s['%I'] = (ir < 10) ? ('0' + ir) : ir; // hour, range 01 to 12 (12h format)")
            sb.AppendLine("	s['%j'] = (dy < 100) ? ((dy < 10) ? ('00' + dy) : ('0' + dy)) : dy; // day of the year (range 001 to 366)")
            sb.AppendLine("	s['%k'] = hr;		// hour, range 0 to 23 (24h format)")
            sb.AppendLine("	s['%l'] = ir;		// hour, range 1 to 12 (12h format)")
            sb.AppendLine("	s['%m'] = (m < 9) ? ('0' + (1+m)) : (1+m); // month, range 01 to 12")
            sb.AppendLine("	s['%M'] = (min < 10) ? ('0' + min) : min; // minute, range 00 to 59")
            sb.AppendLine("	s['%n'] = '\n';		// a newline character")
            sb.AppendLine("	s['%p'] = pm ? 'PM' : 'AM';")
            sb.AppendLine("	s['%P'] = pm ? 'pm' : 'am';")
            sb.AppendLine("	// FIXME: %r : the time in am/pm notation %I:%M:%S %p")
            sb.AppendLine("	// FIXME: %R : the time in 24-hour notation %H:%M")
            sb.AppendLine("	s['%s'] = Math.floor(this.getTime() / 1000);")
            sb.AppendLine("	s['%S'] = (sec < 10) ? ('0' + sec) : sec; // seconds, range 00 to 59")
            sb.AppendLine("	s['%t'] = '\t';		// a tab character")
            sb.AppendLine("	// FIXME: %T : the time in 24-hour notation (%H:%M:%S)")
            sb.AppendLine("	s['%U'] = s['%W'] = s['%V'] = (wn < 10) ? ('0' + wn) : wn;")
            sb.AppendLine("	s['%u'] = w + 1;	// the day of the week (range 1 to 7, 1 = MON)")
            sb.AppendLine("	s['%w'] = w;		// the day of the week (range 0 to 6, 0 = SUN)")
            sb.AppendLine("	// FIXME: %x : preferred date representation for the current locale without the time")
            sb.AppendLine("	// FIXME: %X : preferred time representation for the current locale without the date")
            sb.AppendLine("	s['%y'] = ('' + y).substr(2, 2); // year without the century (range 00 to 99)")
            sb.AppendLine("	s['%Y'] = y;		// year with the century")
            sb.AppendLine("	s['%%'] = '%';		// a literal '%' character")
            sb.AppendLine("	var re = /%./g;")
            sb.AppendLine("	if (!Calendar.is_ie5 && !Calendar.is_khtml)")
            sb.AppendLine("		return str.replace(re, function (par) { return s[par] || par; });")
            sb.AppendLine("	var a = str.match(re);")
            sb.AppendLine("	for (var i = 0; i < a.length; i++) {")
            sb.AppendLine("		var tmp = s[a[i]];")
            sb.AppendLine("		if (tmp) {")
            sb.AppendLine("			re = new RegExp(a[i], 'g');")
            sb.AppendLine("			str = str.replace(re, tmp);")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("	return str;")
            sb.AppendLine("};")
            sb.AppendLine("Date.prototype.__msh_oldSetFullYear = Date.prototype.setFullYear;")
            sb.AppendLine("Date.prototype.setFullYear = function(y) {")
            sb.AppendLine("	var d = new Date(this);")
            sb.AppendLine("	d.__msh_oldSetFullYear(y);")
            sb.AppendLine("	if (d.getMonth() != this.getMonth())")
            sb.AppendLine("		this.setDate(28);")
            sb.AppendLine("	this.__msh_oldSetFullYear(y);")
            sb.AppendLine("};")
            sb.AppendLine("// END: DATE OBJECT PATCHES")
            sb.AppendLine("// global object that remembers the calendar")
            sb.AppendLine("window._dynarch_popupCalendar = null;")
            If Not objPagina.ClientScript.IsStartupScriptRegistered("BrainWork_Calendar") Then
                objPagina.ClientScript.RegisterStartupScript(st, "BrainWork_Calendar", sb.ToString(), True)
            End If

        End Sub

        Shared Sub JS_CalendarLang_es(ByVal objPagina As Page, ByVal st As System.Type)
            Dim sb As New System.Text.StringBuilder
            sb.AppendLine("// ** I18N")
            sb.AppendLine("// Calendar ES (spanish) language")
            sb.AppendLine("// Author: Mihai Bazon, <mihai_bazon@yahoo.com>")
            sb.AppendLine("// Updater: Servilio Afre Puentes <servilios@yahoo.com>")
            sb.AppendLine("// Updated: 2004-06-03")
            sb.AppendLine("// Encoding: utf-8")
            sb.AppendLine("// Distributed under the same terms as the calendar itself.")
            sb.AppendLine("// For translators: please use UTF-8 if possible.  We strongly believe that")
            sb.AppendLine("// Unicode is the answer to a real internationalized world.  Also please")
            sb.AppendLine("// include your contact information in the header, as can be seen above.")
            sb.AppendLine("// full day names")
            sb.AppendLine("Calendar._DN = new Array")
            sb.AppendLine("('Domingo',")
            sb.AppendLine(" 'Lunes',")
            sb.AppendLine(" 'Martes',")
            sb.AppendLine(" 'Miércoles',")
            sb.AppendLine(" 'Jueves',")
            sb.AppendLine(" 'Viernes',")
            sb.AppendLine(" 'Sábado',")
            sb.AppendLine(" 'Domingo');")
            sb.AppendLine("// Please note that the following array of short day names (and the same goes")
            sb.AppendLine("// for short month names, _SMN) isn't absolutely necessary.  We give it here")
            sb.AppendLine("// for exemplification on how one can customize the short day names, but if")
            sb.AppendLine("// they are simply the first N letters of the full name you can simply say:")
            sb.AppendLine("//")
            sb.AppendLine("//   Calendar._SDN_len = N; // short day name length")
            sb.AppendLine("//   Calendar._SMN_len = N; // short month name length")
            sb.AppendLine("//")
            sb.AppendLine("// If N = 3 then this is not needed either since we assume a value of 3 if not")
            sb.AppendLine("// present, to be compatible with translation files that were written before")
            sb.AppendLine("// this feature.")
            sb.AppendLine("// short day names")
            sb.AppendLine("Calendar._SDN = new Array")
            sb.AppendLine("('Dom',")
            sb.AppendLine(" 'Lun',")
            sb.AppendLine(" 'Mar',")
            sb.AppendLine(" 'Mié',")
            sb.AppendLine(" 'Jue',")
            sb.AppendLine(" 'Vie',")
            sb.AppendLine(" 'Sáb',")
            sb.AppendLine(" 'Dom');")
            sb.AppendLine("// First day of the week. '0' means display Sunday first, '1' means display")
            sb.AppendLine("// Monday first, etc.")
            sb.AppendLine("Calendar._FD = 1;")
            sb.AppendLine("// full month names")
            sb.AppendLine("Calendar._MN = new Array")
            sb.AppendLine("('Enero',")
            sb.AppendLine(" 'Febrero',")
            sb.AppendLine(" 'Marzo',")
            sb.AppendLine(" 'Abril',")
            sb.AppendLine(" 'Mayo',")
            sb.AppendLine(" 'Junio',")
            sb.AppendLine(" 'Julio',")
            sb.AppendLine(" 'Agosto',")
            sb.AppendLine(" 'Septiembre',")
            sb.AppendLine(" 'Octubre',")
            sb.AppendLine(" 'Noviembre',")
            sb.AppendLine(" 'Diciembre');")
            sb.AppendLine("// short month names")
            sb.AppendLine("Calendar._SMN = new Array")
            sb.AppendLine("('Ene',")
            sb.AppendLine(" 'Feb',")
            sb.AppendLine(" 'Mar',")
            sb.AppendLine(" 'Abr',")
            sb.AppendLine(" 'May',")
            sb.AppendLine(" 'Jun',")
            sb.AppendLine(" 'Jul',")
            sb.AppendLine(" 'Ago',")
            sb.AppendLine(" 'Sep',")
            sb.AppendLine(" 'Oct',")
            sb.AppendLine(" 'Nov',")
            sb.AppendLine(" 'Dic');")
            sb.AppendLine("// tooltips")
            sb.AppendLine("Calendar._TT = {};")
            sb.AppendLine("Calendar._TT['INFO'] = 'Acerca del calendario';")
            sb.AppendLine("//Calendar._TT['ABOUT'] =")
            sb.AppendLine("//'Selector DHTML de Fecha/Hora\n' +")
            sb.AppendLine("//'(c) dynarch.com 2002-2005 / Author: Mihai Bazon\n' + // don't translate this this ;-)")
            sb.AppendLine("//'Para conseguir la última versión visite: http://www.dynarch.com/projects/calendar/\n' +")
            sb.AppendLine("//'Distribuido bajo licencia GNU LGPL. Visite http://gnu.org/licenses/lgpl.html para más detalles.' +")
            sb.AppendLine("//'\n\n' +")
            sb.AppendLine("//'Selección de fecha:\n' +")
            sb.AppendLine("//'- Use los botones \xab, \xbb para seleccionar el año\n' +")
            sb.AppendLine("//'- Use los botones ' + String.fromCharCode(0x2039) + ', ' + String.fromCharCode(0x203a) + ' para seleccionar el mes\n' +")
            sb.AppendLine("//'- Mantenga pulsado el ratón en cualquiera de estos botones para una selección rápida.';")
            sb.AppendLine("Calendar._TT['ABOUT'] =")
            sb.AppendLine("'Selector de Fecha/Hora\n' +")
            sb.AppendLine("'Selección de fecha:\n' +")
            sb.AppendLine("'- Use los botones \xab, \xbb para seleccionar el año\n' +")
            sb.AppendLine("'- Use los botones ' + String.fromCharCode(0x2039) + ', ' + String.fromCharCode(0x203a) + ' para seleccionar el mes\n' +")
            sb.AppendLine("'- Mantenga pulsado el ratón en cualquiera de estos botones para una selección rápida.';")
            sb.AppendLine("Calendar._TT['ABOUT_TIME'] = '\n\n' +")
            sb.AppendLine("'Selección de hora:\n' +")
            sb.AppendLine("'- Pulse en cualquiera de las partes de la hora para incrementarla\n' +")
            sb.AppendLine("'- o pulse las mayúsculas mientras hace clic para decrementarla\n' +")
            sb.AppendLine("'- o haga clic y arrastre el ratón para una selección más rápida.';")
            sb.AppendLine("Calendar._TT['PREV_YEAR'] = 'Año anterior (mantener para menú)';")
            sb.AppendLine("Calendar._TT['PREV_MONTH'] = 'Mes anterior (mantener para menú)';")
            sb.AppendLine("Calendar._TT['GO_TODAY'] = 'Ir a hoy';")
            sb.AppendLine("Calendar._TT['NEXT_MONTH'] = 'Mes siguiente (mantener para menú)';")
            sb.AppendLine("Calendar._TT['NEXT_YEAR'] = 'Año siguiente (mantener para menú)';")
            sb.AppendLine("Calendar._TT['SEL_DATE'] = 'Seleccionar fecha';")
            sb.AppendLine("Calendar._TT['DRAG_TO_MOVE'] = 'Arrastrar para mover';")
            sb.AppendLine("Calendar._TT['PART_TODAY'] = ' (hoy)';")
            sb.AppendLine("// the following is to inform that '%s' is to be the first day of week")
            sb.AppendLine("// %s will be replaced with the day name.")
            sb.AppendLine("Calendar._TT['DAY_FIRST'] = 'Hacer %s primer día de la semana';")
            sb.AppendLine("// This may be locale-dependent.  It specifies the week-end days, as an array")
            sb.AppendLine("// of comma-separated numbers.  The numbers are from 0 to 6: 0 means Sunday, 1")
            sb.AppendLine("// means Monday, etc.")
            sb.AppendLine("Calendar._TT['WEEKEND'] = '0,6';")
            sb.AppendLine("Calendar._TT['CLOSE'] = 'Cerrar';")
            sb.AppendLine("Calendar._TT['TODAY'] = 'Hoy';")
            sb.AppendLine("Calendar._TT['TIME_PART'] = '(Mayúscula-)Clic o arrastre para cambiar valor';")
            sb.AppendLine("// date formats")
            sb.AppendLine("Calendar._TT['DEF_DATE_FORMAT'] = '%d/%m/%Y';")
            sb.AppendLine("Calendar._TT['TT_DATE_FORMAT'] = '%A, %e de %B de %Y';")
            sb.AppendLine("Calendar._TT['WK'] = 'sem';")
            sb.AppendLine("Calendar._TT['TIME'] = 'Hora:';")
            If Not objPagina.ClientScript.IsStartupScriptRegistered("BrainWork_CalendarLang_es") Then
                objPagina.ClientScript.RegisterStartupScript(st, "BrainWork_CalendarLang_es", sb.ToString(), True)
            End If


        End Sub

        Shared Sub JS_CalendarSetup(ByVal RangeFrom As Integer, ByVal RengeTo As Integer, _
                                    ByVal objPagina As Page, ByVal st As System.Type)
            Dim sb As New System.Text.StringBuilder
            sb.AppendLine("Calendar.setup = function (params) {")
            sb.AppendLine("	function param_default(pname, def) { if (typeof params[pname] == 'undefined') { params[pname] = def; } };")
            sb.AppendLine("	param_default('inputField',     null);")
            sb.AppendLine("	param_default('displayArea',    null);")
            sb.AppendLine("	param_default('button',         null);")
            sb.AppendLine("	param_default('eventName',      'click');")
            sb.AppendLine("	param_default('ifFormat',       '%Y/%m/%d');")
            sb.AppendLine("	param_default('daFormat',       '%Y/%m/%d');")
            sb.AppendLine("	param_default('singleClick',    true);")
            sb.AppendLine("	param_default('disableFunc',    null);")
            sb.AppendLine("	param_default('dateStatusFunc', params['disableFunc']);	// takes precedence if both are defined")
            sb.AppendLine("	param_default('dateText',       null);")
            sb.AppendLine("	param_default('firstDay',       null);")
            sb.AppendLine("	param_default('align',          'Br');")
            sb.AppendLine("	param_default('range',          [" & RangeFrom & "," & RengeTo & "]);")
            sb.AppendLine("	param_default('weekNumbers',    true);")
            sb.AppendLine("	param_default('flat',           null);")
            sb.AppendLine("	param_default('flatCallback',   null);")
            sb.AppendLine("	param_default('onSelect',       null);")
            sb.AppendLine("	param_default('onClose',        null);")
            sb.AppendLine("	param_default('onUpdate',       null);")
            sb.AppendLine("	param_default('date',           null);")
            sb.AppendLine("	param_default('showsTime',      false);")
            sb.AppendLine("	param_default('timeFormat',     '24');")
            sb.AppendLine("	param_default('electric',       true);")
            sb.AppendLine("	param_default('step',           2);")
            sb.AppendLine("	param_default('position',       null);")
            sb.AppendLine("	param_default('cache',          false);")
            sb.AppendLine("	param_default('showOthers',     false);")
            sb.AppendLine("	param_default('multiple',       null);")
            sb.AppendLine("	var tmp = ['inputField', 'displayArea', 'button'];")
            sb.AppendLine("	for (var i in tmp) {")
            sb.AppendLine("		if (typeof params[tmp[i]] == 'string') {")
            sb.AppendLine("			params[tmp[i]] = document.getElementById(params[tmp[i]]);")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("	if (!(params.flat || params.multiple || params.inputField || params.displayArea || params.button)) {")
            sb.AppendLine("		alert('Calendar.setup:\n  Nothing to setup (no fields found).  Please check your code');")
            sb.AppendLine("		return false;")
            sb.AppendLine("	}")
            sb.AppendLine("	function onSelect(cal) {")
            sb.AppendLine("		var p = cal.params;")
            sb.AppendLine("		var update = (cal.dateClicked || p.electric);")
            sb.AppendLine("		if (update && p.inputField) {")
            sb.AppendLine("			p.inputField.value = cal.date.print(p.ifFormat);")
            sb.AppendLine("			if (typeof p.inputField.onchange == 'function')")
            sb.AppendLine("				p.inputField.onchange();")
            sb.AppendLine("		}")
            sb.AppendLine("		if (update && p.displayArea)")
            sb.AppendLine("			p.displayArea.innerHTML = cal.date.print(p.daFormat);")
            sb.AppendLine("		if (update && typeof p.onUpdate == 'function')")
            sb.AppendLine("			p.onUpdate(cal);")
            sb.AppendLine("		if (update && p.flat) {")
            sb.AppendLine("			if (typeof p.flatCallback == 'function')")
            sb.AppendLine("				p.flatCallback(cal);")
            sb.AppendLine("		}")
            sb.AppendLine("		if (update && p.singleClick && cal.dateClicked)")
            sb.AppendLine("			cal.callCloseHandler();")
            sb.AppendLine("	};")
            sb.AppendLine("	if (params.flat != null) {")
            sb.AppendLine("		if (typeof params.flat == 'string')")
            sb.AppendLine("			params.flat = document.getElementById(params.flat);")
            sb.AppendLine("		if (!params.flat) {")
            sb.AppendLine("			alert('Calendar.setup:\n  Flat specified but can not find parent.');")
            sb.AppendLine("			return false;")
            sb.AppendLine("		}")
            sb.AppendLine("		var cal = new Calendar(params.firstDay, params.date, params.onSelect || onSelect);")
            sb.AppendLine("		cal.showsOtherMonths = params.showOthers;")
            sb.AppendLine("		cal.showsTime = params.showsTime;")
            sb.AppendLine("		cal.time24 = (params.timeFormat == '24');")
            sb.AppendLine("		cal.params = params;")
            sb.AppendLine("		cal.weekNumbers = params.weekNumbers;")
            sb.AppendLine("		cal.setRange(params.range[0], params.range[1]);")
            sb.AppendLine("		cal.setDateStatusHandler(params.dateStatusFunc);")
            sb.AppendLine("		cal.getDateText = params.dateText;")
            sb.AppendLine("		if (params.ifFormat) {")
            sb.AppendLine("			cal.setDateFormat(params.ifFormat);")
            sb.AppendLine("		}")
            sb.AppendLine("		if (params.inputField && typeof params.inputField.value == 'string') {")
            sb.AppendLine("			cal.parseDate(params.inputField.value);")
            sb.AppendLine("		}")
            sb.AppendLine("		cal.create(params.flat);")
            sb.AppendLine("		cal.show();")
            sb.AppendLine("		return false;")
            sb.AppendLine("	}")
            sb.AppendLine("	var triggerEl = params.button || params.displayArea || params.inputField;")
            sb.AppendLine("	triggerEl['on' + params.eventName] = function() {")
            sb.AppendLine("		var dateEl = params.inputField || params.displayArea;")
            sb.AppendLine("		var dateFmt = params.inputField ? params.ifFormat : params.daFormat;")
            sb.AppendLine("		var mustCreate = false;")
            sb.AppendLine("		var cal = window.calendar;")
            sb.AppendLine("		if (dateEl)")
            sb.AppendLine("			params.date = Date.parseDate(dateEl.value || dateEl.innerHTML, dateFmt);")
            sb.AppendLine("		if (!(cal && params.cache)) {")
            sb.AppendLine("			window.calendar = cal = new Calendar(params.firstDay,")
            sb.AppendLine("							     params.date,")
            sb.AppendLine("							     params.onSelect || onSelect,")
            sb.AppendLine("							     params.onClose || function(cal) { cal.hide(); });")
            sb.AppendLine("			cal.showsTime = params.showsTime;")
            sb.AppendLine("			cal.time24 = (params.timeFormat == '24');")
            sb.AppendLine("			cal.weekNumbers = params.weekNumbers;")
            sb.AppendLine("			mustCreate = true;")
            sb.AppendLine("		} else {")
            sb.AppendLine("			if (params.date)")
            sb.AppendLine("				cal.setDate(params.date);")
            sb.AppendLine("			cal.hide();")
            sb.AppendLine("		}")
            sb.AppendLine("		if (params.multiple) {")
            sb.AppendLine("			cal.multiple = {};")
            sb.AppendLine("			for (var i = params.multiple.length; --i >= 0;) {")
            sb.AppendLine("				var d = params.multiple[i];")
            sb.AppendLine("				var ds = d.print('%Y%m%d');")
            sb.AppendLine("				cal.multiple[ds] = d;")
            sb.AppendLine("			}")
            sb.AppendLine("		}")
            sb.AppendLine("		cal.showsOtherMonths = params.showOthers;")
            sb.AppendLine("		cal.yearStep = params.step;")
            sb.AppendLine("		cal.setRange(params.range[0], params.range[1]);")
            sb.AppendLine("		cal.params = params;")
            sb.AppendLine("		cal.setDateStatusHandler(params.dateStatusFunc);")
            sb.AppendLine("		cal.getDateText = params.dateText;")
            sb.AppendLine("		cal.setDateFormat(dateFmt);")
            sb.AppendLine("		if (mustCreate)")
            sb.AppendLine("			cal.create();")
            sb.AppendLine("		cal.refresh();")
            sb.AppendLine("		if (!params.position)")
            sb.AppendLine("			cal.showAtElement(params.button || params.displayArea || params.inputField, params.align);")
            sb.AppendLine("		else")
            sb.AppendLine("			cal.showAt(params.position[0], params.position[1]);")
            sb.AppendLine("		return false;")
            sb.AppendLine("	};")
            sb.AppendLine("	return cal;")
            sb.AppendLine("};")
            If Not objPagina.ClientScript.IsStartupScriptRegistered("BrainWork_CalendarSetup") Then
                objPagina.ClientScript.RegisterStartupScript(st, "BrainWork_CalendarSetup", sb.ToString(), True)
            End If

        End Sub

        Shared Sub JS_CalendarInitializate(ByVal inputField As String, _
                                            ByVal ifFormat As String, _
                                            ByVal buttonTarget As String, _
                                            ByVal showsTime As String, _
                                            ByVal objPagina As Page, _
                                            ByVal st As System.Type)
            Dim sb As New System.Text.StringBuilder
            sb.AppendLine("function comenzarCalendario" & inputField & "()")
            sb.AppendLine("{")
            sb.AppendLine("	Calendar.setup({")
            sb.AppendLine("	inputField : '" & inputField & "', // id del campo de texto")
            sb.AppendLine("	ifFormat : '" & ifFormat & "', // formato de la fecha que se escriba en el campo de texto")
            sb.AppendLine("	button : '" & buttonTarget & "',// el id del botón que lanzará el calendario")
            sb.AppendLine("	showsTime : '" & showsTime & "' //true")
            sb.AppendLine("	});")
            sb.AppendLine("	")
            sb.AppendLine("	")
            sb.AppendLine("}")
            sb.AppendLine("comenzarCalendario" & inputField & "();")


            objPagina.ClientScript.RegisterStartupScript(st, inputField & "_comenzarCalendario", sb.ToString(), True)




        End Sub

        Shared Sub JS_verificarNumero(ByRef objPagina As Page, ByRef st As System.Type)
            Dim sb As New System.Text.StringBuilder

            sb.AppendLine("function verificarNumero(num,esentero)")
            sb.AppendLine("{")
            sb.AppendLine("	if(num=='')")
            sb.AppendLine("	{")
            sb.AppendLine("		return false;	")
            sb.AppendLine("	}")
            sb.AppendLine("	if(isNaN(num))")
            sb.AppendLine("	{")
            sb.AppendLine("		return false;")
            sb.AppendLine("	}")
            sb.AppendLine("	else")
            sb.AppendLine("	{")
            sb.AppendLine("		if(typeof esentero != 'undefined')")
            sb.AppendLine("		{")
            sb.AppendLine("			if(esentero==true)	")
            sb.AppendLine("			{")
            sb.AppendLine("				if(num.indexOf(',')>-1)")
            sb.AppendLine("				{")
            sb.AppendLine("					return false;")
            sb.AppendLine("				}")
            sb.AppendLine("				if(num.indexOf('.')>-1)")
            sb.AppendLine("				{")
            sb.AppendLine("					return false;")
            sb.AppendLine("				}")
            sb.AppendLine("			}")
            sb.AppendLine("		}")
            sb.AppendLine("	}")
            sb.AppendLine("	return true;")
            sb.AppendLine("}")

            If Not objPagina.ClientScript.IsStartupScriptRegistered("BrainWork_verificarNumero") Then
                objPagina.ClientScript.RegisterStartupScript(st, "BrainWork_verificarNumero", sb.ToString(), True)
            End If

        End Sub



        Shared Sub JS_verificarFecha(ByRef objPagina As Page, ByRef st As System.Type)
            Dim sb As New System.Text.StringBuilder
            sb.AppendLine("function verificarFecha(caja,obj)")
            sb.AppendLine("{ ")
            sb.AppendLine("   if (caja)")
            sb.AppendLine("   {  ")
            sb.AppendLine("      var borrar = caja;")
            sb.AppendLine("      if ((caja.substr(2,1) == '/') && (caja.substr(5,1) == '/'))")
            sb.AppendLine("      {      ")
            sb.AppendLine("         for (i=0; i<10; i++)")
            sb.AppendLine("	     {	")
            sb.AppendLine("            if (((caja.substr(i,1)<'0') || (caja.substr(i,1)>'9')) && (i != 2) && (i != 5))")
            sb.AppendLine("			{")
            sb.AppendLine("               borrar = '';")
            sb.AppendLine("               break;  ")
            sb.AppendLine("			}  ")
            sb.AppendLine("         }")
            sb.AppendLine("	     if (borrar)")
            sb.AppendLine("	     { ")
            sb.AppendLine("	        a = caja.substr(6,4);")
            sb.AppendLine("		    m = caja.substr(3,2);")
            sb.AppendLine("		    d = caja.substr(0,2);")
            sb.AppendLine("		    if((a < 1900) || (a > 2050) || (m < 1) || (m > 12) || (d < 1) || (d > 31))")
            sb.AppendLine("		       borrar = '';")
            sb.AppendLine("		    else")
            sb.AppendLine("		    {")
            sb.AppendLine("		       if((a%4 != 0) && (m == 2) && (d > 28))	   ")
            sb.AppendLine("		          borrar = ''; // Año no viciesto y es febrero y el dia es mayor a 28")
            sb.AppendLine("			   else	")
            sb.AppendLine("			   {")
            sb.AppendLine("		          if ((((m == 4) || (m == 6) || (m == 9) || (m==11)) && (d>30)) || ((m==2) && (d>29)))")
            sb.AppendLine("			         borrar = '';	      				  	 ")
            sb.AppendLine("			   }  // else")
            sb.AppendLine("		    } // fin else")
            sb.AppendLine("         } // if (error)")
            sb.AppendLine("      } // if ((caja.substr(2,1) == '/') && (caja.substr(5,1) == '/'))			    			")
            sb.AppendLine("	  else")
            sb.AppendLine("	     borrar = '';")
            sb.AppendLine("	  if (borrar == '')")
            sb.AppendLine("	  {")
            sb.AppendLine("	     alert('El Formato de la fecha es incorrecto\nDebe ingresar la fecha en formato dd/mm/aaaa');")
            sb.AppendLine("		 obj.focus();")
            sb.AppendLine("		 obj.select();")
            sb.AppendLine("		 return false;")
            sb.AppendLine("	  }")
            sb.AppendLine("	 else")
            sb.AppendLine("	 {")
            sb.AppendLine("	 	return true;")
            sb.AppendLine("	 }")
            sb.AppendLine("   } // if (caja)   ")
            sb.AppendLine("} // FUNCION")
            If Not objPagina.ClientScript.IsStartupScriptRegistered("BrainWork_verificarFecha") Then
                objPagina.ClientScript.RegisterStartupScript(st, "BrainWork_verificarFecha", sb.ToString(), True)
            End If


        End Sub
    End Class

End Namespace
